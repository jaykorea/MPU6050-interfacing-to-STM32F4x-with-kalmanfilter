
DFMmpu6050KalmanFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08008040  08008040  00018040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084e8  080084e8  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  080084e8  080084e8  000184e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084f0  080084f0  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084f0  080084f0  000184f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084f4  080084f4  000184f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  080084f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000270  08008768  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08008768  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe61  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002398  00000000  00000000  00030101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  000324a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  00032f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177fc  00000000  00000000  00033980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef3d  00000000  00000000  0004b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a599  00000000  00000000  0005a0b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4652  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df0  00000000  00000000  000e46a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000270 	.word	0x20000270
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008024 	.word	0x08008024

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000274 	.word	0x20000274
 80001dc:	08008024 	.word	0x08008024

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a2c      	ldr	r2, [pc, #176]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b2a      	ldr	r3, [pc, #168]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a25      	ldr	r2, [pc, #148]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <MX_GPIO_Init+0xd0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2120      	movs	r1, #32
 8000f3a:	4812      	ldr	r0, [pc, #72]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000f3c:	f001 fb6c 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f46:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <MX_GPIO_Init+0xd8>)
 8000f58:	f001 f9da 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f5c:	2320      	movs	r3, #32
 8000f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_GPIO_Init+0xd4>)
 8000f74:	f001 f9cc 	bl	8002310 <HAL_GPIO_Init>

}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40020800 	.word	0x40020800

08000f8c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_I2C1_Init+0x50>)
 8000f92:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <MX_I2C1_Init+0x54>)
 8000f94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_I2C1_Init+0x50>)
 8000f98:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <MX_I2C1_Init+0x58>)
 8000f9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_I2C1_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_I2C1_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_I2C1_Init+0x50>)
 8000faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <MX_I2C1_Init+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_I2C1_Init+0x50>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <MX_I2C1_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_I2C1_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <MX_I2C1_Init+0x50>)
 8000fca:	f001 fb3f 	bl	800264c <HAL_I2C_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fd4:	f000 f910 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000298 	.word	0x20000298
 8000fe0:	40005400 	.word	0x40005400
 8000fe4:	00061a80 	.word	0x00061a80

08000fe8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_I2C_MspInit+0x84>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d12b      	bne.n	8001062 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <HAL_I2C_MspInit+0x88>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_I2C_MspInit+0x88>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_I2C_MspInit+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001026:	23c0      	movs	r3, #192	; 0xc0
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102a:	2312      	movs	r3, #18
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001036:	2304      	movs	r3, #4
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <HAL_I2C_MspInit+0x8c>)
 8001042:	f001 f965 	bl	8002310 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_I2C_MspInit+0x88>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4a08      	ldr	r2, [pc, #32]	; (8001070 <HAL_I2C_MspInit+0x88>)
 8001050:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_I2C_MspInit+0x88>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40005400 	.word	0x40005400
 8001070:	40023800 	.word	0x40023800
 8001074:	40020400 	.word	0x40020400

08001078 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 100);
 8001080:	1d39      	adds	r1, r7, #4
 8001082:	2364      	movs	r3, #100	; 0x64
 8001084:	2201      	movs	r2, #1
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <__io_putchar+0x20>)
 8001088:	f002 ff61 	bl	8003f4e <HAL_UART_Transmit>
	return ch;
 800108c:	687b      	ldr	r3, [r7, #4]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200003d4 	.word	0x200003d4

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f000 fefc 	bl	8001e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f840 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f7ff ff02 	bl	8000eb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ac:	f000 fdb6 	bl	8001c1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010b0:	f7ff ff6c 	bl	8000f8c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80010b4:	f000 fd88 	bl	8001bc8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80010b8:	f000 fdda 	bl	8001c70 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 80010bc:	bf00      	nop
 80010be:	4816      	ldr	r0, [pc, #88]	; (8001118 <main+0x7c>)
 80010c0:	f000 f8a0 	bl	8001204 <MPU6050_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d0f9      	beq.n	80010be <main+0x22>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80010ca:	4914      	ldr	r1, [pc, #80]	; (800111c <main+0x80>)
 80010cc:	4812      	ldr	r0, [pc, #72]	; (8001118 <main+0x7c>)
 80010ce:	f000 f8fb 	bl	80012c8 <MPU6050_Read_All>
	  HAL_Delay(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 ff54 	bl	8001f80 <HAL_Delay>
//	  printf("\t");
//	  printf("%.2f", MPU6050.KalmanAngleY);
//	  printf("\t");
//	  printf("%.2f", MPU6050.Gz);
//	  printf("\t");
	  printf("%.2f", MPU6050.Ax);
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <main+0x80>)
 80010da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80010de:	4810      	ldr	r0, [pc, #64]	; (8001120 <main+0x84>)
 80010e0:	f004 faec 	bl	80056bc <iprintf>
	  printf("\t");
 80010e4:	2009      	movs	r0, #9
 80010e6:	f004 fb01 	bl	80056ec <putchar>
	  printf("%.2f", MPU6050.Ay);
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <main+0x80>)
 80010ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <main+0x84>)
 80010f2:	f004 fae3 	bl	80056bc <iprintf>
	  printf("\t");
 80010f6:	2009      	movs	r0, #9
 80010f8:	f004 faf8 	bl	80056ec <putchar>
	  printf("%.2f", MPU6050.Az);
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <main+0x80>)
 80010fe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <main+0x84>)
 8001104:	f004 fada 	bl	80056bc <iprintf>
	  printf("\r\n");
 8001108:	4806      	ldr	r0, [pc, #24]	; (8001124 <main+0x88>)
 800110a:	f004 fb73 	bl	80057f4 <puts>
	  HAL_Delay(10);
 800110e:	200a      	movs	r0, #10
 8001110:	f000 ff36 	bl	8001f80 <HAL_Delay>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001114:	e7d9      	b.n	80010ca <main+0x2e>
 8001116:	bf00      	nop
 8001118:	20000298 	.word	0x20000298
 800111c:	200002f0 	.word	0x200002f0
 8001120:	08008040 	.word	0x08008040
 8001124:	08008048 	.word	0x08008048

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	; 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2230      	movs	r2, #48	; 0x30
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fe4e 	bl	8004dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <SystemClock_Config+0xc8>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	4a26      	ldr	r2, [pc, #152]	; (80011f0 <SystemClock_Config+0xc8>)
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115a:	6413      	str	r3, [r2, #64]	; 0x40
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <SystemClock_Config+0xc8>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <SystemClock_Config+0xcc>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <SystemClock_Config+0xcc>)
 8001172:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <SystemClock_Config+0xcc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001184:	2301      	movs	r3, #1
 8001186:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001188:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118e:	2302      	movs	r3, #2
 8001190:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001192:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001198:	2304      	movs	r3, #4
 800119a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800119c:	2364      	movs	r3, #100	; 0x64
 800119e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011a4:	2304      	movs	r3, #4
 80011a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fa0d 	bl	80035cc <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011b8:	f000 f81e 	bl	80011f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011bc:	230f      	movs	r3, #15
 80011be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c0:	2302      	movs	r3, #2
 80011c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	2103      	movs	r1, #3
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 fc6f 	bl	8003abc <HAL_RCC_ClockConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011e4:	f000 f808 	bl	80011f8 <Error_Handler>
  }
}
 80011e8:	bf00      	nop
 80011ea:	3750      	adds	r7, #80	; 0x50
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40007000 	.word	0x40007000

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	e7fe      	b.n	8001200 <Error_Handler+0x8>
	...

08001204 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af04      	add	r7, sp, #16
 800120a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800120c:	2364      	movs	r3, #100	; 0x64
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2301      	movs	r3, #1
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	f107 030f 	add.w	r3, r7, #15
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2301      	movs	r3, #1
 800121c:	2275      	movs	r2, #117	; 0x75
 800121e:	21d0      	movs	r1, #208	; 0xd0
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f001 fc51 	bl	8002ac8 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	2b68      	cmp	r3, #104	; 0x68
 800122a:	d140      	bne.n	80012ae <MPU6050_Init+0xaa>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001230:	2364      	movs	r3, #100	; 0x64
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	2301      	movs	r3, #1
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	f107 030e 	add.w	r3, r7, #14
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2301      	movs	r3, #1
 8001240:	226b      	movs	r2, #107	; 0x6b
 8001242:	21d0      	movs	r1, #208	; 0xd0
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f001 fb45 	bl	80028d4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800124a:	2307      	movs	r3, #7
 800124c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800124e:	2364      	movs	r3, #100	; 0x64
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	2301      	movs	r3, #1
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	f107 030e 	add.w	r3, r7, #14
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	2219      	movs	r2, #25
 8001260:	21d0      	movs	r1, #208	; 0xd0
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f001 fb36 	bl	80028d4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001268:	2300      	movs	r3, #0
 800126a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800126c:	2364      	movs	r3, #100	; 0x64
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	2301      	movs	r3, #1
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	f107 030e 	add.w	r3, r7, #14
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	221c      	movs	r2, #28
 800127e:	21d0      	movs	r1, #208	; 0xd0
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f001 fb27 	bl	80028d4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001286:	2300      	movs	r3, #0
 8001288:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800128a:	2364      	movs	r3, #100	; 0x64
 800128c:	9302      	str	r3, [sp, #8]
 800128e:	2301      	movs	r3, #1
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	f107 030e 	add.w	r3, r7, #14
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2301      	movs	r3, #1
 800129a:	221b      	movs	r2, #27
 800129c:	21d0      	movs	r1, #208	; 0xd0
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f001 fb18 	bl	80028d4 <HAL_I2C_Mem_Write>
        printf("MPU6050 INIT SUCCESS\r\n");
 80012a4:	4806      	ldr	r0, [pc, #24]	; (80012c0 <MPU6050_Init+0xbc>)
 80012a6:	f004 faa5 	bl	80057f4 <puts>
        return 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e003      	b.n	80012b6 <MPU6050_Init+0xb2>
    }
    printf("MPU6050 INIT FAILED\r\n");
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MPU6050_Init+0xc0>)
 80012b0:	f004 faa0 	bl	80057f4 <puts>
    return 1;
 80012b4:	2301      	movs	r3, #1
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800804c 	.word	0x0800804c
 80012c4:	08008064 	.word	0x08008064

080012c8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80012c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012cc:	b094      	sub	sp, #80	; 0x50
 80012ce:	af04      	add	r7, sp, #16
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80012d4:	2364      	movs	r3, #100	; 0x64
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	230e      	movs	r3, #14
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2301      	movs	r3, #1
 80012e4:	223b      	movs	r2, #59	; 0x3b
 80012e6:	21d0      	movs	r1, #208	; 0xd0
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f001 fbed 	bl	8002ac8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80012ee:	7a3b      	ldrb	r3, [r7, #8]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	7a7b      	ldrb	r3, [r7, #9]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001300:	7abb      	ldrb	r3, [r7, #10]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21a      	sxth	r2, r3
 8001306:	7afb      	ldrb	r3, [r7, #11]
 8001308:	b21b      	sxth	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b21a      	sxth	r2, r3
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001312:	7b3b      	ldrb	r3, [r7, #12]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	7b7b      	ldrb	r3, [r7, #13]
 800131a:	b21b      	sxth	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b21a      	sxth	r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001324:	7bbb      	ldrb	r3, [r7, #14]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b21a      	sxth	r2, r3
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001332:	7c3b      	ldrb	r3, [r7, #16]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	b21a      	sxth	r2, r3
 8001338:	7c7b      	ldrb	r3, [r7, #17]
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21a      	sxth	r2, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001344:	7cbb      	ldrb	r3, [r7, #18]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	b21a      	sxth	r2, r3
 800134a:	7cfb      	ldrb	r3, [r7, #19]
 800134c:	b21b      	sxth	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b21a      	sxth	r2, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001356:	7d3b      	ldrb	r3, [r7, #20]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	7d7b      	ldrb	r3, [r7, #21]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21a      	sxth	r2, r3
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f8e0 	bl	8000534 <__aeabi_i2d>
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	4bbd      	ldr	r3, [pc, #756]	; (8001670 <MPU6050_Read_All+0x3a8>)
 800137a:	f7ff fa6f 	bl	800085c <__aeabi_ddiv>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f8d0 	bl	8000534 <__aeabi_i2d>
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	4bb5      	ldr	r3, [pc, #724]	; (8001670 <MPU6050_Read_All+0x3a8>)
 800139a:	f7ff fa5f 	bl	800085c <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f8c0 	bl	8000534 <__aeabi_i2d>
 80013b4:	a3a8      	add	r3, pc, #672	; (adr r3, 8001658 <MPU6050_Read_All+0x390>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	f7ff fa4f 	bl	800085c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80013c8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d4:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001674 <MPU6050_Read_All+0x3ac>
 80013d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013dc:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001678 <MPU6050_Read_All+0x3b0>
 80013e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f89f 	bl	8000534 <__aeabi_i2d>
 80013f6:	a39a      	add	r3, pc, #616	; (adr r3, 8001660 <MPU6050_Read_All+0x398>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff fa2e 	bl	800085c <__aeabi_ddiv>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	6839      	ldr	r1, [r7, #0]
 8001406:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f88f 	bl	8000534 <__aeabi_i2d>
 8001416:	a392      	add	r3, pc, #584	; (adr r3, 8001660 <MPU6050_Read_All+0x398>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff fa1e 	bl	800085c <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	6839      	ldr	r1, [r7, #0]
 8001426:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f87f 	bl	8000534 <__aeabi_i2d>
 8001436:	a38a      	add	r3, pc, #552	; (adr r3, 8001660 <MPU6050_Read_All+0x398>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff fa0e 	bl	800085c <__aeabi_ddiv>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	6839      	ldr	r1, [r7, #0]
 8001446:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800144a:	f000 fd8d 	bl	8001f68 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	4b8a      	ldr	r3, [pc, #552]	; (800167c <MPU6050_Read_All+0x3b4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f85c 	bl	8000514 <__aeabi_ui2d>
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b87      	ldr	r3, [pc, #540]	; (8001680 <MPU6050_Read_All+0x3b8>)
 8001462:	f7ff f9fb 	bl	800085c <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800146e:	f000 fd7b 	bl	8001f68 <HAL_GetTick>
 8001472:	4603      	mov	r3, r0
 8001474:	4a81      	ldr	r2, [pc, #516]	; (800167c <MPU6050_Read_All+0x3b4>)
 8001476:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147e:	461a      	mov	r2, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001486:	fb03 f202 	mul.w	r2, r3, r2
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001490:	4619      	mov	r1, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001498:	fb03 f301 	mul.w	r3, r3, r1
 800149c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f848 	bl	8000534 <__aeabi_i2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	ec43 2b10 	vmov	d0, r2, r3
 80014ac:	f006 fc08 	bl	8007cc0 <sqrt>
 80014b0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014c0:	f7ff fb0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d11f      	bne.n	800150a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f82f 	bl	8000534 <__aeabi_i2d>
 80014d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014da:	f7ff f9bf 	bl	800085c <__aeabi_ddiv>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	ec43 2b17 	vmov	d7, r2, r3
 80014e6:	eeb0 0a47 	vmov.f32	s0, s14
 80014ea:	eef0 0a67 	vmov.f32	s1, s15
 80014ee:	f006 fa3b 	bl	8007968 <atan>
 80014f2:	ec51 0b10 	vmov	r0, r1, d0
 80014f6:	a35c      	add	r3, pc, #368	; (adr r3, 8001668 <MPU6050_Read_All+0x3a0>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7ff f884 	bl	8000608 <__aeabi_dmul>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001508:	e005      	b.n	8001516 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151c:	425b      	negs	r3, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f808 	bl	8000534 <__aeabi_i2d>
 8001524:	4682      	mov	sl, r0
 8001526:	468b      	mov	fp, r1
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f800 	bl	8000534 <__aeabi_i2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	ec43 2b11 	vmov	d1, r2, r3
 800153c:	ec4b ab10 	vmov	d0, sl, fp
 8001540:	f006 fbbb 	bl	8007cba <atan2>
 8001544:	ec51 0b10 	vmov	r0, r1, d0
 8001548:	a347      	add	r3, pc, #284	; (adr r3, 8001668 <MPU6050_Read_All+0x3a0>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	f7ff f85b 	bl	8000608 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4b49      	ldr	r3, [pc, #292]	; (8001684 <MPU6050_Read_All+0x3bc>)
 8001560:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001564:	f7ff fac2 	bl	8000aec <__aeabi_dcmplt>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00a      	beq.n	8001584 <MPU6050_Read_All+0x2bc>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	4b43      	ldr	r3, [pc, #268]	; (8001688 <MPU6050_Read_All+0x3c0>)
 800157a:	f7ff fad5 	bl	8000b28 <__aeabi_dcmpgt>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d114      	bne.n	80015ae <MPU6050_Read_All+0x2e6>
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <MPU6050_Read_All+0x3c0>)
 800158a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800158e:	f7ff facb 	bl	8000b28 <__aeabi_dcmpgt>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d015      	beq.n	80015c4 <MPU6050_Read_All+0x2fc>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b38      	ldr	r3, [pc, #224]	; (8001684 <MPU6050_Read_All+0x3bc>)
 80015a4:	f7ff faa2 	bl	8000aec <__aeabi_dcmplt>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00a      	beq.n	80015c4 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 80015ae:	4937      	ldr	r1, [pc, #220]	; (800168c <MPU6050_Read_All+0x3c4>)
 80015b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80015b8:	6839      	ldr	r1, [r7, #0]
 80015ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015be:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80015c2:	e014      	b.n	80015ee <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80015ca:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80015ce:	eeb0 1a47 	vmov.f32	s2, s14
 80015d2:	eef0 1a67 	vmov.f32	s3, s15
 80015d6:	ed97 0b06 	vldr	d0, [r7, #24]
 80015da:	482c      	ldr	r0, [pc, #176]	; (800168c <MPU6050_Read_All+0x3c4>)
 80015dc:	f000 f85a 	bl	8001694 <Kalman_getAngle>
 80015e0:	eeb0 7a40 	vmov.f32	s14, s0
 80015e4:	eef0 7a60 	vmov.f32	s15, s1
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80015f4:	4690      	mov	r8, r2
 80015f6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <MPU6050_Read_All+0x3c0>)
 8001600:	4640      	mov	r0, r8
 8001602:	4649      	mov	r1, r9
 8001604:	f7ff fa90 	bl	8000b28 <__aeabi_dcmpgt>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d008      	beq.n	8001620 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001614:	4614      	mov	r4, r2
 8001616:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001626:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800162a:	eeb0 1a47 	vmov.f32	s2, s14
 800162e:	eef0 1a67 	vmov.f32	s3, s15
 8001632:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001636:	4816      	ldr	r0, [pc, #88]	; (8001690 <MPU6050_Read_All+0x3c8>)
 8001638:	f000 f82c 	bl	8001694 <Kalman_getAngle>
 800163c:	eeb0 7a40 	vmov.f32	s14, s0
 8001640:	eef0 7a60 	vmov.f32	s15, s1
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 800164a:	bf00      	nop
 800164c:	3740      	adds	r7, #64	; 0x40
 800164e:	46bd      	mov	sp, r7
 8001650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001654:	f3af 8000 	nop.w
 8001658:	00000000 	.word	0x00000000
 800165c:	40cc2900 	.word	0x40cc2900
 8001660:	00000000 	.word	0x00000000
 8001664:	40606000 	.word	0x40606000
 8001668:	1a63c1f8 	.word	0x1a63c1f8
 800166c:	404ca5dc 	.word	0x404ca5dc
 8001670:	40d00000 	.word	0x40d00000
 8001674:	43aa0000 	.word	0x43aa0000
 8001678:	42121eb8 	.word	0x42121eb8
 800167c:	20000348 	.word	0x20000348
 8001680:	408f4000 	.word	0x408f4000
 8001684:	c0568000 	.word	0xc0568000
 8001688:	40568000 	.word	0x40568000
 800168c:	20000048 	.word	0x20000048
 8001690:	20000000 	.word	0x20000000

08001694 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b096      	sub	sp, #88	; 0x58
 8001698:	af00      	add	r7, sp, #0
 800169a:	61f8      	str	r0, [r7, #28]
 800169c:	ed87 0b04 	vstr	d0, [r7, #16]
 80016a0:	ed87 1b02 	vstr	d1, [r7, #8]
 80016a4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80016ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016b2:	f7fe fdf1 	bl	8000298 <__aeabi_dsub>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80016c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80016c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016cc:	f7fe ff9c 	bl	8000608 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe fde0 	bl	800029c <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	69f9      	ldr	r1, [r7, #28]
 80016e2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80016f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016f6:	f7fe ff87 	bl	8000608 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001708:	f7fe fdc6 	bl	8000298 <__aeabi_dsub>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800171a:	f7fe fdbd 	bl	8000298 <__aeabi_dsub>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe fdb6 	bl	800029c <__adddf3>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800173c:	f7fe ff64 	bl	8000608 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4620      	mov	r0, r4
 8001746:	4629      	mov	r1, r5
 8001748:	f7fe fda8 	bl	800029c <__adddf3>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	69f9      	ldr	r1, [r7, #28]
 8001752:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001766:	f7fe ff4f 	bl	8000608 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4620      	mov	r0, r4
 8001770:	4629      	mov	r1, r5
 8001772:	f7fe fd91 	bl	8000298 <__aeabi_dsub>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	69f9      	ldr	r1, [r7, #28]
 800177c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800178c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001790:	f7fe ff3a 	bl	8000608 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4620      	mov	r0, r4
 800179a:	4629      	mov	r1, r5
 800179c:	f7fe fd7c 	bl	8000298 <__aeabi_dsub>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	69f9      	ldr	r1, [r7, #28]
 80017a6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80017b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017ba:	f7fe ff25 	bl	8000608 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4620      	mov	r0, r4
 80017c4:	4629      	mov	r1, r5
 80017c6:	f7fe fd69 	bl	800029c <__adddf3>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	69f9      	ldr	r1, [r7, #28]
 80017d0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80017e0:	f7fe fd5c 	bl	800029c <__adddf3>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80017f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017f6:	f7ff f831 	bl	800085c <__aeabi_ddiv>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800180c:	f7ff f826 	bl	800085c <__aeabi_ddiv>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800181e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001822:	f7fe fd39 	bl	8000298 <__aeabi_dsub>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001834:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001838:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800183c:	f7fe fee4 	bl	8000608 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4620      	mov	r0, r4
 8001846:	4629      	mov	r1, r5
 8001848:	f7fe fd28 	bl	800029c <__adddf3>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	69f9      	ldr	r1, [r7, #28]
 8001852:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800185c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001860:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001864:	f7fe fed0 	bl	8000608 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4620      	mov	r0, r4
 800186e:	4629      	mov	r1, r5
 8001870:	f7fe fd14 	bl	800029c <__adddf3>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	69f9      	ldr	r1, [r7, #28]
 800187a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001884:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800188e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001898:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800189c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80018a0:	f7fe feb2 	bl	8000608 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4620      	mov	r0, r4
 80018aa:	4629      	mov	r1, r5
 80018ac:	f7fe fcf4 	bl	8000298 <__aeabi_dsub>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	69f9      	ldr	r1, [r7, #28]
 80018b6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80018c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80018c8:	f7fe fe9e 	bl	8000608 <__aeabi_dmul>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4620      	mov	r0, r4
 80018d2:	4629      	mov	r1, r5
 80018d4:	f7fe fce0 	bl	8000298 <__aeabi_dsub>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	69f9      	ldr	r1, [r7, #28]
 80018de:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80018e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80018ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80018f0:	f7fe fe8a 	bl	8000608 <__aeabi_dmul>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7fe fccc 	bl	8000298 <__aeabi_dsub>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	69f9      	ldr	r1, [r7, #28]
 8001906:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001910:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001914:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001918:	f7fe fe76 	bl	8000608 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	f7fe fcb8 	bl	8000298 <__aeabi_dsub>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	69f9      	ldr	r1, [r7, #28]
 800192e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001938:	ec43 2b17 	vmov	d7, r2, r3
};
 800193c:	eeb0 0a47 	vmov.f32	s0, s14
 8001940:	eef0 0a67 	vmov.f32	s1, s15
 8001944:	3758      	adds	r7, #88	; 0x58
 8001946:	46bd      	mov	sp, r7
 8001948:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800194c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_MspInit+0x4c>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_MspInit+0x4c>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_MspInit+0x4c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_MspInit+0x4c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_MspInit+0x4c>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_MspInit+0x4c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800198a:	2007      	movs	r0, #7
 800198c:	f000 fbec 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <NMI_Handler+0x4>

080019a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <HardFault_Handler+0x4>

080019a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <MemManage_Handler+0x4>

080019ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <BusFault_Handler+0x4>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <UsageFault_Handler+0x4>

080019ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e8:	f000 faaa 	bl	8001f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <USART1_IRQHandler+0x10>)
 80019f6:	f002 fb3d 	bl	8004074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000034c 	.word	0x2000034c

08001a04 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <USART6_IRQHandler+0x10>)
 8001a0a:	f002 fb33 	bl	8004074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000390 	.word	0x20000390

08001a18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
	return 1;
 8001a1c:	2301      	movs	r3, #1
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_kill>:

int _kill(int pid, int sig)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a32:	f003 f9a7 	bl	8004d84 <__errno>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2216      	movs	r2, #22
 8001a3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_exit>:

void _exit (int status)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ffe7 	bl	8001a28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a5a:	e7fe      	b.n	8001a5a <_exit+0x12>

08001a5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e00a      	b.n	8001a84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a6e:	f3af 8000 	nop.w
 8001a72:	4601      	mov	r1, r0
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	60ba      	str	r2, [r7, #8]
 8001a7a:	b2ca      	uxtb	r2, r1
 8001a7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dbf0      	blt.n	8001a6e <_read+0x12>
	}

return len;
 8001a8c:	687b      	ldr	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	e009      	b.n	8001abc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fae1 	bl	8001078 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf1      	blt.n	8001aa8 <_write+0x12>
	}
	return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_close>:

int _close(int file)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af6:	605a      	str	r2, [r3, #4]
	return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_isatty>:

int _isatty(int file)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
	return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b40:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <_sbrk+0x5c>)
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <_sbrk+0x60>)
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <_sbrk+0x64>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <_sbrk+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d207      	bcs.n	8001b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b68:	f003 f90c 	bl	8004d84 <__errno>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	220c      	movs	r2, #12
 8001b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	e009      	b.n	8001b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <_sbrk+0x64>)
 8001b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20020000 	.word	0x20020000
 8001b98:	00000400 	.word	0x00000400
 8001b9c:	2000028c 	.word	0x2000028c
 8001ba0:	20000430 	.word	0x20000430

08001ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <SystemInit+0x20>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <SystemInit+0x20>)
 8001bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <MX_USART1_UART_Init+0x50>)
 8001bd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001bd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_USART1_UART_Init+0x4c>)
 8001c00:	f002 f958 	bl	8003eb4 <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c0a:	f7ff faf5 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000034c 	.word	0x2000034c
 8001c18:	40011000 	.word	0x40011000

08001c1c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <MX_USART2_UART_Init+0x50>)
 8001c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c26:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_USART2_UART_Init+0x4c>)
 8001c54:	f002 f92e 	bl	8003eb4 <HAL_UART_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c5e:	f7ff facb 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200003d4 	.word	0x200003d4
 8001c6c:	40004400 	.word	0x40004400

08001c70 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_USART6_UART_Init+0x4c>)
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <MX_USART6_UART_Init+0x50>)
 8001c78:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <MX_USART6_UART_Init+0x4c>)
 8001c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c80:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_USART6_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_USART6_UART_Init+0x4c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_USART6_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_USART6_UART_Init+0x4c>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_USART6_UART_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_USART6_UART_Init+0x4c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_USART6_UART_Init+0x4c>)
 8001ca8:	f002 f904 	bl	8003eb4 <HAL_UART_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001cb2:	f7ff faa1 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000390 	.word	0x20000390
 8001cc0:	40011400 	.word	0x40011400

08001cc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08e      	sub	sp, #56	; 0x38
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a53      	ldr	r2, [pc, #332]	; (8001e30 <HAL_UART_MspInit+0x16c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d135      	bne.n	8001d52 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
 8001cea:	4b52      	ldr	r3, [pc, #328]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a51      	ldr	r2, [pc, #324]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001cf0:	f043 0310 	orr.w	r3, r3, #16
 8001cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf6:	4b4f      	ldr	r3, [pc, #316]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f003 0310 	and.w	r3, r3, #16
 8001cfe:	623b      	str	r3, [r7, #32]
 8001d00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	4b4b      	ldr	r3, [pc, #300]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a4a      	ldr	r2, [pc, #296]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b48      	ldr	r3, [pc, #288]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d30:	2307      	movs	r3, #7
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	4619      	mov	r1, r3
 8001d3a:	483f      	ldr	r0, [pc, #252]	; (8001e38 <HAL_UART_MspInit+0x174>)
 8001d3c:	f000 fae8 	bl	8002310 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2100      	movs	r1, #0
 8001d44:	2025      	movs	r0, #37	; 0x25
 8001d46:	f000 fa1a 	bl	800217e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d4a:	2025      	movs	r0, #37	; 0x25
 8001d4c:	f000 fa33 	bl	80021b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001d50:	e06a      	b.n	8001e28 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a39      	ldr	r2, [pc, #228]	; (8001e3c <HAL_UART_MspInit+0x178>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d12c      	bne.n	8001db6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	4b34      	ldr	r3, [pc, #208]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	4a33      	ldr	r2, [pc, #204]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6c:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	4a2c      	ldr	r2, [pc, #176]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6313      	str	r3, [r2, #48]	; 0x30
 8001d88:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d94:	230c      	movs	r3, #12
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001da4:	2307      	movs	r3, #7
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dac:	4619      	mov	r1, r3
 8001dae:	4822      	ldr	r0, [pc, #136]	; (8001e38 <HAL_UART_MspInit+0x174>)
 8001db0:	f000 faae 	bl	8002310 <HAL_GPIO_Init>
}
 8001db4:	e038      	b.n	8001e28 <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART6)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a21      	ldr	r2, [pc, #132]	; (8001e40 <HAL_UART_MspInit+0x17c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d133      	bne.n	8001e28 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	4a1a      	ldr	r2, [pc, #104]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001dca:	f043 0320 	orr.w	r3, r3, #32
 8001dce:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a13      	ldr	r2, [pc, #76]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	6313      	str	r3, [r2, #48]	; 0x30
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HAL_UART_MspInit+0x170>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001df8:	23c0      	movs	r3, #192	; 0xc0
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e10:	4619      	mov	r1, r3
 8001e12:	480c      	ldr	r0, [pc, #48]	; (8001e44 <HAL_UART_MspInit+0x180>)
 8001e14:	f000 fa7c 	bl	8002310 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	2047      	movs	r0, #71	; 0x47
 8001e1e:	f000 f9ae 	bl	800217e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001e22:	2047      	movs	r0, #71	; 0x47
 8001e24:	f000 f9c7 	bl	80021b6 <HAL_NVIC_EnableIRQ>
}
 8001e28:	bf00      	nop
 8001e2a:	3738      	adds	r7, #56	; 0x38
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40011000 	.word	0x40011000
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40004400 	.word	0x40004400
 8001e40:	40011400 	.word	0x40011400
 8001e44:	40020800 	.word	0x40020800

08001e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e4e:	490e      	ldr	r1, [pc, #56]	; (8001e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e64:	4c0b      	ldr	r4, [pc, #44]	; (8001e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e72:	f7ff fe97 	bl	8001ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e76:	f002 ff8b 	bl	8004d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7a:	f7ff f90f 	bl	800109c <main>
  bx  lr    
 8001e7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e88:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8001e8c:	080084f8 	.word	0x080084f8
  ldr r2, =_sbss
 8001e90:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8001e94:	2000042c 	.word	0x2000042c

08001e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC_IRQHandler>
	...

08001e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_Init+0x40>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <HAL_Init+0x40>)
 8001ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <HAL_Init+0x40>)
 8001eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_Init+0x40>)
 8001ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f000 f94f 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f000 f808 	bl	8001ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed0:	f7ff fd3c 	bl	800194c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023c00 	.word	0x40023c00

08001ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_InitTick+0x54>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_InitTick+0x58>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f967 	bl	80021d2 <HAL_SYSTICK_Config>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00e      	b.n	8001f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b0f      	cmp	r3, #15
 8001f12:	d80a      	bhi.n	8001f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f14:	2200      	movs	r2, #0
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f000 f92f 	bl	800217e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f20:	4a06      	ldr	r2, [pc, #24]	; (8001f3c <HAL_InitTick+0x5c>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e000      	b.n	8001f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000090 	.word	0x20000090
 8001f38:	20000098 	.word	0x20000098
 8001f3c:	20000094 	.word	0x20000094

08001f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_IncTick+0x20>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_IncTick+0x24>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <HAL_IncTick+0x24>)
 8001f52:	6013      	str	r3, [r2, #0]
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000098 	.word	0x20000098
 8001f64:	20000418 	.word	0x20000418

08001f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <HAL_GetTick+0x14>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000418 	.word	0x20000418

08001f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff ffee 	bl	8001f68 <HAL_GetTick>
 8001f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d005      	beq.n	8001fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_Delay+0x44>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fa6:	bf00      	nop
 8001fa8:	f7ff ffde 	bl	8001f68 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d8f7      	bhi.n	8001fa8 <HAL_Delay+0x28>
  {
  }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000098 	.word	0x20000098

08001fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffa:	4a04      	ldr	r2, [pc, #16]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	60d3      	str	r3, [r2, #12]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <__NVIC_GetPriorityGrouping+0x18>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	f003 0307 	and.w	r3, r3, #7
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	2b00      	cmp	r3, #0
 800203c:	db0b      	blt.n	8002056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	4907      	ldr	r1, [pc, #28]	; (8002064 <__NVIC_EnableIRQ+0x38>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2001      	movs	r0, #1
 800204e:	fa00 f202 	lsl.w	r2, r0, r2
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000e100 	.word	0xe000e100

08002068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	; (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	; (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	; 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f1c3 0307 	rsb	r3, r3, #7
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	bf28      	it	cs
 80020da:	2304      	movcs	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d902      	bls.n	80020ec <NVIC_EncodePriority+0x30>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b03      	subs	r3, #3
 80020ea:	e000      	b.n	80020ee <NVIC_EncodePriority+0x32>
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43d9      	mvns	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	4313      	orrs	r3, r2
         );
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002134:	d301      	bcc.n	800213a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002136:	2301      	movs	r3, #1
 8002138:	e00f      	b.n	800215a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <SysTick_Config+0x40>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002142:	210f      	movs	r1, #15
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f7ff ff8e 	bl	8002068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <SysTick_Config+0x40>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <SysTick_Config+0x40>)
 8002154:	2207      	movs	r2, #7
 8002156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	e000e010 	.word	0xe000e010

08002168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff29 	bl	8001fc8 <__NVIC_SetPriorityGrouping>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002190:	f7ff ff3e 	bl	8002010 <__NVIC_GetPriorityGrouping>
 8002194:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f7ff ff8e 	bl	80020bc <NVIC_EncodePriority>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ff5d 	bl	8002068 <__NVIC_SetPriority>
}
 80021ae:	bf00      	nop
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff31 	bl	800202c <__NVIC_EnableIRQ>
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffa2 	bl	8002124 <SysTick_Config>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff feb6 	bl	8001f68 <HAL_GetTick>
 80021fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d008      	beq.n	800221c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e052      	b.n	80022c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0216 	bic.w	r2, r2, #22
 800222a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800223a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d103      	bne.n	800224c <HAL_DMA_Abort+0x62>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0208 	bic.w	r2, r2, #8
 800225a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800226c:	e013      	b.n	8002296 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800226e:	f7ff fe7b 	bl	8001f68 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b05      	cmp	r3, #5
 800227a:	d90c      	bls.n	8002296 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2203      	movs	r2, #3
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e015      	b.n	80022c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e4      	bne.n	800226e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	223f      	movs	r2, #63	; 0x3f
 80022aa:	409a      	lsls	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d004      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2280      	movs	r2, #128	; 0x80
 80022e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e00c      	b.n	8002302 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2205      	movs	r2, #5
 80022ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	; 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	e159      	b.n	80025e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800232c:	2201      	movs	r2, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	f040 8148 	bne.w	80025da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d005      	beq.n	8002362 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235e:	2b02      	cmp	r3, #2
 8002360:	d130      	bne.n	80023c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2203      	movs	r2, #3
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 0201 	and.w	r2, r3, #1
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d017      	beq.n	8002400 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0303 	and.w	r3, r3, #3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d123      	bne.n	8002454 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	08da      	lsrs	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3208      	adds	r2, #8
 8002414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	08da      	lsrs	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3208      	adds	r2, #8
 800244e:	69b9      	ldr	r1, [r7, #24]
 8002450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	2203      	movs	r2, #3
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0203 	and.w	r2, r3, #3
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a2 	beq.w	80025da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b57      	ldr	r3, [pc, #348]	; (80025f8 <HAL_GPIO_Init+0x2e8>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a56      	ldr	r2, [pc, #344]	; (80025f8 <HAL_GPIO_Init+0x2e8>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b54      	ldr	r3, [pc, #336]	; (80025f8 <HAL_GPIO_Init+0x2e8>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b2:	4a52      	ldr	r2, [pc, #328]	; (80025fc <HAL_GPIO_Init+0x2ec>)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	089b      	lsrs	r3, r3, #2
 80024b8:	3302      	adds	r3, #2
 80024ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	220f      	movs	r2, #15
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a49      	ldr	r2, [pc, #292]	; (8002600 <HAL_GPIO_Init+0x2f0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d019      	beq.n	8002512 <HAL_GPIO_Init+0x202>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a48      	ldr	r2, [pc, #288]	; (8002604 <HAL_GPIO_Init+0x2f4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_GPIO_Init+0x1fe>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a47      	ldr	r2, [pc, #284]	; (8002608 <HAL_GPIO_Init+0x2f8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00d      	beq.n	800250a <HAL_GPIO_Init+0x1fa>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a46      	ldr	r2, [pc, #280]	; (800260c <HAL_GPIO_Init+0x2fc>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <HAL_GPIO_Init+0x1f6>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a45      	ldr	r2, [pc, #276]	; (8002610 <HAL_GPIO_Init+0x300>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_GPIO_Init+0x1f2>
 80024fe:	2304      	movs	r3, #4
 8002500:	e008      	b.n	8002514 <HAL_GPIO_Init+0x204>
 8002502:	2307      	movs	r3, #7
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x204>
 8002506:	2303      	movs	r3, #3
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x204>
 800250a:	2302      	movs	r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x204>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x204>
 8002512:	2300      	movs	r3, #0
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f002 0203 	and.w	r2, r2, #3
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4093      	lsls	r3, r2
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002524:	4935      	ldr	r1, [pc, #212]	; (80025fc <HAL_GPIO_Init+0x2ec>)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002532:	4b38      	ldr	r3, [pc, #224]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002556:	4a2f      	ldr	r2, [pc, #188]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800255c:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_GPIO_Init+0x304>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002580:	4a24      	ldr	r2, [pc, #144]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002586:	4b23      	ldr	r3, [pc, #140]	; (8002614 <HAL_GPIO_Init+0x304>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025aa:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d4:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <HAL_GPIO_Init+0x304>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3301      	adds	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	f67f aea2 	bls.w	800232c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3724      	adds	r7, #36	; 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40013800 	.word	0x40013800
 8002600:	40020000 	.word	0x40020000
 8002604:	40020400 	.word	0x40020400
 8002608:	40020800 	.word	0x40020800
 800260c:	40020c00 	.word	0x40020c00
 8002610:	40021000 	.word	0x40021000
 8002614:	40013c00 	.word	0x40013c00

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002634:	e003      	b.n	800263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	619a      	str	r2, [r3, #24]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e12b      	b.n	80028b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe fcb8 	bl	8000fe8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2224      	movs	r2, #36	; 0x24
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800269e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b0:	f001 fbd8 	bl	8003e64 <HAL_RCC_GetPCLK1Freq>
 80026b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4a81      	ldr	r2, [pc, #516]	; (80028c0 <HAL_I2C_Init+0x274>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d807      	bhi.n	80026d0 <HAL_I2C_Init+0x84>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4a80      	ldr	r2, [pc, #512]	; (80028c4 <HAL_I2C_Init+0x278>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	bf94      	ite	ls
 80026c8:	2301      	movls	r3, #1
 80026ca:	2300      	movhi	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e006      	b.n	80026de <HAL_I2C_Init+0x92>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a7d      	ldr	r2, [pc, #500]	; (80028c8 <HAL_I2C_Init+0x27c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	bf94      	ite	ls
 80026d8:	2301      	movls	r3, #1
 80026da:	2300      	movhi	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0e7      	b.n	80028b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a78      	ldr	r2, [pc, #480]	; (80028cc <HAL_I2C_Init+0x280>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	0c9b      	lsrs	r3, r3, #18
 80026f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	430a      	orrs	r2, r1
 8002704:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a6a      	ldr	r2, [pc, #424]	; (80028c0 <HAL_I2C_Init+0x274>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d802      	bhi.n	8002720 <HAL_I2C_Init+0xd4>
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	3301      	adds	r3, #1
 800271e:	e009      	b.n	8002734 <HAL_I2C_Init+0xe8>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	4a69      	ldr	r2, [pc, #420]	; (80028d0 <HAL_I2C_Init+0x284>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	099b      	lsrs	r3, r3, #6
 8002732:	3301      	adds	r3, #1
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	430b      	orrs	r3, r1
 800273a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002746:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	495c      	ldr	r1, [pc, #368]	; (80028c0 <HAL_I2C_Init+0x274>)
 8002750:	428b      	cmp	r3, r1
 8002752:	d819      	bhi.n	8002788 <HAL_I2C_Init+0x13c>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1e59      	subs	r1, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002762:	1c59      	adds	r1, r3, #1
 8002764:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002768:	400b      	ands	r3, r1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_I2C_Init+0x138>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1e59      	subs	r1, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fbb1 f3f3 	udiv	r3, r1, r3
 800277c:	3301      	adds	r3, #1
 800277e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002782:	e051      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 8002784:	2304      	movs	r3, #4
 8002786:	e04f      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d111      	bne.n	80027b4 <HAL_I2C_Init+0x168>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1e58      	subs	r0, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	440b      	add	r3, r1
 800279e:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e012      	b.n	80027da <HAL_I2C_Init+0x18e>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e58      	subs	r0, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	0099      	lsls	r1, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf0c      	ite	eq
 80027d4:	2301      	moveq	r3, #1
 80027d6:	2300      	movne	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_Init+0x196>
 80027de:	2301      	movs	r3, #1
 80027e0:	e022      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10e      	bne.n	8002808 <HAL_I2C_Init+0x1bc>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1e58      	subs	r0, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6859      	ldr	r1, [r3, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	440b      	add	r3, r1
 80027f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002806:	e00f      	b.n	8002828 <HAL_I2C_Init+0x1dc>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1e58      	subs	r0, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	0099      	lsls	r1, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	fbb0 f3f3 	udiv	r3, r0, r3
 800281e:	3301      	adds	r3, #1
 8002820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	6809      	ldr	r1, [r1, #0]
 800282c:	4313      	orrs	r3, r2
 800282e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002856:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6911      	ldr	r1, [r2, #16]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68d2      	ldr	r2, [r2, #12]
 8002862:	4311      	orrs	r1, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	430b      	orrs	r3, r1
 800286a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	000186a0 	.word	0x000186a0
 80028c4:	001e847f 	.word	0x001e847f
 80028c8:	003d08ff 	.word	0x003d08ff
 80028cc:	431bde83 	.word	0x431bde83
 80028d0:	10624dd3 	.word	0x10624dd3

080028d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	4608      	mov	r0, r1
 80028de:	4611      	mov	r1, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	817b      	strh	r3, [r7, #10]
 80028e6:	460b      	mov	r3, r1
 80028e8:	813b      	strh	r3, [r7, #8]
 80028ea:	4613      	mov	r3, r2
 80028ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028ee:	f7ff fb3b 	bl	8001f68 <HAL_GetTick>
 80028f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	f040 80d9 	bne.w	8002ab4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	2319      	movs	r3, #25
 8002908:	2201      	movs	r2, #1
 800290a:	496d      	ldr	r1, [pc, #436]	; (8002ac0 <HAL_I2C_Mem_Write+0x1ec>)
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 fc7f 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
 800291a:	e0cc      	b.n	8002ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_I2C_Mem_Write+0x56>
 8002926:	2302      	movs	r3, #2
 8002928:	e0c5      	b.n	8002ab6 <HAL_I2C_Mem_Write+0x1e2>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b01      	cmp	r3, #1
 800293e:	d007      	beq.n	8002950 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2221      	movs	r2, #33	; 0x21
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2240      	movs	r2, #64	; 0x40
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a3a      	ldr	r2, [r7, #32]
 800297a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002980:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4a4d      	ldr	r2, [pc, #308]	; (8002ac4 <HAL_I2C_Mem_Write+0x1f0>)
 8002990:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002992:	88f8      	ldrh	r0, [r7, #6]
 8002994:	893a      	ldrh	r2, [r7, #8]
 8002996:	8979      	ldrh	r1, [r7, #10]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4603      	mov	r3, r0
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fab6 	bl	8002f14 <I2C_RequestMemoryWrite>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d052      	beq.n	8002a54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e081      	b.n	8002ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 fd00 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00d      	beq.n	80029de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d107      	bne.n	80029da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e06b      	b.n	8002ab6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	781a      	ldrb	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d11b      	bne.n	8002a54 <HAL_I2C_Mem_Write+0x180>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d017      	beq.n	8002a54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	781a      	ldrb	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1aa      	bne.n	80029b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fcec 	bl	800343e <I2C_WaitOnBTFFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00d      	beq.n	8002a88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d107      	bne.n	8002a84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e016      	b.n	8002ab6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e000      	b.n	8002ab6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ab4:	2302      	movs	r3, #2
  }
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	00100002 	.word	0x00100002
 8002ac4:	ffff0000 	.word	0xffff0000

08002ac8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08c      	sub	sp, #48	; 0x30
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	4608      	mov	r0, r1
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	817b      	strh	r3, [r7, #10]
 8002ada:	460b      	mov	r3, r1
 8002adc:	813b      	strh	r3, [r7, #8]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ae2:	f7ff fa41 	bl	8001f68 <HAL_GetTick>
 8002ae6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	f040 8208 	bne.w	8002f06 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	2319      	movs	r3, #25
 8002afc:	2201      	movs	r2, #1
 8002afe:	497b      	ldr	r1, [pc, #492]	; (8002cec <HAL_I2C_Mem_Read+0x224>)
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fb85 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e1fb      	b.n	8002f08 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_I2C_Mem_Read+0x56>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e1f4      	b.n	8002f08 <HAL_I2C_Mem_Read+0x440>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d007      	beq.n	8002b44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2222      	movs	r2, #34	; 0x22
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2240      	movs	r2, #64	; 0x40
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a5b      	ldr	r2, [pc, #364]	; (8002cf0 <HAL_I2C_Mem_Read+0x228>)
 8002b84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b86:	88f8      	ldrh	r0, [r7, #6]
 8002b88:	893a      	ldrh	r2, [r7, #8]
 8002b8a:	8979      	ldrh	r1, [r7, #10]
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	4603      	mov	r3, r0
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fa52 	bl	8003040 <I2C_RequestMemoryRead>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e1b0      	b.n	8002f08 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d113      	bne.n	8002bd6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	623b      	str	r3, [r7, #32]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	623b      	str	r3, [r7, #32]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	623b      	str	r3, [r7, #32]
 8002bc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e184      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d11b      	bne.n	8002c16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	e164      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d11b      	bne.n	8002c56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	e144      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c6c:	e138      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	f200 80f1 	bhi.w	8002e5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d123      	bne.n	8002cc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fc1b 	bl	80034c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e139      	b.n	8002f08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cc6:	e10b      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d14e      	bne.n	8002d6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	4906      	ldr	r1, [pc, #24]	; (8002cf4 <HAL_I2C_Mem_Read+0x22c>)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 fa98 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e10e      	b.n	8002f08 <HAL_I2C_Mem_Read+0x440>
 8002cea:	bf00      	nop
 8002cec:	00100002 	.word	0x00100002
 8002cf0:	ffff0000 	.word	0xffff0000
 8002cf4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d6c:	e0b8      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	2200      	movs	r2, #0
 8002d76:	4966      	ldr	r1, [pc, #408]	; (8002f10 <HAL_I2C_Mem_Read+0x448>)
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 fa49 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0bf      	b.n	8002f08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	494f      	ldr	r1, [pc, #316]	; (8002f10 <HAL_I2C_Mem_Read+0x448>)
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fa1b 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e091      	b.n	8002f08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e58:	e042      	b.n	8002ee0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fb2e 	bl	80034c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e04c      	b.n	8002f08 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d118      	bne.n	8002ee0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f47f aec2 	bne.w	8002c6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
  }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3728      	adds	r7, #40	; 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	00010004 	.word	0x00010004

08002f14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	4608      	mov	r0, r1
 8002f1e:	4611      	mov	r1, r2
 8002f20:	461a      	mov	r2, r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	817b      	strh	r3, [r7, #10]
 8002f26:	460b      	mov	r3, r1
 8002f28:	813b      	strh	r3, [r7, #8]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f960 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00d      	beq.n	8002f72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f64:	d103      	bne.n	8002f6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e05f      	b.n	8003032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f72:	897b      	ldrh	r3, [r7, #10]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	6a3a      	ldr	r2, [r7, #32]
 8002f86:	492d      	ldr	r1, [pc, #180]	; (800303c <I2C_RequestMemoryWrite+0x128>)
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f998 	bl	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e04c      	b.n	8003032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb0:	6a39      	ldr	r1, [r7, #32]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 fa02 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00d      	beq.n	8002fda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d107      	bne.n	8002fd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e02b      	b.n	8003032 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d105      	bne.n	8002fec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fe0:	893b      	ldrh	r3, [r7, #8]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	611a      	str	r2, [r3, #16]
 8002fea:	e021      	b.n	8003030 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fec:	893b      	ldrh	r3, [r7, #8]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffc:	6a39      	ldr	r1, [r7, #32]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f9dc 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2b04      	cmp	r3, #4
 8003010:	d107      	bne.n	8003022 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003020:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e005      	b.n	8003032 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003026:	893b      	ldrh	r3, [r7, #8]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	00010002 	.word	0x00010002

08003040 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	4608      	mov	r0, r1
 800304a:	4611      	mov	r1, r2
 800304c:	461a      	mov	r2, r3
 800304e:	4603      	mov	r3, r0
 8003050:	817b      	strh	r3, [r7, #10]
 8003052:	460b      	mov	r3, r1
 8003054:	813b      	strh	r3, [r7, #8]
 8003056:	4613      	mov	r3, r2
 8003058:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003068:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003078:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	2200      	movs	r2, #0
 8003082:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f8c2 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a0:	d103      	bne.n	80030aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e0aa      	b.n	8003204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ae:	897b      	ldrh	r3, [r7, #10]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	6a3a      	ldr	r2, [r7, #32]
 80030c2:	4952      	ldr	r1, [pc, #328]	; (800320c <I2C_RequestMemoryRead+0x1cc>)
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f8fa 	bl	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e097      	b.n	8003204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ec:	6a39      	ldr	r1, [r7, #32]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f964 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00d      	beq.n	8003116 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d107      	bne.n	8003112 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003110:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e076      	b.n	8003204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d105      	bne.n	8003128 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800311c:	893b      	ldrh	r3, [r7, #8]
 800311e:	b2da      	uxtb	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	611a      	str	r2, [r3, #16]
 8003126:	e021      	b.n	800316c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003128:	893b      	ldrh	r3, [r7, #8]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	b29b      	uxth	r3, r3
 800312e:	b2da      	uxtb	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003138:	6a39      	ldr	r1, [r7, #32]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f93e 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00d      	beq.n	8003162 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2b04      	cmp	r3, #4
 800314c:	d107      	bne.n	800315e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e050      	b.n	8003204 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003162:	893b      	ldrh	r3, [r7, #8]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800316c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316e:	6a39      	ldr	r1, [r7, #32]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f923 	bl	80033bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00d      	beq.n	8003198 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	2b04      	cmp	r3, #4
 8003182:	d107      	bne.n	8003194 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003192:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e035      	b.n	8003204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f82b 	bl	8003210 <I2C_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00d      	beq.n	80031dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ce:	d103      	bne.n	80031d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e013      	b.n	8003204 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031dc:	897b      	ldrh	r3, [r7, #10]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	6a3a      	ldr	r2, [r7, #32]
 80031f0:	4906      	ldr	r1, [pc, #24]	; (800320c <I2C_RequestMemoryRead+0x1cc>)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f863 	bl	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	00010002 	.word	0x00010002

08003210 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003220:	e025      	b.n	800326e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d021      	beq.n	800326e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322a:	f7fe fe9d 	bl	8001f68 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <I2C_WaitOnFlagUntilTimeout+0x30>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d116      	bne.n	800326e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e023      	b.n	80032b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d10d      	bne.n	8003294 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	43da      	mvns	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4013      	ands	r3, r2
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	bf0c      	ite	eq
 800328a:	2301      	moveq	r3, #1
 800328c:	2300      	movne	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	e00c      	b.n	80032ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	43da      	mvns	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4013      	ands	r3, r2
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d0b6      	beq.n	8003222 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032cc:	e051      	b.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032dc:	d123      	bne.n	8003326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f043 0204 	orr.w	r2, r3, #4
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e046      	b.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d021      	beq.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fe fe1b 	bl	8001f68 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d116      	bne.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e020      	b.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d10c      	bne.n	8003396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4013      	ands	r3, r2
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e00b      	b.n	80033ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	43da      	mvns	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4013      	ands	r3, r2
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d18d      	bne.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c8:	e02d      	b.n	8003426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 f8ce 	bl	800356c <I2C_IsAcknowledgeFailed>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e02d      	b.n	8003436 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d021      	beq.n	8003426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7fe fdc1 	bl	8001f68 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d116      	bne.n	8003426 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f043 0220 	orr.w	r2, r3, #32
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e007      	b.n	8003436 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	2b80      	cmp	r3, #128	; 0x80
 8003432:	d1ca      	bne.n	80033ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800344a:	e02d      	b.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f88d 	bl	800356c <I2C_IsAcknowledgeFailed>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e02d      	b.n	80034b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d021      	beq.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003464:	f7fe fd80 	bl	8001f68 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	429a      	cmp	r2, r3
 8003472:	d302      	bcc.n	800347a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d116      	bne.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e007      	b.n	80034b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d1ca      	bne.n	800344c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034cc:	e042      	b.n	8003554 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d119      	bne.n	8003510 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0210 	mvn.w	r2, #16
 80034e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e029      	b.n	8003564 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003510:	f7fe fd2a 	bl	8001f68 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	d302      	bcc.n	8003526 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d116      	bne.n	8003554 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e007      	b.n	8003564 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b40      	cmp	r3, #64	; 0x40
 8003560:	d1b5      	bne.n	80034ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003582:	d11b      	bne.n	80035bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800358c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f043 0204 	orr.w	r2, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e264      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d075      	beq.n	80036d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ea:	4ba3      	ldr	r3, [pc, #652]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d00c      	beq.n	8003610 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f6:	4ba0      	ldr	r3, [pc, #640]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d112      	bne.n	8003628 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003602:	4b9d      	ldr	r3, [pc, #628]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800360e:	d10b      	bne.n	8003628 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	4b99      	ldr	r3, [pc, #612]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d05b      	beq.n	80036d4 <HAL_RCC_OscConfig+0x108>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d157      	bne.n	80036d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e23f      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003630:	d106      	bne.n	8003640 <HAL_RCC_OscConfig+0x74>
 8003632:	4b91      	ldr	r3, [pc, #580]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a90      	ldr	r2, [pc, #576]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e01d      	b.n	800367c <HAL_RCC_OscConfig+0xb0>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003648:	d10c      	bne.n	8003664 <HAL_RCC_OscConfig+0x98>
 800364a:	4b8b      	ldr	r3, [pc, #556]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a8a      	ldr	r2, [pc, #552]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 8003650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	4b88      	ldr	r3, [pc, #544]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a87      	ldr	r2, [pc, #540]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 800365c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	e00b      	b.n	800367c <HAL_RCC_OscConfig+0xb0>
 8003664:	4b84      	ldr	r3, [pc, #528]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a83      	ldr	r2, [pc, #524]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 800366a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b81      	ldr	r3, [pc, #516]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a80      	ldr	r2, [pc, #512]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 8003676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d013      	beq.n	80036ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fe fc70 	bl	8001f68 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800368c:	f7fe fc6c 	bl	8001f68 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	; 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e204      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	4b76      	ldr	r3, [pc, #472]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0xc0>
 80036aa:	e014      	b.n	80036d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ac:	f7fe fc5c 	bl	8001f68 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b4:	f7fe fc58 	bl	8001f68 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	; 0x64
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e1f0      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	4b6c      	ldr	r3, [pc, #432]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0xe8>
 80036d2:	e000      	b.n	80036d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d063      	beq.n	80037aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036e2:	4b65      	ldr	r3, [pc, #404]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ee:	4b62      	ldr	r3, [pc, #392]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d11c      	bne.n	8003734 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fa:	4b5f      	ldr	r3, [pc, #380]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d116      	bne.n	8003734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003706:	4b5c      	ldr	r3, [pc, #368]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_RCC_OscConfig+0x152>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d001      	beq.n	800371e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e1c4      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371e:	4b56      	ldr	r3, [pc, #344]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4952      	ldr	r1, [pc, #328]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003732:	e03a      	b.n	80037aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d020      	beq.n	800377e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800373c:	4b4f      	ldr	r3, [pc, #316]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 800373e:	2201      	movs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003742:	f7fe fc11 	bl	8001f68 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800374a:	f7fe fc0d 	bl	8001f68 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e1a5      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375c:	4b46      	ldr	r3, [pc, #280]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003768:	4b43      	ldr	r3, [pc, #268]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4940      	ldr	r1, [pc, #256]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 8003778:	4313      	orrs	r3, r2
 800377a:	600b      	str	r3, [r1, #0]
 800377c:	e015      	b.n	80037aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800377e:	4b3f      	ldr	r3, [pc, #252]	; (800387c <HAL_RCC_OscConfig+0x2b0>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fe fbf0 	bl	8001f68 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800378c:	f7fe fbec 	bl	8001f68 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e184      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379e:	4b36      	ldr	r3, [pc, #216]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d030      	beq.n	8003818 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d016      	beq.n	80037ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037be:	4b30      	ldr	r3, [pc, #192]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fe fbd0 	bl	8001f68 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037cc:	f7fe fbcc 	bl	8001f68 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e164      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037de:	4b26      	ldr	r3, [pc, #152]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x200>
 80037ea:	e015      	b.n	8003818 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ec:	4b24      	ldr	r3, [pc, #144]	; (8003880 <HAL_RCC_OscConfig+0x2b4>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f2:	f7fe fbb9 	bl	8001f68 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037fa:	f7fe fbb5 	bl	8001f68 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e14d      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	4b1a      	ldr	r3, [pc, #104]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 800380e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f0      	bne.n	80037fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a0 	beq.w	8003966 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10f      	bne.n	8003856 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	4a0e      	ldr	r2, [pc, #56]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003844:	6413      	str	r3, [r2, #64]	; 0x40
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <HAL_RCC_OscConfig+0x2ac>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003852:	2301      	movs	r3, #1
 8003854:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCC_OscConfig+0x2b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d121      	bne.n	80038a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <HAL_RCC_OscConfig+0x2b8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a07      	ldr	r2, [pc, #28]	; (8003884 <HAL_RCC_OscConfig+0x2b8>)
 8003868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386e:	f7fe fb7b 	bl	8001f68 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003874:	e011      	b.n	800389a <HAL_RCC_OscConfig+0x2ce>
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800
 800387c:	42470000 	.word	0x42470000
 8003880:	42470e80 	.word	0x42470e80
 8003884:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003888:	f7fe fb6e 	bl	8001f68 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e106      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389a:	4b85      	ldr	r3, [pc, #532]	; (8003ab0 <HAL_RCC_OscConfig+0x4e4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d106      	bne.n	80038bc <HAL_RCC_OscConfig+0x2f0>
 80038ae:	4b81      	ldr	r3, [pc, #516]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	4a80      	ldr	r2, [pc, #512]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	6713      	str	r3, [r2, #112]	; 0x70
 80038ba:	e01c      	b.n	80038f6 <HAL_RCC_OscConfig+0x32a>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b05      	cmp	r3, #5
 80038c2:	d10c      	bne.n	80038de <HAL_RCC_OscConfig+0x312>
 80038c4:	4b7b      	ldr	r3, [pc, #492]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	4a7a      	ldr	r2, [pc, #488]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 80038ca:	f043 0304 	orr.w	r3, r3, #4
 80038ce:	6713      	str	r3, [r2, #112]	; 0x70
 80038d0:	4b78      	ldr	r3, [pc, #480]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	4a77      	ldr	r2, [pc, #476]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6713      	str	r3, [r2, #112]	; 0x70
 80038dc:	e00b      	b.n	80038f6 <HAL_RCC_OscConfig+0x32a>
 80038de:	4b75      	ldr	r3, [pc, #468]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 80038e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e2:	4a74      	ldr	r2, [pc, #464]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	6713      	str	r3, [r2, #112]	; 0x70
 80038ea:	4b72      	ldr	r3, [pc, #456]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	4a71      	ldr	r2, [pc, #452]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 80038f0:	f023 0304 	bic.w	r3, r3, #4
 80038f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d015      	beq.n	800392a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fe:	f7fe fb33 	bl	8001f68 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	e00a      	b.n	800391c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003906:	f7fe fb2f 	bl	8001f68 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	f241 3288 	movw	r2, #5000	; 0x1388
 8003914:	4293      	cmp	r3, r2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e0c5      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391c:	4b65      	ldr	r3, [pc, #404]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ee      	beq.n	8003906 <HAL_RCC_OscConfig+0x33a>
 8003928:	e014      	b.n	8003954 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392a:	f7fe fb1d 	bl	8001f68 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fe fb19 	bl	8001f68 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e0af      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003948:	4b5a      	ldr	r3, [pc, #360]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 800394a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1ee      	bne.n	8003932 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003954:	7dfb      	ldrb	r3, [r7, #23]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d105      	bne.n	8003966 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395a:	4b56      	ldr	r3, [pc, #344]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	4a55      	ldr	r2, [pc, #340]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 8003960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003964:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 809b 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003970:	4b50      	ldr	r3, [pc, #320]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d05c      	beq.n	8003a36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d141      	bne.n	8003a08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003984:	4b4c      	ldr	r3, [pc, #304]	; (8003ab8 <HAL_RCC_OscConfig+0x4ec>)
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7fe faed 	bl	8001f68 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003992:	f7fe fae9 	bl	8001f68 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e081      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a4:	4b43      	ldr	r3, [pc, #268]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f0      	bne.n	8003992 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69da      	ldr	r2, [r3, #28]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	019b      	lsls	r3, r3, #6
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	3b01      	subs	r3, #1
 80039ca:	041b      	lsls	r3, r3, #16
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	061b      	lsls	r3, r3, #24
 80039d4:	4937      	ldr	r1, [pc, #220]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039da:	4b37      	ldr	r3, [pc, #220]	; (8003ab8 <HAL_RCC_OscConfig+0x4ec>)
 80039dc:	2201      	movs	r2, #1
 80039de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fe fac2 	bl	8001f68 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e8:	f7fe fabe 	bl	8001f68 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e056      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fa:	4b2e      	ldr	r3, [pc, #184]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x41c>
 8003a06:	e04e      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a08:	4b2b      	ldr	r3, [pc, #172]	; (8003ab8 <HAL_RCC_OscConfig+0x4ec>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0e:	f7fe faab 	bl	8001f68 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a16:	f7fe faa7 	bl	8001f68 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e03f      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a28:	4b22      	ldr	r3, [pc, #136]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f0      	bne.n	8003a16 <HAL_RCC_OscConfig+0x44a>
 8003a34:	e037      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e032      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a42:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <HAL_RCC_OscConfig+0x4e8>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d028      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d121      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d11a      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a72:	4013      	ands	r3, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d111      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40007000 	.word	0x40007000
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	42470060 	.word	0x42470060

08003abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0cc      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b68      	ldr	r3, [pc, #416]	; (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d90c      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b65      	ldr	r3, [pc, #404]	; (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b63      	ldr	r3, [pc, #396]	; (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0b8      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b10:	4b59      	ldr	r3, [pc, #356]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4a58      	ldr	r2, [pc, #352]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b28:	4b53      	ldr	r3, [pc, #332]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4a52      	ldr	r2, [pc, #328]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b34:	4b50      	ldr	r3, [pc, #320]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	494d      	ldr	r1, [pc, #308]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d044      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b47      	ldr	r3, [pc, #284]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d119      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e07f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d003      	beq.n	8003b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d107      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7a:	4b3f      	ldr	r3, [pc, #252]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e06f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8a:	4b3b      	ldr	r3, [pc, #236]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e067      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9a:	4b37      	ldr	r3, [pc, #220]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f023 0203 	bic.w	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4934      	ldr	r1, [pc, #208]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bac:	f7fe f9dc 	bl	8001f68 <HAL_GetTick>
 8003bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb2:	e00a      	b.n	8003bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb4:	f7fe f9d8 	bl	8001f68 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e04f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bca:	4b2b      	ldr	r3, [pc, #172]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 020c 	and.w	r2, r3, #12
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d1eb      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bdc:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d20c      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bea:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e032      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c10:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4916      	ldr	r1, [pc, #88]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c2e:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	490e      	ldr	r1, [pc, #56]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c42:	f000 f821 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8003c46:	4602      	mov	r2, r0
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	490a      	ldr	r1, [pc, #40]	; (8003c7c <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	5ccb      	ldrb	r3, [r1, r3]
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe f93c 	bl	8001ee0 <HAL_InitTick>

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40023c00 	.word	0x40023c00
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	0800807c 	.word	0x0800807c
 8003c80:	20000090 	.word	0x20000090
 8003c84:	20000094 	.word	0x20000094

08003c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	607b      	str	r3, [r7, #4]
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca0:	4b67      	ldr	r3, [pc, #412]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d00d      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	f200 80bd 	bhi.w	8003e2c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0x34>
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cba:	e0b7      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cbc:	4b61      	ldr	r3, [pc, #388]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cbe:	60bb      	str	r3, [r7, #8]
       break;
 8003cc0:	e0b7      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cc2:	4b61      	ldr	r3, [pc, #388]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003cc4:	60bb      	str	r3, [r7, #8]
      break;
 8003cc6:	e0b4      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc8:	4b5d      	ldr	r3, [pc, #372]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cd2:	4b5b      	ldr	r3, [pc, #364]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d04d      	beq.n	8003d7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cde:	4b58      	ldr	r3, [pc, #352]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	099b      	lsrs	r3, r3, #6
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cee:	f04f 0100 	mov.w	r1, #0
 8003cf2:	ea02 0800 	and.w	r8, r2, r0
 8003cf6:	ea03 0901 	and.w	r9, r3, r1
 8003cfa:	4640      	mov	r0, r8
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	014b      	lsls	r3, r1, #5
 8003d08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d0c:	0142      	lsls	r2, r0, #5
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	ebb0 0008 	subs.w	r0, r0, r8
 8003d16:	eb61 0109 	sbc.w	r1, r1, r9
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	018b      	lsls	r3, r1, #6
 8003d24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d28:	0182      	lsls	r2, r0, #6
 8003d2a:	1a12      	subs	r2, r2, r0
 8003d2c:	eb63 0301 	sbc.w	r3, r3, r1
 8003d30:	f04f 0000 	mov.w	r0, #0
 8003d34:	f04f 0100 	mov.w	r1, #0
 8003d38:	00d9      	lsls	r1, r3, #3
 8003d3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d3e:	00d0      	lsls	r0, r2, #3
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	eb12 0208 	adds.w	r2, r2, r8
 8003d48:	eb43 0309 	adc.w	r3, r3, r9
 8003d4c:	f04f 0000 	mov.w	r0, #0
 8003d50:	f04f 0100 	mov.w	r1, #0
 8003d54:	0259      	lsls	r1, r3, #9
 8003d56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d5a:	0250      	lsls	r0, r2, #9
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	f7fc ff24 	bl	8000bb8 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	e04a      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7a:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	099b      	lsrs	r3, r3, #6
 8003d80:	461a      	mov	r2, r3
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d8a:	f04f 0100 	mov.w	r1, #0
 8003d8e:	ea02 0400 	and.w	r4, r2, r0
 8003d92:	ea03 0501 	and.w	r5, r3, r1
 8003d96:	4620      	mov	r0, r4
 8003d98:	4629      	mov	r1, r5
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	014b      	lsls	r3, r1, #5
 8003da4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003da8:	0142      	lsls	r2, r0, #5
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	1b00      	subs	r0, r0, r4
 8003db0:	eb61 0105 	sbc.w	r1, r1, r5
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	018b      	lsls	r3, r1, #6
 8003dbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dc2:	0182      	lsls	r2, r0, #6
 8003dc4:	1a12      	subs	r2, r2, r0
 8003dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dca:	f04f 0000 	mov.w	r0, #0
 8003dce:	f04f 0100 	mov.w	r1, #0
 8003dd2:	00d9      	lsls	r1, r3, #3
 8003dd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dd8:	00d0      	lsls	r0, r2, #3
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	1912      	adds	r2, r2, r4
 8003de0:	eb45 0303 	adc.w	r3, r5, r3
 8003de4:	f04f 0000 	mov.w	r0, #0
 8003de8:	f04f 0100 	mov.w	r1, #0
 8003dec:	0299      	lsls	r1, r3, #10
 8003dee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003df2:	0290      	lsls	r0, r2, #10
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	f7fc fed8 	bl	8000bb8 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	0c1b      	lsrs	r3, r3, #16
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	60bb      	str	r3, [r7, #8]
      break;
 8003e2a:	e002      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e2e:	60bb      	str	r3, [r7, #8]
      break;
 8003e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e32:	68bb      	ldr	r3, [r7, #8]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	00f42400 	.word	0x00f42400
 8003e48:	007a1200 	.word	0x007a1200

08003e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000090 	.word	0x20000090

08003e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e68:	f7ff fff0 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	0a9b      	lsrs	r3, r3, #10
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	4903      	ldr	r1, [pc, #12]	; (8003e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e7a:	5ccb      	ldrb	r3, [r1, r3]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40023800 	.word	0x40023800
 8003e88:	0800808c 	.word	0x0800808c

08003e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e90:	f7ff ffdc 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003e94:	4602      	mov	r2, r0
 8003e96:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	0b5b      	lsrs	r3, r3, #13
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	4903      	ldr	r1, [pc, #12]	; (8003eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea2:	5ccb      	ldrb	r3, [r1, r3]
 8003ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	0800808c 	.word	0x0800808c

08003eb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e03f      	b.n	8003f46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd fef2 	bl	8001cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2224      	movs	r2, #36	; 0x24
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ef6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 fd7b 	bl	80049f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b08a      	sub	sp, #40	; 0x28
 8003f52:	af02      	add	r7, sp, #8
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d17c      	bne.n	8004068 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_UART_Transmit+0x2c>
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e075      	b.n	800406a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_UART_Transmit+0x3e>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e06e      	b.n	800406a <HAL_UART_Transmit+0x11c>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2221      	movs	r2, #33	; 0x21
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa2:	f7fd ffe1 	bl	8001f68 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	88fa      	ldrh	r2, [r7, #6]
 8003fac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	88fa      	ldrh	r2, [r7, #6]
 8003fb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fbc:	d108      	bne.n	8003fd0 <HAL_UART_Transmit+0x82>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	e003      	b.n	8003fd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fe0:	e02a      	b.n	8004038 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 faf9 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e036      	b.n	800406a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10b      	bne.n	800401a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004010:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	3302      	adds	r3, #2
 8004016:	61bb      	str	r3, [r7, #24]
 8004018:	e007      	b.n	800402a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	3301      	adds	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1cf      	bne.n	8003fe2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	2140      	movs	r1, #64	; 0x40
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 fac9 	bl	80045e4 <UART_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e006      	b.n	800406a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004068:	2302      	movs	r3, #2
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b0ba      	sub	sp, #232	; 0xe8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80040b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040be:	f003 0320 	and.w	r3, r3, #32
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_UART_IRQHandler+0x66>
 80040c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fbd3 	bl	800487e <UART_Receive_IT>
      return;
 80040d8:	e256      	b.n	8004588 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80de 	beq.w	80042a0 <HAL_UART_IRQHandler+0x22c>
 80040e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d106      	bne.n	80040fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80d1 	beq.w	80042a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00b      	beq.n	8004122 <HAL_UART_IRQHandler+0xae>
 800410a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f043 0201 	orr.w	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <HAL_UART_IRQHandler+0xd2>
 800412e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f043 0202 	orr.w	r2, r3, #2
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <HAL_UART_IRQHandler+0xf6>
 8004152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f043 0204 	orr.w	r2, r3, #4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800416a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d011      	beq.n	800419a <HAL_UART_IRQHandler+0x126>
 8004176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d105      	bne.n	800418e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f043 0208 	orr.w	r2, r3, #8
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 81ed 	beq.w	800457e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_UART_IRQHandler+0x14e>
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fb5e 	bl	800487e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041cc:	2b40      	cmp	r3, #64	; 0x40
 80041ce:	bf0c      	ite	eq
 80041d0:	2301      	moveq	r3, #1
 80041d2:	2300      	movne	r3, #0
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d103      	bne.n	80041ee <HAL_UART_IRQHandler+0x17a>
 80041e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d04f      	beq.n	800428e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fa66 	bl	80046c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fe:	2b40      	cmp	r3, #64	; 0x40
 8004200:	d141      	bne.n	8004286 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3314      	adds	r3, #20
 8004208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004218:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800421c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3314      	adds	r3, #20
 800422a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800422e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800423a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1d9      	bne.n	8004202 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	2b00      	cmp	r3, #0
 8004254:	d013      	beq.n	800427e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	4a7d      	ldr	r2, [pc, #500]	; (8004450 <HAL_UART_IRQHandler+0x3dc>)
 800425c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe f831 	bl	80022ca <HAL_DMA_Abort_IT>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004278:	4610      	mov	r0, r2
 800427a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427c:	e00e      	b.n	800429c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f99a 	bl	80045b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	e00a      	b.n	800429c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f996 	bl	80045b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428c:	e006      	b.n	800429c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f992 	bl	80045b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800429a:	e170      	b.n	800457e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429c:	bf00      	nop
    return;
 800429e:	e16e      	b.n	800457e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	f040 814a 	bne.w	800453e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8143 	beq.w	800453e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 813c 	beq.w	800453e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b40      	cmp	r3, #64	; 0x40
 80042e8:	f040 80b4 	bne.w	8004454 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8140 	beq.w	8004582 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800430a:	429a      	cmp	r2, r3
 800430c:	f080 8139 	bcs.w	8004582 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004316:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004322:	f000 8088 	beq.w	8004436 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800433c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004352:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800435e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800436a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1d9      	bne.n	8004326 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3314      	adds	r3, #20
 8004392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004396:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800439a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800439e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e1      	bne.n	8004372 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3314      	adds	r3, #20
 80043b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3314      	adds	r3, #20
 80043ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e3      	bne.n	80043ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004406:	f023 0310 	bic.w	r3, r3, #16
 800440a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	330c      	adds	r3, #12
 8004414:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004418:	65ba      	str	r2, [r7, #88]	; 0x58
 800441a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800441e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e3      	bne.n	80043f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	4618      	mov	r0, r3
 8004432:	f7fd feda 	bl	80021ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800443e:	b29b      	uxth	r3, r3
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	b29b      	uxth	r3, r3
 8004444:	4619      	mov	r1, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f8c0 	bl	80045cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800444c:	e099      	b.n	8004582 <HAL_UART_IRQHandler+0x50e>
 800444e:	bf00      	nop
 8004450:	08004787 	.word	0x08004787
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800445c:	b29b      	uxth	r3, r3
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 808b 	beq.w	8004586 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 8086 	beq.w	8004586 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	330c      	adds	r3, #12
 8004480:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004490:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800449e:	647a      	str	r2, [r7, #68]	; 0x44
 80044a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e3      	bne.n	800447a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3314      	adds	r3, #20
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	623b      	str	r3, [r7, #32]
   return(result);
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3314      	adds	r3, #20
 80044d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044d6:	633a      	str	r2, [r7, #48]	; 0x30
 80044d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e3      	bne.n	80044b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	330c      	adds	r3, #12
 80044fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	60fb      	str	r3, [r7, #12]
   return(result);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0310 	bic.w	r3, r3, #16
 800450e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	330c      	adds	r3, #12
 8004518:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800451c:	61fa      	str	r2, [r7, #28]
 800451e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	69b9      	ldr	r1, [r7, #24]
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	617b      	str	r3, [r7, #20]
   return(result);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e3      	bne.n	80044f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004534:	4619      	mov	r1, r3
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f848 	bl	80045cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800453c:	e023      	b.n	8004586 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800453e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <HAL_UART_IRQHandler+0x4ea>
 800454a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800454e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f929 	bl	80047ae <UART_Transmit_IT>
    return;
 800455c:	e014      	b.n	8004588 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800455e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00e      	beq.n	8004588 <HAL_UART_IRQHandler+0x514>
 800456a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d008      	beq.n	8004588 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f969 	bl	800484e <UART_EndTransmit_IT>
    return;
 800457c:	e004      	b.n	8004588 <HAL_UART_IRQHandler+0x514>
    return;
 800457e:	bf00      	nop
 8004580:	e002      	b.n	8004588 <HAL_UART_IRQHandler+0x514>
      return;
 8004582:	bf00      	nop
 8004584:	e000      	b.n	8004588 <HAL_UART_IRQHandler+0x514>
      return;
 8004586:	bf00      	nop
  }
}
 8004588:	37e8      	adds	r7, #232	; 0xe8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop

08004590 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b090      	sub	sp, #64	; 0x40
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	4613      	mov	r3, r2
 80045f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f4:	e050      	b.n	8004698 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d04c      	beq.n	8004698 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <UART_WaitOnFlagUntilTimeout+0x30>
 8004604:	f7fd fcb0 	bl	8001f68 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004610:	429a      	cmp	r2, r3
 8004612:	d241      	bcs.n	8004698 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	330c      	adds	r3, #12
 800461a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800462a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	330c      	adds	r3, #12
 8004632:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004634:	637a      	str	r2, [r7, #52]	; 0x34
 8004636:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800463a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800463c:	e841 2300 	strex	r3, r2, [r1]
 8004640:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e5      	bne.n	8004614 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3314      	adds	r3, #20
 800464e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	613b      	str	r3, [r7, #16]
   return(result);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3314      	adds	r3, #20
 8004666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004668:	623a      	str	r2, [r7, #32]
 800466a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	69f9      	ldr	r1, [r7, #28]
 800466e:	6a3a      	ldr	r2, [r7, #32]
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	61bb      	str	r3, [r7, #24]
   return(result);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e5      	bne.n	8004648 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e00f      	b.n	80046b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4013      	ands	r3, r2
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d09f      	beq.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3740      	adds	r7, #64	; 0x40
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b095      	sub	sp, #84	; 0x54
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	330c      	adds	r3, #12
 80046ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	330c      	adds	r3, #12
 80046e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046e8:	643a      	str	r2, [r7, #64]	; 0x40
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e5      	bne.n	80046c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3314      	adds	r3, #20
 8004702:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	e853 3f00 	ldrex	r3, [r3]
 800470a:	61fb      	str	r3, [r7, #28]
   return(result);
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	64bb      	str	r3, [r7, #72]	; 0x48
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3314      	adds	r3, #20
 800471a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800471c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004724:	e841 2300 	strex	r3, r2, [r1]
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e5      	bne.n	80046fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	2b01      	cmp	r3, #1
 8004736:	d119      	bne.n	800476c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	330c      	adds	r3, #12
 800473e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	e853 3f00 	ldrex	r3, [r3]
 8004746:	60bb      	str	r3, [r7, #8]
   return(result);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f023 0310 	bic.w	r3, r3, #16
 800474e:	647b      	str	r3, [r7, #68]	; 0x44
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004758:	61ba      	str	r2, [r7, #24]
 800475a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6979      	ldr	r1, [r7, #20]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	613b      	str	r3, [r7, #16]
   return(result);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e5      	bne.n	8004738 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	; 0x30
}
 800477a:	bf00      	nop
 800477c:	3754      	adds	r7, #84	; 0x54
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f7ff ff09 	bl	80045b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047a6:	bf00      	nop
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b21      	cmp	r3, #33	; 0x21
 80047c0:	d13e      	bne.n	8004840 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ca:	d114      	bne.n	80047f6 <UART_Transmit_IT+0x48>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d110      	bne.n	80047f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	1c9a      	adds	r2, r3, #2
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	621a      	str	r2, [r3, #32]
 80047f4:	e008      	b.n	8004808 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	1c59      	adds	r1, r3, #1
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6211      	str	r1, [r2, #32]
 8004800:	781a      	ldrb	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29b      	uxth	r3, r3
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	4619      	mov	r1, r3
 8004816:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10f      	bne.n	800483c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800482a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800483a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	e000      	b.n	8004842 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004840:	2302      	movs	r3, #2
  }
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004864:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff fe8e 	bl	8004590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b08c      	sub	sp, #48	; 0x30
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b22      	cmp	r3, #34	; 0x22
 8004890:	f040 80ab 	bne.w	80049ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489c:	d117      	bne.n	80048ce <UART_Receive_IT+0x50>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d113      	bne.n	80048ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048bc:	b29a      	uxth	r2, r3
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	1c9a      	adds	r2, r3, #2
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
 80048cc:	e026      	b.n	800491c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048e0:	d007      	beq.n	80048f2 <UART_Receive_IT+0x74>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <UART_Receive_IT+0x82>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	e008      	b.n	8004912 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800490c:	b2da      	uxtb	r2, r3
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29b      	uxth	r3, r3
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	4619      	mov	r1, r3
 800492a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800492c:	2b00      	cmp	r3, #0
 800492e:	d15a      	bne.n	80049e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0220 	bic.w	r2, r2, #32
 800493e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800494e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695a      	ldr	r2, [r3, #20]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496c:	2b01      	cmp	r3, #1
 800496e:	d135      	bne.n	80049dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	330c      	adds	r3, #12
 800497c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	e853 3f00 	ldrex	r3, [r3]
 8004984:	613b      	str	r3, [r7, #16]
   return(result);
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f023 0310 	bic.w	r3, r3, #16
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004996:	623a      	str	r2, [r7, #32]
 8004998:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499a:	69f9      	ldr	r1, [r7, #28]
 800499c:	6a3a      	ldr	r2, [r7, #32]
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e5      	bne.n	8004976 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d10a      	bne.n	80049ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff fdf9 	bl	80045cc <HAL_UARTEx_RxEventCallback>
 80049da:	e002      	b.n	80049e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7ff fde1 	bl	80045a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e002      	b.n	80049ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e000      	b.n	80049ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80049ea:	2302      	movs	r3, #2
  }
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3730      	adds	r7, #48	; 0x30
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f8:	b09f      	sub	sp, #124	; 0x7c
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0a:	68d9      	ldr	r1, [r3, #12]
 8004a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	ea40 0301 	orr.w	r3, r0, r1
 8004a14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	431a      	orrs	r2, r3
 8004a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a38:	f021 010c 	bic.w	r1, r1, #12
 8004a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a42:	430b      	orrs	r3, r1
 8004a44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a52:	6999      	ldr	r1, [r3, #24]
 8004a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	ea40 0301 	orr.w	r3, r0, r1
 8004a5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4bc5      	ldr	r3, [pc, #788]	; (8004d78 <UART_SetConfig+0x384>)
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d004      	beq.n	8004a72 <UART_SetConfig+0x7e>
 8004a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	4bc3      	ldr	r3, [pc, #780]	; (8004d7c <UART_SetConfig+0x388>)
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d103      	bne.n	8004a7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a72:	f7ff fa0b 	bl	8003e8c <HAL_RCC_GetPCLK2Freq>
 8004a76:	6778      	str	r0, [r7, #116]	; 0x74
 8004a78:	e002      	b.n	8004a80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a7a:	f7ff f9f3 	bl	8003e64 <HAL_RCC_GetPCLK1Freq>
 8004a7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a88:	f040 80b6 	bne.w	8004bf8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a8e:	461c      	mov	r4, r3
 8004a90:	f04f 0500 	mov.w	r5, #0
 8004a94:	4622      	mov	r2, r4
 8004a96:	462b      	mov	r3, r5
 8004a98:	1891      	adds	r1, r2, r2
 8004a9a:	6439      	str	r1, [r7, #64]	; 0x40
 8004a9c:	415b      	adcs	r3, r3
 8004a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004aa0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004aa4:	1912      	adds	r2, r2, r4
 8004aa6:	eb45 0303 	adc.w	r3, r5, r3
 8004aaa:	f04f 0000 	mov.w	r0, #0
 8004aae:	f04f 0100 	mov.w	r1, #0
 8004ab2:	00d9      	lsls	r1, r3, #3
 8004ab4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ab8:	00d0      	lsls	r0, r2, #3
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	1911      	adds	r1, r2, r4
 8004ac0:	6639      	str	r1, [r7, #96]	; 0x60
 8004ac2:	416b      	adcs	r3, r5
 8004ac4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	461a      	mov	r2, r3
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	1891      	adds	r1, r2, r2
 8004ad2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ad4:	415b      	adcs	r3, r3
 8004ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004adc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ae0:	f7fc f86a 	bl	8000bb8 <__aeabi_uldivmod>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4ba5      	ldr	r3, [pc, #660]	; (8004d80 <UART_SetConfig+0x38c>)
 8004aea:	fba3 2302 	umull	r2, r3, r3, r2
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	011e      	lsls	r6, r3, #4
 8004af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004af4:	461c      	mov	r4, r3
 8004af6:	f04f 0500 	mov.w	r5, #0
 8004afa:	4622      	mov	r2, r4
 8004afc:	462b      	mov	r3, r5
 8004afe:	1891      	adds	r1, r2, r2
 8004b00:	6339      	str	r1, [r7, #48]	; 0x30
 8004b02:	415b      	adcs	r3, r3
 8004b04:	637b      	str	r3, [r7, #52]	; 0x34
 8004b06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b0a:	1912      	adds	r2, r2, r4
 8004b0c:	eb45 0303 	adc.w	r3, r5, r3
 8004b10:	f04f 0000 	mov.w	r0, #0
 8004b14:	f04f 0100 	mov.w	r1, #0
 8004b18:	00d9      	lsls	r1, r3, #3
 8004b1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b1e:	00d0      	lsls	r0, r2, #3
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	1911      	adds	r1, r2, r4
 8004b26:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b28:	416b      	adcs	r3, r5
 8004b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	461a      	mov	r2, r3
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	1891      	adds	r1, r2, r2
 8004b38:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b3a:	415b      	adcs	r3, r3
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004b46:	f7fc f837 	bl	8000bb8 <__aeabi_uldivmod>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4b8c      	ldr	r3, [pc, #560]	; (8004d80 <UART_SetConfig+0x38c>)
 8004b50:	fba3 1302 	umull	r1, r3, r3, r2
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	2164      	movs	r1, #100	; 0x64
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	3332      	adds	r3, #50	; 0x32
 8004b62:	4a87      	ldr	r2, [pc, #540]	; (8004d80 <UART_SetConfig+0x38c>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	095b      	lsrs	r3, r3, #5
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b70:	441e      	add	r6, r3
 8004b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b74:	4618      	mov	r0, r3
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	1894      	adds	r4, r2, r2
 8004b80:	623c      	str	r4, [r7, #32]
 8004b82:	415b      	adcs	r3, r3
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
 8004b86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b8a:	1812      	adds	r2, r2, r0
 8004b8c:	eb41 0303 	adc.w	r3, r1, r3
 8004b90:	f04f 0400 	mov.w	r4, #0
 8004b94:	f04f 0500 	mov.w	r5, #0
 8004b98:	00dd      	lsls	r5, r3, #3
 8004b9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b9e:	00d4      	lsls	r4, r2, #3
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	462b      	mov	r3, r5
 8004ba4:	1814      	adds	r4, r2, r0
 8004ba6:	653c      	str	r4, [r7, #80]	; 0x50
 8004ba8:	414b      	adcs	r3, r1
 8004baa:	657b      	str	r3, [r7, #84]	; 0x54
 8004bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	1891      	adds	r1, r2, r2
 8004bb8:	61b9      	str	r1, [r7, #24]
 8004bba:	415b      	adcs	r3, r3
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bc2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004bc6:	f7fb fff7 	bl	8000bb8 <__aeabi_uldivmod>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4b6c      	ldr	r3, [pc, #432]	; (8004d80 <UART_SetConfig+0x38c>)
 8004bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	2164      	movs	r1, #100	; 0x64
 8004bd8:	fb01 f303 	mul.w	r3, r1, r3
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	3332      	adds	r3, #50	; 0x32
 8004be2:	4a67      	ldr	r2, [pc, #412]	; (8004d80 <UART_SetConfig+0x38c>)
 8004be4:	fba2 2303 	umull	r2, r3, r2, r3
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	f003 0207 	and.w	r2, r3, #7
 8004bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4432      	add	r2, r6
 8004bf4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bf6:	e0b9      	b.n	8004d6c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bfa:	461c      	mov	r4, r3
 8004bfc:	f04f 0500 	mov.w	r5, #0
 8004c00:	4622      	mov	r2, r4
 8004c02:	462b      	mov	r3, r5
 8004c04:	1891      	adds	r1, r2, r2
 8004c06:	6139      	str	r1, [r7, #16]
 8004c08:	415b      	adcs	r3, r3
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c10:	1912      	adds	r2, r2, r4
 8004c12:	eb45 0303 	adc.w	r3, r5, r3
 8004c16:	f04f 0000 	mov.w	r0, #0
 8004c1a:	f04f 0100 	mov.w	r1, #0
 8004c1e:	00d9      	lsls	r1, r3, #3
 8004c20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c24:	00d0      	lsls	r0, r2, #3
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	eb12 0804 	adds.w	r8, r2, r4
 8004c2e:	eb43 0905 	adc.w	r9, r3, r5
 8004c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f04f 0100 	mov.w	r1, #0
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	008b      	lsls	r3, r1, #2
 8004c46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c4a:	0082      	lsls	r2, r0, #2
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	4649      	mov	r1, r9
 8004c50:	f7fb ffb2 	bl	8000bb8 <__aeabi_uldivmod>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4b49      	ldr	r3, [pc, #292]	; (8004d80 <UART_SetConfig+0x38c>)
 8004c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	011e      	lsls	r6, r3, #4
 8004c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c64:	4618      	mov	r0, r3
 8004c66:	f04f 0100 	mov.w	r1, #0
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	1894      	adds	r4, r2, r2
 8004c70:	60bc      	str	r4, [r7, #8]
 8004c72:	415b      	adcs	r3, r3
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c7a:	1812      	adds	r2, r2, r0
 8004c7c:	eb41 0303 	adc.w	r3, r1, r3
 8004c80:	f04f 0400 	mov.w	r4, #0
 8004c84:	f04f 0500 	mov.w	r5, #0
 8004c88:	00dd      	lsls	r5, r3, #3
 8004c8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c8e:	00d4      	lsls	r4, r2, #3
 8004c90:	4622      	mov	r2, r4
 8004c92:	462b      	mov	r3, r5
 8004c94:	1814      	adds	r4, r2, r0
 8004c96:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c98:	414b      	adcs	r3, r1
 8004c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f04f 0100 	mov.w	r1, #0
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	008b      	lsls	r3, r1, #2
 8004cb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cb4:	0082      	lsls	r2, r0, #2
 8004cb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004cba:	f7fb ff7d 	bl	8000bb8 <__aeabi_uldivmod>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4b2f      	ldr	r3, [pc, #188]	; (8004d80 <UART_SetConfig+0x38c>)
 8004cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	2164      	movs	r1, #100	; 0x64
 8004ccc:	fb01 f303 	mul.w	r3, r1, r3
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	3332      	adds	r3, #50	; 0x32
 8004cd6:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <UART_SetConfig+0x38c>)
 8004cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ce2:	441e      	add	r6, r3
 8004ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f04f 0100 	mov.w	r1, #0
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	1894      	adds	r4, r2, r2
 8004cf2:	603c      	str	r4, [r7, #0]
 8004cf4:	415b      	adcs	r3, r3
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cfc:	1812      	adds	r2, r2, r0
 8004cfe:	eb41 0303 	adc.w	r3, r1, r3
 8004d02:	f04f 0400 	mov.w	r4, #0
 8004d06:	f04f 0500 	mov.w	r5, #0
 8004d0a:	00dd      	lsls	r5, r3, #3
 8004d0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d10:	00d4      	lsls	r4, r2, #3
 8004d12:	4622      	mov	r2, r4
 8004d14:	462b      	mov	r3, r5
 8004d16:	eb12 0a00 	adds.w	sl, r2, r0
 8004d1a:	eb43 0b01 	adc.w	fp, r3, r1
 8004d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f04f 0100 	mov.w	r1, #0
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	008b      	lsls	r3, r1, #2
 8004d32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d36:	0082      	lsls	r2, r0, #2
 8004d38:	4650      	mov	r0, sl
 8004d3a:	4659      	mov	r1, fp
 8004d3c:	f7fb ff3c 	bl	8000bb8 <__aeabi_uldivmod>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4b0e      	ldr	r3, [pc, #56]	; (8004d80 <UART_SetConfig+0x38c>)
 8004d46:	fba3 1302 	umull	r1, r3, r3, r2
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	2164      	movs	r1, #100	; 0x64
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	3332      	adds	r3, #50	; 0x32
 8004d58:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <UART_SetConfig+0x38c>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	f003 020f 	and.w	r2, r3, #15
 8004d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4432      	add	r2, r6
 8004d6a:	609a      	str	r2, [r3, #8]
}
 8004d6c:	bf00      	nop
 8004d6e:	377c      	adds	r7, #124	; 0x7c
 8004d70:	46bd      	mov	sp, r7
 8004d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d76:	bf00      	nop
 8004d78:	40011000 	.word	0x40011000
 8004d7c:	40011400 	.word	0x40011400
 8004d80:	51eb851f 	.word	0x51eb851f

08004d84 <__errno>:
 8004d84:	4b01      	ldr	r3, [pc, #4]	; (8004d8c <__errno+0x8>)
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	2000009c 	.word	0x2000009c

08004d90 <__libc_init_array>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	4d0d      	ldr	r5, [pc, #52]	; (8004dc8 <__libc_init_array+0x38>)
 8004d94:	4c0d      	ldr	r4, [pc, #52]	; (8004dcc <__libc_init_array+0x3c>)
 8004d96:	1b64      	subs	r4, r4, r5
 8004d98:	10a4      	asrs	r4, r4, #2
 8004d9a:	2600      	movs	r6, #0
 8004d9c:	42a6      	cmp	r6, r4
 8004d9e:	d109      	bne.n	8004db4 <__libc_init_array+0x24>
 8004da0:	4d0b      	ldr	r5, [pc, #44]	; (8004dd0 <__libc_init_array+0x40>)
 8004da2:	4c0c      	ldr	r4, [pc, #48]	; (8004dd4 <__libc_init_array+0x44>)
 8004da4:	f003 f93e 	bl	8008024 <_init>
 8004da8:	1b64      	subs	r4, r4, r5
 8004daa:	10a4      	asrs	r4, r4, #2
 8004dac:	2600      	movs	r6, #0
 8004dae:	42a6      	cmp	r6, r4
 8004db0:	d105      	bne.n	8004dbe <__libc_init_array+0x2e>
 8004db2:	bd70      	pop	{r4, r5, r6, pc}
 8004db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db8:	4798      	blx	r3
 8004dba:	3601      	adds	r6, #1
 8004dbc:	e7ee      	b.n	8004d9c <__libc_init_array+0xc>
 8004dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dc2:	4798      	blx	r3
 8004dc4:	3601      	adds	r6, #1
 8004dc6:	e7f2      	b.n	8004dae <__libc_init_array+0x1e>
 8004dc8:	080084f0 	.word	0x080084f0
 8004dcc:	080084f0 	.word	0x080084f0
 8004dd0:	080084f0 	.word	0x080084f0
 8004dd4:	080084f4 	.word	0x080084f4

08004dd8 <memset>:
 8004dd8:	4402      	add	r2, r0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d100      	bne.n	8004de2 <memset+0xa>
 8004de0:	4770      	bx	lr
 8004de2:	f803 1b01 	strb.w	r1, [r3], #1
 8004de6:	e7f9      	b.n	8004ddc <memset+0x4>

08004de8 <__cvt>:
 8004de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dec:	ec55 4b10 	vmov	r4, r5, d0
 8004df0:	2d00      	cmp	r5, #0
 8004df2:	460e      	mov	r6, r1
 8004df4:	4619      	mov	r1, r3
 8004df6:	462b      	mov	r3, r5
 8004df8:	bfbb      	ittet	lt
 8004dfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004dfe:	461d      	movlt	r5, r3
 8004e00:	2300      	movge	r3, #0
 8004e02:	232d      	movlt	r3, #45	; 0x2d
 8004e04:	700b      	strb	r3, [r1, #0]
 8004e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e0c:	4691      	mov	r9, r2
 8004e0e:	f023 0820 	bic.w	r8, r3, #32
 8004e12:	bfbc      	itt	lt
 8004e14:	4622      	movlt	r2, r4
 8004e16:	4614      	movlt	r4, r2
 8004e18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e1c:	d005      	beq.n	8004e2a <__cvt+0x42>
 8004e1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e22:	d100      	bne.n	8004e26 <__cvt+0x3e>
 8004e24:	3601      	adds	r6, #1
 8004e26:	2102      	movs	r1, #2
 8004e28:	e000      	b.n	8004e2c <__cvt+0x44>
 8004e2a:	2103      	movs	r1, #3
 8004e2c:	ab03      	add	r3, sp, #12
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	ab02      	add	r3, sp, #8
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	ec45 4b10 	vmov	d0, r4, r5
 8004e38:	4653      	mov	r3, sl
 8004e3a:	4632      	mov	r2, r6
 8004e3c:	f000 fe30 	bl	8005aa0 <_dtoa_r>
 8004e40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e44:	4607      	mov	r7, r0
 8004e46:	d102      	bne.n	8004e4e <__cvt+0x66>
 8004e48:	f019 0f01 	tst.w	r9, #1
 8004e4c:	d022      	beq.n	8004e94 <__cvt+0xac>
 8004e4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e52:	eb07 0906 	add.w	r9, r7, r6
 8004e56:	d110      	bne.n	8004e7a <__cvt+0x92>
 8004e58:	783b      	ldrb	r3, [r7, #0]
 8004e5a:	2b30      	cmp	r3, #48	; 0x30
 8004e5c:	d10a      	bne.n	8004e74 <__cvt+0x8c>
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2300      	movs	r3, #0
 8004e62:	4620      	mov	r0, r4
 8004e64:	4629      	mov	r1, r5
 8004e66:	f7fb fe37 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e6a:	b918      	cbnz	r0, 8004e74 <__cvt+0x8c>
 8004e6c:	f1c6 0601 	rsb	r6, r6, #1
 8004e70:	f8ca 6000 	str.w	r6, [sl]
 8004e74:	f8da 3000 	ldr.w	r3, [sl]
 8004e78:	4499      	add	r9, r3
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4620      	mov	r0, r4
 8004e80:	4629      	mov	r1, r5
 8004e82:	f7fb fe29 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e86:	b108      	cbz	r0, 8004e8c <__cvt+0xa4>
 8004e88:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e8c:	2230      	movs	r2, #48	; 0x30
 8004e8e:	9b03      	ldr	r3, [sp, #12]
 8004e90:	454b      	cmp	r3, r9
 8004e92:	d307      	bcc.n	8004ea4 <__cvt+0xbc>
 8004e94:	9b03      	ldr	r3, [sp, #12]
 8004e96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e98:	1bdb      	subs	r3, r3, r7
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	b004      	add	sp, #16
 8004ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea4:	1c59      	adds	r1, r3, #1
 8004ea6:	9103      	str	r1, [sp, #12]
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	e7f0      	b.n	8004e8e <__cvt+0xa6>

08004eac <__exponent>:
 8004eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2900      	cmp	r1, #0
 8004eb2:	bfb8      	it	lt
 8004eb4:	4249      	neglt	r1, r1
 8004eb6:	f803 2b02 	strb.w	r2, [r3], #2
 8004eba:	bfb4      	ite	lt
 8004ebc:	222d      	movlt	r2, #45	; 0x2d
 8004ebe:	222b      	movge	r2, #43	; 0x2b
 8004ec0:	2909      	cmp	r1, #9
 8004ec2:	7042      	strb	r2, [r0, #1]
 8004ec4:	dd2a      	ble.n	8004f1c <__exponent+0x70>
 8004ec6:	f10d 0407 	add.w	r4, sp, #7
 8004eca:	46a4      	mov	ip, r4
 8004ecc:	270a      	movs	r7, #10
 8004ece:	46a6      	mov	lr, r4
 8004ed0:	460a      	mov	r2, r1
 8004ed2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004ed6:	fb07 1516 	mls	r5, r7, r6, r1
 8004eda:	3530      	adds	r5, #48	; 0x30
 8004edc:	2a63      	cmp	r2, #99	; 0x63
 8004ede:	f104 34ff 	add.w	r4, r4, #4294967295
 8004ee2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004ee6:	4631      	mov	r1, r6
 8004ee8:	dcf1      	bgt.n	8004ece <__exponent+0x22>
 8004eea:	3130      	adds	r1, #48	; 0x30
 8004eec:	f1ae 0502 	sub.w	r5, lr, #2
 8004ef0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004ef4:	1c44      	adds	r4, r0, #1
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	4561      	cmp	r1, ip
 8004efa:	d30a      	bcc.n	8004f12 <__exponent+0x66>
 8004efc:	f10d 0209 	add.w	r2, sp, #9
 8004f00:	eba2 020e 	sub.w	r2, r2, lr
 8004f04:	4565      	cmp	r5, ip
 8004f06:	bf88      	it	hi
 8004f08:	2200      	movhi	r2, #0
 8004f0a:	4413      	add	r3, r2
 8004f0c:	1a18      	subs	r0, r3, r0
 8004f0e:	b003      	add	sp, #12
 8004f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f16:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f1a:	e7ed      	b.n	8004ef8 <__exponent+0x4c>
 8004f1c:	2330      	movs	r3, #48	; 0x30
 8004f1e:	3130      	adds	r1, #48	; 0x30
 8004f20:	7083      	strb	r3, [r0, #2]
 8004f22:	70c1      	strb	r1, [r0, #3]
 8004f24:	1d03      	adds	r3, r0, #4
 8004f26:	e7f1      	b.n	8004f0c <__exponent+0x60>

08004f28 <_printf_float>:
 8004f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f2c:	ed2d 8b02 	vpush	{d8}
 8004f30:	b08d      	sub	sp, #52	; 0x34
 8004f32:	460c      	mov	r4, r1
 8004f34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f38:	4616      	mov	r6, r2
 8004f3a:	461f      	mov	r7, r3
 8004f3c:	4605      	mov	r5, r0
 8004f3e:	f001 fd53 	bl	80069e8 <_localeconv_r>
 8004f42:	f8d0 a000 	ldr.w	sl, [r0]
 8004f46:	4650      	mov	r0, sl
 8004f48:	f7fb f94a 	bl	80001e0 <strlen>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	9305      	str	r3, [sp, #20]
 8004f54:	f8d8 3000 	ldr.w	r3, [r8]
 8004f58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f5c:	3307      	adds	r3, #7
 8004f5e:	f023 0307 	bic.w	r3, r3, #7
 8004f62:	f103 0208 	add.w	r2, r3, #8
 8004f66:	f8c8 2000 	str.w	r2, [r8]
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f72:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004f76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f7a:	9307      	str	r3, [sp, #28]
 8004f7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f80:	ee08 0a10 	vmov	s16, r0
 8004f84:	4b9f      	ldr	r3, [pc, #636]	; (8005204 <_printf_float+0x2dc>)
 8004f86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8e:	f7fb fdd5 	bl	8000b3c <__aeabi_dcmpun>
 8004f92:	bb88      	cbnz	r0, 8004ff8 <_printf_float+0xd0>
 8004f94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f98:	4b9a      	ldr	r3, [pc, #616]	; (8005204 <_printf_float+0x2dc>)
 8004f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9e:	f7fb fdaf 	bl	8000b00 <__aeabi_dcmple>
 8004fa2:	bb48      	cbnz	r0, 8004ff8 <_printf_float+0xd0>
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	4640      	mov	r0, r8
 8004faa:	4649      	mov	r1, r9
 8004fac:	f7fb fd9e 	bl	8000aec <__aeabi_dcmplt>
 8004fb0:	b110      	cbz	r0, 8004fb8 <_printf_float+0x90>
 8004fb2:	232d      	movs	r3, #45	; 0x2d
 8004fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb8:	4b93      	ldr	r3, [pc, #588]	; (8005208 <_printf_float+0x2e0>)
 8004fba:	4894      	ldr	r0, [pc, #592]	; (800520c <_printf_float+0x2e4>)
 8004fbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004fc0:	bf94      	ite	ls
 8004fc2:	4698      	movls	r8, r3
 8004fc4:	4680      	movhi	r8, r0
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	6123      	str	r3, [r4, #16]
 8004fca:	9b05      	ldr	r3, [sp, #20]
 8004fcc:	f023 0204 	bic.w	r2, r3, #4
 8004fd0:	6022      	str	r2, [r4, #0]
 8004fd2:	f04f 0900 	mov.w	r9, #0
 8004fd6:	9700      	str	r7, [sp, #0]
 8004fd8:	4633      	mov	r3, r6
 8004fda:	aa0b      	add	r2, sp, #44	; 0x2c
 8004fdc:	4621      	mov	r1, r4
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 f9d8 	bl	8005394 <_printf_common>
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	f040 8090 	bne.w	800510a <_printf_float+0x1e2>
 8004fea:	f04f 30ff 	mov.w	r0, #4294967295
 8004fee:	b00d      	add	sp, #52	; 0x34
 8004ff0:	ecbd 8b02 	vpop	{d8}
 8004ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	464b      	mov	r3, r9
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	4649      	mov	r1, r9
 8005000:	f7fb fd9c 	bl	8000b3c <__aeabi_dcmpun>
 8005004:	b140      	cbz	r0, 8005018 <_printf_float+0xf0>
 8005006:	464b      	mov	r3, r9
 8005008:	2b00      	cmp	r3, #0
 800500a:	bfbc      	itt	lt
 800500c:	232d      	movlt	r3, #45	; 0x2d
 800500e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005012:	487f      	ldr	r0, [pc, #508]	; (8005210 <_printf_float+0x2e8>)
 8005014:	4b7f      	ldr	r3, [pc, #508]	; (8005214 <_printf_float+0x2ec>)
 8005016:	e7d1      	b.n	8004fbc <_printf_float+0x94>
 8005018:	6863      	ldr	r3, [r4, #4]
 800501a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800501e:	9206      	str	r2, [sp, #24]
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	d13f      	bne.n	80050a4 <_printf_float+0x17c>
 8005024:	2306      	movs	r3, #6
 8005026:	6063      	str	r3, [r4, #4]
 8005028:	9b05      	ldr	r3, [sp, #20]
 800502a:	6861      	ldr	r1, [r4, #4]
 800502c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005030:	2300      	movs	r3, #0
 8005032:	9303      	str	r3, [sp, #12]
 8005034:	ab0a      	add	r3, sp, #40	; 0x28
 8005036:	e9cd b301 	strd	fp, r3, [sp, #4]
 800503a:	ab09      	add	r3, sp, #36	; 0x24
 800503c:	ec49 8b10 	vmov	d0, r8, r9
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	6022      	str	r2, [r4, #0]
 8005044:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005048:	4628      	mov	r0, r5
 800504a:	f7ff fecd 	bl	8004de8 <__cvt>
 800504e:	9b06      	ldr	r3, [sp, #24]
 8005050:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005052:	2b47      	cmp	r3, #71	; 0x47
 8005054:	4680      	mov	r8, r0
 8005056:	d108      	bne.n	800506a <_printf_float+0x142>
 8005058:	1cc8      	adds	r0, r1, #3
 800505a:	db02      	blt.n	8005062 <_printf_float+0x13a>
 800505c:	6863      	ldr	r3, [r4, #4]
 800505e:	4299      	cmp	r1, r3
 8005060:	dd41      	ble.n	80050e6 <_printf_float+0x1be>
 8005062:	f1ab 0b02 	sub.w	fp, fp, #2
 8005066:	fa5f fb8b 	uxtb.w	fp, fp
 800506a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800506e:	d820      	bhi.n	80050b2 <_printf_float+0x18a>
 8005070:	3901      	subs	r1, #1
 8005072:	465a      	mov	r2, fp
 8005074:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005078:	9109      	str	r1, [sp, #36]	; 0x24
 800507a:	f7ff ff17 	bl	8004eac <__exponent>
 800507e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005080:	1813      	adds	r3, r2, r0
 8005082:	2a01      	cmp	r2, #1
 8005084:	4681      	mov	r9, r0
 8005086:	6123      	str	r3, [r4, #16]
 8005088:	dc02      	bgt.n	8005090 <_printf_float+0x168>
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	07d2      	lsls	r2, r2, #31
 800508e:	d501      	bpl.n	8005094 <_printf_float+0x16c>
 8005090:	3301      	adds	r3, #1
 8005092:	6123      	str	r3, [r4, #16]
 8005094:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005098:	2b00      	cmp	r3, #0
 800509a:	d09c      	beq.n	8004fd6 <_printf_float+0xae>
 800509c:	232d      	movs	r3, #45	; 0x2d
 800509e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050a2:	e798      	b.n	8004fd6 <_printf_float+0xae>
 80050a4:	9a06      	ldr	r2, [sp, #24]
 80050a6:	2a47      	cmp	r2, #71	; 0x47
 80050a8:	d1be      	bne.n	8005028 <_printf_float+0x100>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1bc      	bne.n	8005028 <_printf_float+0x100>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e7b9      	b.n	8005026 <_printf_float+0xfe>
 80050b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80050b6:	d118      	bne.n	80050ea <_printf_float+0x1c2>
 80050b8:	2900      	cmp	r1, #0
 80050ba:	6863      	ldr	r3, [r4, #4]
 80050bc:	dd0b      	ble.n	80050d6 <_printf_float+0x1ae>
 80050be:	6121      	str	r1, [r4, #16]
 80050c0:	b913      	cbnz	r3, 80050c8 <_printf_float+0x1a0>
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	07d0      	lsls	r0, r2, #31
 80050c6:	d502      	bpl.n	80050ce <_printf_float+0x1a6>
 80050c8:	3301      	adds	r3, #1
 80050ca:	440b      	add	r3, r1
 80050cc:	6123      	str	r3, [r4, #16]
 80050ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80050d0:	f04f 0900 	mov.w	r9, #0
 80050d4:	e7de      	b.n	8005094 <_printf_float+0x16c>
 80050d6:	b913      	cbnz	r3, 80050de <_printf_float+0x1b6>
 80050d8:	6822      	ldr	r2, [r4, #0]
 80050da:	07d2      	lsls	r2, r2, #31
 80050dc:	d501      	bpl.n	80050e2 <_printf_float+0x1ba>
 80050de:	3302      	adds	r3, #2
 80050e0:	e7f4      	b.n	80050cc <_printf_float+0x1a4>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e7f2      	b.n	80050cc <_printf_float+0x1a4>
 80050e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80050ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ec:	4299      	cmp	r1, r3
 80050ee:	db05      	blt.n	80050fc <_printf_float+0x1d4>
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	6121      	str	r1, [r4, #16]
 80050f4:	07d8      	lsls	r0, r3, #31
 80050f6:	d5ea      	bpl.n	80050ce <_printf_float+0x1a6>
 80050f8:	1c4b      	adds	r3, r1, #1
 80050fa:	e7e7      	b.n	80050cc <_printf_float+0x1a4>
 80050fc:	2900      	cmp	r1, #0
 80050fe:	bfd4      	ite	le
 8005100:	f1c1 0202 	rsble	r2, r1, #2
 8005104:	2201      	movgt	r2, #1
 8005106:	4413      	add	r3, r2
 8005108:	e7e0      	b.n	80050cc <_printf_float+0x1a4>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	055a      	lsls	r2, r3, #21
 800510e:	d407      	bmi.n	8005120 <_printf_float+0x1f8>
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	4642      	mov	r2, r8
 8005114:	4631      	mov	r1, r6
 8005116:	4628      	mov	r0, r5
 8005118:	47b8      	blx	r7
 800511a:	3001      	adds	r0, #1
 800511c:	d12c      	bne.n	8005178 <_printf_float+0x250>
 800511e:	e764      	b.n	8004fea <_printf_float+0xc2>
 8005120:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005124:	f240 80e0 	bls.w	80052e8 <_printf_float+0x3c0>
 8005128:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800512c:	2200      	movs	r2, #0
 800512e:	2300      	movs	r3, #0
 8005130:	f7fb fcd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005134:	2800      	cmp	r0, #0
 8005136:	d034      	beq.n	80051a2 <_printf_float+0x27a>
 8005138:	4a37      	ldr	r2, [pc, #220]	; (8005218 <_printf_float+0x2f0>)
 800513a:	2301      	movs	r3, #1
 800513c:	4631      	mov	r1, r6
 800513e:	4628      	mov	r0, r5
 8005140:	47b8      	blx	r7
 8005142:	3001      	adds	r0, #1
 8005144:	f43f af51 	beq.w	8004fea <_printf_float+0xc2>
 8005148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800514c:	429a      	cmp	r2, r3
 800514e:	db02      	blt.n	8005156 <_printf_float+0x22e>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	07d8      	lsls	r0, r3, #31
 8005154:	d510      	bpl.n	8005178 <_printf_float+0x250>
 8005156:	ee18 3a10 	vmov	r3, s16
 800515a:	4652      	mov	r2, sl
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	f43f af41 	beq.w	8004fea <_printf_float+0xc2>
 8005168:	f04f 0800 	mov.w	r8, #0
 800516c:	f104 091a 	add.w	r9, r4, #26
 8005170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005172:	3b01      	subs	r3, #1
 8005174:	4543      	cmp	r3, r8
 8005176:	dc09      	bgt.n	800518c <_printf_float+0x264>
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	079b      	lsls	r3, r3, #30
 800517c:	f100 8105 	bmi.w	800538a <_printf_float+0x462>
 8005180:	68e0      	ldr	r0, [r4, #12]
 8005182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005184:	4298      	cmp	r0, r3
 8005186:	bfb8      	it	lt
 8005188:	4618      	movlt	r0, r3
 800518a:	e730      	b.n	8004fee <_printf_float+0xc6>
 800518c:	2301      	movs	r3, #1
 800518e:	464a      	mov	r2, r9
 8005190:	4631      	mov	r1, r6
 8005192:	4628      	mov	r0, r5
 8005194:	47b8      	blx	r7
 8005196:	3001      	adds	r0, #1
 8005198:	f43f af27 	beq.w	8004fea <_printf_float+0xc2>
 800519c:	f108 0801 	add.w	r8, r8, #1
 80051a0:	e7e6      	b.n	8005170 <_printf_float+0x248>
 80051a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dc39      	bgt.n	800521c <_printf_float+0x2f4>
 80051a8:	4a1b      	ldr	r2, [pc, #108]	; (8005218 <_printf_float+0x2f0>)
 80051aa:	2301      	movs	r3, #1
 80051ac:	4631      	mov	r1, r6
 80051ae:	4628      	mov	r0, r5
 80051b0:	47b8      	blx	r7
 80051b2:	3001      	adds	r0, #1
 80051b4:	f43f af19 	beq.w	8004fea <_printf_float+0xc2>
 80051b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051bc:	4313      	orrs	r3, r2
 80051be:	d102      	bne.n	80051c6 <_printf_float+0x29e>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	07d9      	lsls	r1, r3, #31
 80051c4:	d5d8      	bpl.n	8005178 <_printf_float+0x250>
 80051c6:	ee18 3a10 	vmov	r3, s16
 80051ca:	4652      	mov	r2, sl
 80051cc:	4631      	mov	r1, r6
 80051ce:	4628      	mov	r0, r5
 80051d0:	47b8      	blx	r7
 80051d2:	3001      	adds	r0, #1
 80051d4:	f43f af09 	beq.w	8004fea <_printf_float+0xc2>
 80051d8:	f04f 0900 	mov.w	r9, #0
 80051dc:	f104 0a1a 	add.w	sl, r4, #26
 80051e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e2:	425b      	negs	r3, r3
 80051e4:	454b      	cmp	r3, r9
 80051e6:	dc01      	bgt.n	80051ec <_printf_float+0x2c4>
 80051e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ea:	e792      	b.n	8005112 <_printf_float+0x1ea>
 80051ec:	2301      	movs	r3, #1
 80051ee:	4652      	mov	r2, sl
 80051f0:	4631      	mov	r1, r6
 80051f2:	4628      	mov	r0, r5
 80051f4:	47b8      	blx	r7
 80051f6:	3001      	adds	r0, #1
 80051f8:	f43f aef7 	beq.w	8004fea <_printf_float+0xc2>
 80051fc:	f109 0901 	add.w	r9, r9, #1
 8005200:	e7ee      	b.n	80051e0 <_printf_float+0x2b8>
 8005202:	bf00      	nop
 8005204:	7fefffff 	.word	0x7fefffff
 8005208:	08008098 	.word	0x08008098
 800520c:	0800809c 	.word	0x0800809c
 8005210:	080080a4 	.word	0x080080a4
 8005214:	080080a0 	.word	0x080080a0
 8005218:	080080a8 	.word	0x080080a8
 800521c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800521e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005220:	429a      	cmp	r2, r3
 8005222:	bfa8      	it	ge
 8005224:	461a      	movge	r2, r3
 8005226:	2a00      	cmp	r2, #0
 8005228:	4691      	mov	r9, r2
 800522a:	dc37      	bgt.n	800529c <_printf_float+0x374>
 800522c:	f04f 0b00 	mov.w	fp, #0
 8005230:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005234:	f104 021a 	add.w	r2, r4, #26
 8005238:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800523a:	9305      	str	r3, [sp, #20]
 800523c:	eba3 0309 	sub.w	r3, r3, r9
 8005240:	455b      	cmp	r3, fp
 8005242:	dc33      	bgt.n	80052ac <_printf_float+0x384>
 8005244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005248:	429a      	cmp	r2, r3
 800524a:	db3b      	blt.n	80052c4 <_printf_float+0x39c>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	07da      	lsls	r2, r3, #31
 8005250:	d438      	bmi.n	80052c4 <_printf_float+0x39c>
 8005252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005254:	9b05      	ldr	r3, [sp, #20]
 8005256:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	eba2 0901 	sub.w	r9, r2, r1
 800525e:	4599      	cmp	r9, r3
 8005260:	bfa8      	it	ge
 8005262:	4699      	movge	r9, r3
 8005264:	f1b9 0f00 	cmp.w	r9, #0
 8005268:	dc35      	bgt.n	80052d6 <_printf_float+0x3ae>
 800526a:	f04f 0800 	mov.w	r8, #0
 800526e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005272:	f104 0a1a 	add.w	sl, r4, #26
 8005276:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	eba3 0309 	sub.w	r3, r3, r9
 8005280:	4543      	cmp	r3, r8
 8005282:	f77f af79 	ble.w	8005178 <_printf_float+0x250>
 8005286:	2301      	movs	r3, #1
 8005288:	4652      	mov	r2, sl
 800528a:	4631      	mov	r1, r6
 800528c:	4628      	mov	r0, r5
 800528e:	47b8      	blx	r7
 8005290:	3001      	adds	r0, #1
 8005292:	f43f aeaa 	beq.w	8004fea <_printf_float+0xc2>
 8005296:	f108 0801 	add.w	r8, r8, #1
 800529a:	e7ec      	b.n	8005276 <_printf_float+0x34e>
 800529c:	4613      	mov	r3, r2
 800529e:	4631      	mov	r1, r6
 80052a0:	4642      	mov	r2, r8
 80052a2:	4628      	mov	r0, r5
 80052a4:	47b8      	blx	r7
 80052a6:	3001      	adds	r0, #1
 80052a8:	d1c0      	bne.n	800522c <_printf_float+0x304>
 80052aa:	e69e      	b.n	8004fea <_printf_float+0xc2>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4631      	mov	r1, r6
 80052b0:	4628      	mov	r0, r5
 80052b2:	9205      	str	r2, [sp, #20]
 80052b4:	47b8      	blx	r7
 80052b6:	3001      	adds	r0, #1
 80052b8:	f43f ae97 	beq.w	8004fea <_printf_float+0xc2>
 80052bc:	9a05      	ldr	r2, [sp, #20]
 80052be:	f10b 0b01 	add.w	fp, fp, #1
 80052c2:	e7b9      	b.n	8005238 <_printf_float+0x310>
 80052c4:	ee18 3a10 	vmov	r3, s16
 80052c8:	4652      	mov	r2, sl
 80052ca:	4631      	mov	r1, r6
 80052cc:	4628      	mov	r0, r5
 80052ce:	47b8      	blx	r7
 80052d0:	3001      	adds	r0, #1
 80052d2:	d1be      	bne.n	8005252 <_printf_float+0x32a>
 80052d4:	e689      	b.n	8004fea <_printf_float+0xc2>
 80052d6:	9a05      	ldr	r2, [sp, #20]
 80052d8:	464b      	mov	r3, r9
 80052da:	4442      	add	r2, r8
 80052dc:	4631      	mov	r1, r6
 80052de:	4628      	mov	r0, r5
 80052e0:	47b8      	blx	r7
 80052e2:	3001      	adds	r0, #1
 80052e4:	d1c1      	bne.n	800526a <_printf_float+0x342>
 80052e6:	e680      	b.n	8004fea <_printf_float+0xc2>
 80052e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052ea:	2a01      	cmp	r2, #1
 80052ec:	dc01      	bgt.n	80052f2 <_printf_float+0x3ca>
 80052ee:	07db      	lsls	r3, r3, #31
 80052f0:	d538      	bpl.n	8005364 <_printf_float+0x43c>
 80052f2:	2301      	movs	r3, #1
 80052f4:	4642      	mov	r2, r8
 80052f6:	4631      	mov	r1, r6
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b8      	blx	r7
 80052fc:	3001      	adds	r0, #1
 80052fe:	f43f ae74 	beq.w	8004fea <_printf_float+0xc2>
 8005302:	ee18 3a10 	vmov	r3, s16
 8005306:	4652      	mov	r2, sl
 8005308:	4631      	mov	r1, r6
 800530a:	4628      	mov	r0, r5
 800530c:	47b8      	blx	r7
 800530e:	3001      	adds	r0, #1
 8005310:	f43f ae6b 	beq.w	8004fea <_printf_float+0xc2>
 8005314:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005318:	2200      	movs	r2, #0
 800531a:	2300      	movs	r3, #0
 800531c:	f7fb fbdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005320:	b9d8      	cbnz	r0, 800535a <_printf_float+0x432>
 8005322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005324:	f108 0201 	add.w	r2, r8, #1
 8005328:	3b01      	subs	r3, #1
 800532a:	4631      	mov	r1, r6
 800532c:	4628      	mov	r0, r5
 800532e:	47b8      	blx	r7
 8005330:	3001      	adds	r0, #1
 8005332:	d10e      	bne.n	8005352 <_printf_float+0x42a>
 8005334:	e659      	b.n	8004fea <_printf_float+0xc2>
 8005336:	2301      	movs	r3, #1
 8005338:	4652      	mov	r2, sl
 800533a:	4631      	mov	r1, r6
 800533c:	4628      	mov	r0, r5
 800533e:	47b8      	blx	r7
 8005340:	3001      	adds	r0, #1
 8005342:	f43f ae52 	beq.w	8004fea <_printf_float+0xc2>
 8005346:	f108 0801 	add.w	r8, r8, #1
 800534a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800534c:	3b01      	subs	r3, #1
 800534e:	4543      	cmp	r3, r8
 8005350:	dcf1      	bgt.n	8005336 <_printf_float+0x40e>
 8005352:	464b      	mov	r3, r9
 8005354:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005358:	e6dc      	b.n	8005114 <_printf_float+0x1ec>
 800535a:	f04f 0800 	mov.w	r8, #0
 800535e:	f104 0a1a 	add.w	sl, r4, #26
 8005362:	e7f2      	b.n	800534a <_printf_float+0x422>
 8005364:	2301      	movs	r3, #1
 8005366:	4642      	mov	r2, r8
 8005368:	e7df      	b.n	800532a <_printf_float+0x402>
 800536a:	2301      	movs	r3, #1
 800536c:	464a      	mov	r2, r9
 800536e:	4631      	mov	r1, r6
 8005370:	4628      	mov	r0, r5
 8005372:	47b8      	blx	r7
 8005374:	3001      	adds	r0, #1
 8005376:	f43f ae38 	beq.w	8004fea <_printf_float+0xc2>
 800537a:	f108 0801 	add.w	r8, r8, #1
 800537e:	68e3      	ldr	r3, [r4, #12]
 8005380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005382:	1a5b      	subs	r3, r3, r1
 8005384:	4543      	cmp	r3, r8
 8005386:	dcf0      	bgt.n	800536a <_printf_float+0x442>
 8005388:	e6fa      	b.n	8005180 <_printf_float+0x258>
 800538a:	f04f 0800 	mov.w	r8, #0
 800538e:	f104 0919 	add.w	r9, r4, #25
 8005392:	e7f4      	b.n	800537e <_printf_float+0x456>

08005394 <_printf_common>:
 8005394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	4616      	mov	r6, r2
 800539a:	4699      	mov	r9, r3
 800539c:	688a      	ldr	r2, [r1, #8]
 800539e:	690b      	ldr	r3, [r1, #16]
 80053a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053a4:	4293      	cmp	r3, r2
 80053a6:	bfb8      	it	lt
 80053a8:	4613      	movlt	r3, r2
 80053aa:	6033      	str	r3, [r6, #0]
 80053ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053b0:	4607      	mov	r7, r0
 80053b2:	460c      	mov	r4, r1
 80053b4:	b10a      	cbz	r2, 80053ba <_printf_common+0x26>
 80053b6:	3301      	adds	r3, #1
 80053b8:	6033      	str	r3, [r6, #0]
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	0699      	lsls	r1, r3, #26
 80053be:	bf42      	ittt	mi
 80053c0:	6833      	ldrmi	r3, [r6, #0]
 80053c2:	3302      	addmi	r3, #2
 80053c4:	6033      	strmi	r3, [r6, #0]
 80053c6:	6825      	ldr	r5, [r4, #0]
 80053c8:	f015 0506 	ands.w	r5, r5, #6
 80053cc:	d106      	bne.n	80053dc <_printf_common+0x48>
 80053ce:	f104 0a19 	add.w	sl, r4, #25
 80053d2:	68e3      	ldr	r3, [r4, #12]
 80053d4:	6832      	ldr	r2, [r6, #0]
 80053d6:	1a9b      	subs	r3, r3, r2
 80053d8:	42ab      	cmp	r3, r5
 80053da:	dc26      	bgt.n	800542a <_printf_common+0x96>
 80053dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053e0:	1e13      	subs	r3, r2, #0
 80053e2:	6822      	ldr	r2, [r4, #0]
 80053e4:	bf18      	it	ne
 80053e6:	2301      	movne	r3, #1
 80053e8:	0692      	lsls	r2, r2, #26
 80053ea:	d42b      	bmi.n	8005444 <_printf_common+0xb0>
 80053ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053f0:	4649      	mov	r1, r9
 80053f2:	4638      	mov	r0, r7
 80053f4:	47c0      	blx	r8
 80053f6:	3001      	adds	r0, #1
 80053f8:	d01e      	beq.n	8005438 <_printf_common+0xa4>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	68e5      	ldr	r5, [r4, #12]
 80053fe:	6832      	ldr	r2, [r6, #0]
 8005400:	f003 0306 	and.w	r3, r3, #6
 8005404:	2b04      	cmp	r3, #4
 8005406:	bf08      	it	eq
 8005408:	1aad      	subeq	r5, r5, r2
 800540a:	68a3      	ldr	r3, [r4, #8]
 800540c:	6922      	ldr	r2, [r4, #16]
 800540e:	bf0c      	ite	eq
 8005410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005414:	2500      	movne	r5, #0
 8005416:	4293      	cmp	r3, r2
 8005418:	bfc4      	itt	gt
 800541a:	1a9b      	subgt	r3, r3, r2
 800541c:	18ed      	addgt	r5, r5, r3
 800541e:	2600      	movs	r6, #0
 8005420:	341a      	adds	r4, #26
 8005422:	42b5      	cmp	r5, r6
 8005424:	d11a      	bne.n	800545c <_printf_common+0xc8>
 8005426:	2000      	movs	r0, #0
 8005428:	e008      	b.n	800543c <_printf_common+0xa8>
 800542a:	2301      	movs	r3, #1
 800542c:	4652      	mov	r2, sl
 800542e:	4649      	mov	r1, r9
 8005430:	4638      	mov	r0, r7
 8005432:	47c0      	blx	r8
 8005434:	3001      	adds	r0, #1
 8005436:	d103      	bne.n	8005440 <_printf_common+0xac>
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005440:	3501      	adds	r5, #1
 8005442:	e7c6      	b.n	80053d2 <_printf_common+0x3e>
 8005444:	18e1      	adds	r1, r4, r3
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	2030      	movs	r0, #48	; 0x30
 800544a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800544e:	4422      	add	r2, r4
 8005450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005458:	3302      	adds	r3, #2
 800545a:	e7c7      	b.n	80053ec <_printf_common+0x58>
 800545c:	2301      	movs	r3, #1
 800545e:	4622      	mov	r2, r4
 8005460:	4649      	mov	r1, r9
 8005462:	4638      	mov	r0, r7
 8005464:	47c0      	blx	r8
 8005466:	3001      	adds	r0, #1
 8005468:	d0e6      	beq.n	8005438 <_printf_common+0xa4>
 800546a:	3601      	adds	r6, #1
 800546c:	e7d9      	b.n	8005422 <_printf_common+0x8e>
	...

08005470 <_printf_i>:
 8005470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	460c      	mov	r4, r1
 8005476:	4691      	mov	r9, r2
 8005478:	7e27      	ldrb	r7, [r4, #24]
 800547a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800547c:	2f78      	cmp	r7, #120	; 0x78
 800547e:	4680      	mov	r8, r0
 8005480:	469a      	mov	sl, r3
 8005482:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005486:	d807      	bhi.n	8005498 <_printf_i+0x28>
 8005488:	2f62      	cmp	r7, #98	; 0x62
 800548a:	d80a      	bhi.n	80054a2 <_printf_i+0x32>
 800548c:	2f00      	cmp	r7, #0
 800548e:	f000 80d8 	beq.w	8005642 <_printf_i+0x1d2>
 8005492:	2f58      	cmp	r7, #88	; 0x58
 8005494:	f000 80a3 	beq.w	80055de <_printf_i+0x16e>
 8005498:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800549c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054a0:	e03a      	b.n	8005518 <_printf_i+0xa8>
 80054a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054a6:	2b15      	cmp	r3, #21
 80054a8:	d8f6      	bhi.n	8005498 <_printf_i+0x28>
 80054aa:	a001      	add	r0, pc, #4	; (adr r0, 80054b0 <_printf_i+0x40>)
 80054ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80054b0:	08005509 	.word	0x08005509
 80054b4:	0800551d 	.word	0x0800551d
 80054b8:	08005499 	.word	0x08005499
 80054bc:	08005499 	.word	0x08005499
 80054c0:	08005499 	.word	0x08005499
 80054c4:	08005499 	.word	0x08005499
 80054c8:	0800551d 	.word	0x0800551d
 80054cc:	08005499 	.word	0x08005499
 80054d0:	08005499 	.word	0x08005499
 80054d4:	08005499 	.word	0x08005499
 80054d8:	08005499 	.word	0x08005499
 80054dc:	08005629 	.word	0x08005629
 80054e0:	0800554d 	.word	0x0800554d
 80054e4:	0800560b 	.word	0x0800560b
 80054e8:	08005499 	.word	0x08005499
 80054ec:	08005499 	.word	0x08005499
 80054f0:	0800564b 	.word	0x0800564b
 80054f4:	08005499 	.word	0x08005499
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	08005499 	.word	0x08005499
 8005500:	08005499 	.word	0x08005499
 8005504:	08005613 	.word	0x08005613
 8005508:	680b      	ldr	r3, [r1, #0]
 800550a:	1d1a      	adds	r2, r3, #4
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	600a      	str	r2, [r1, #0]
 8005510:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005518:	2301      	movs	r3, #1
 800551a:	e0a3      	b.n	8005664 <_printf_i+0x1f4>
 800551c:	6825      	ldr	r5, [r4, #0]
 800551e:	6808      	ldr	r0, [r1, #0]
 8005520:	062e      	lsls	r6, r5, #24
 8005522:	f100 0304 	add.w	r3, r0, #4
 8005526:	d50a      	bpl.n	800553e <_printf_i+0xce>
 8005528:	6805      	ldr	r5, [r0, #0]
 800552a:	600b      	str	r3, [r1, #0]
 800552c:	2d00      	cmp	r5, #0
 800552e:	da03      	bge.n	8005538 <_printf_i+0xc8>
 8005530:	232d      	movs	r3, #45	; 0x2d
 8005532:	426d      	negs	r5, r5
 8005534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005538:	485e      	ldr	r0, [pc, #376]	; (80056b4 <_printf_i+0x244>)
 800553a:	230a      	movs	r3, #10
 800553c:	e019      	b.n	8005572 <_printf_i+0x102>
 800553e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005542:	6805      	ldr	r5, [r0, #0]
 8005544:	600b      	str	r3, [r1, #0]
 8005546:	bf18      	it	ne
 8005548:	b22d      	sxthne	r5, r5
 800554a:	e7ef      	b.n	800552c <_printf_i+0xbc>
 800554c:	680b      	ldr	r3, [r1, #0]
 800554e:	6825      	ldr	r5, [r4, #0]
 8005550:	1d18      	adds	r0, r3, #4
 8005552:	6008      	str	r0, [r1, #0]
 8005554:	0628      	lsls	r0, r5, #24
 8005556:	d501      	bpl.n	800555c <_printf_i+0xec>
 8005558:	681d      	ldr	r5, [r3, #0]
 800555a:	e002      	b.n	8005562 <_printf_i+0xf2>
 800555c:	0669      	lsls	r1, r5, #25
 800555e:	d5fb      	bpl.n	8005558 <_printf_i+0xe8>
 8005560:	881d      	ldrh	r5, [r3, #0]
 8005562:	4854      	ldr	r0, [pc, #336]	; (80056b4 <_printf_i+0x244>)
 8005564:	2f6f      	cmp	r7, #111	; 0x6f
 8005566:	bf0c      	ite	eq
 8005568:	2308      	moveq	r3, #8
 800556a:	230a      	movne	r3, #10
 800556c:	2100      	movs	r1, #0
 800556e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005572:	6866      	ldr	r6, [r4, #4]
 8005574:	60a6      	str	r6, [r4, #8]
 8005576:	2e00      	cmp	r6, #0
 8005578:	bfa2      	ittt	ge
 800557a:	6821      	ldrge	r1, [r4, #0]
 800557c:	f021 0104 	bicge.w	r1, r1, #4
 8005580:	6021      	strge	r1, [r4, #0]
 8005582:	b90d      	cbnz	r5, 8005588 <_printf_i+0x118>
 8005584:	2e00      	cmp	r6, #0
 8005586:	d04d      	beq.n	8005624 <_printf_i+0x1b4>
 8005588:	4616      	mov	r6, r2
 800558a:	fbb5 f1f3 	udiv	r1, r5, r3
 800558e:	fb03 5711 	mls	r7, r3, r1, r5
 8005592:	5dc7      	ldrb	r7, [r0, r7]
 8005594:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005598:	462f      	mov	r7, r5
 800559a:	42bb      	cmp	r3, r7
 800559c:	460d      	mov	r5, r1
 800559e:	d9f4      	bls.n	800558a <_printf_i+0x11a>
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d10b      	bne.n	80055bc <_printf_i+0x14c>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	07df      	lsls	r7, r3, #31
 80055a8:	d508      	bpl.n	80055bc <_printf_i+0x14c>
 80055aa:	6923      	ldr	r3, [r4, #16]
 80055ac:	6861      	ldr	r1, [r4, #4]
 80055ae:	4299      	cmp	r1, r3
 80055b0:	bfde      	ittt	le
 80055b2:	2330      	movle	r3, #48	; 0x30
 80055b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055bc:	1b92      	subs	r2, r2, r6
 80055be:	6122      	str	r2, [r4, #16]
 80055c0:	f8cd a000 	str.w	sl, [sp]
 80055c4:	464b      	mov	r3, r9
 80055c6:	aa03      	add	r2, sp, #12
 80055c8:	4621      	mov	r1, r4
 80055ca:	4640      	mov	r0, r8
 80055cc:	f7ff fee2 	bl	8005394 <_printf_common>
 80055d0:	3001      	adds	r0, #1
 80055d2:	d14c      	bne.n	800566e <_printf_i+0x1fe>
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295
 80055d8:	b004      	add	sp, #16
 80055da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055de:	4835      	ldr	r0, [pc, #212]	; (80056b4 <_printf_i+0x244>)
 80055e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	680e      	ldr	r6, [r1, #0]
 80055e8:	061f      	lsls	r7, r3, #24
 80055ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80055ee:	600e      	str	r6, [r1, #0]
 80055f0:	d514      	bpl.n	800561c <_printf_i+0x1ac>
 80055f2:	07d9      	lsls	r1, r3, #31
 80055f4:	bf44      	itt	mi
 80055f6:	f043 0320 	orrmi.w	r3, r3, #32
 80055fa:	6023      	strmi	r3, [r4, #0]
 80055fc:	b91d      	cbnz	r5, 8005606 <_printf_i+0x196>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	f023 0320 	bic.w	r3, r3, #32
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	2310      	movs	r3, #16
 8005608:	e7b0      	b.n	800556c <_printf_i+0xfc>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	f043 0320 	orr.w	r3, r3, #32
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	2378      	movs	r3, #120	; 0x78
 8005614:	4828      	ldr	r0, [pc, #160]	; (80056b8 <_printf_i+0x248>)
 8005616:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800561a:	e7e3      	b.n	80055e4 <_printf_i+0x174>
 800561c:	065e      	lsls	r6, r3, #25
 800561e:	bf48      	it	mi
 8005620:	b2ad      	uxthmi	r5, r5
 8005622:	e7e6      	b.n	80055f2 <_printf_i+0x182>
 8005624:	4616      	mov	r6, r2
 8005626:	e7bb      	b.n	80055a0 <_printf_i+0x130>
 8005628:	680b      	ldr	r3, [r1, #0]
 800562a:	6826      	ldr	r6, [r4, #0]
 800562c:	6960      	ldr	r0, [r4, #20]
 800562e:	1d1d      	adds	r5, r3, #4
 8005630:	600d      	str	r5, [r1, #0]
 8005632:	0635      	lsls	r5, r6, #24
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	d501      	bpl.n	800563c <_printf_i+0x1cc>
 8005638:	6018      	str	r0, [r3, #0]
 800563a:	e002      	b.n	8005642 <_printf_i+0x1d2>
 800563c:	0671      	lsls	r1, r6, #25
 800563e:	d5fb      	bpl.n	8005638 <_printf_i+0x1c8>
 8005640:	8018      	strh	r0, [r3, #0]
 8005642:	2300      	movs	r3, #0
 8005644:	6123      	str	r3, [r4, #16]
 8005646:	4616      	mov	r6, r2
 8005648:	e7ba      	b.n	80055c0 <_printf_i+0x150>
 800564a:	680b      	ldr	r3, [r1, #0]
 800564c:	1d1a      	adds	r2, r3, #4
 800564e:	600a      	str	r2, [r1, #0]
 8005650:	681e      	ldr	r6, [r3, #0]
 8005652:	6862      	ldr	r2, [r4, #4]
 8005654:	2100      	movs	r1, #0
 8005656:	4630      	mov	r0, r6
 8005658:	f7fa fdca 	bl	80001f0 <memchr>
 800565c:	b108      	cbz	r0, 8005662 <_printf_i+0x1f2>
 800565e:	1b80      	subs	r0, r0, r6
 8005660:	6060      	str	r0, [r4, #4]
 8005662:	6863      	ldr	r3, [r4, #4]
 8005664:	6123      	str	r3, [r4, #16]
 8005666:	2300      	movs	r3, #0
 8005668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800566c:	e7a8      	b.n	80055c0 <_printf_i+0x150>
 800566e:	6923      	ldr	r3, [r4, #16]
 8005670:	4632      	mov	r2, r6
 8005672:	4649      	mov	r1, r9
 8005674:	4640      	mov	r0, r8
 8005676:	47d0      	blx	sl
 8005678:	3001      	adds	r0, #1
 800567a:	d0ab      	beq.n	80055d4 <_printf_i+0x164>
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	079b      	lsls	r3, r3, #30
 8005680:	d413      	bmi.n	80056aa <_printf_i+0x23a>
 8005682:	68e0      	ldr	r0, [r4, #12]
 8005684:	9b03      	ldr	r3, [sp, #12]
 8005686:	4298      	cmp	r0, r3
 8005688:	bfb8      	it	lt
 800568a:	4618      	movlt	r0, r3
 800568c:	e7a4      	b.n	80055d8 <_printf_i+0x168>
 800568e:	2301      	movs	r3, #1
 8005690:	4632      	mov	r2, r6
 8005692:	4649      	mov	r1, r9
 8005694:	4640      	mov	r0, r8
 8005696:	47d0      	blx	sl
 8005698:	3001      	adds	r0, #1
 800569a:	d09b      	beq.n	80055d4 <_printf_i+0x164>
 800569c:	3501      	adds	r5, #1
 800569e:	68e3      	ldr	r3, [r4, #12]
 80056a0:	9903      	ldr	r1, [sp, #12]
 80056a2:	1a5b      	subs	r3, r3, r1
 80056a4:	42ab      	cmp	r3, r5
 80056a6:	dcf2      	bgt.n	800568e <_printf_i+0x21e>
 80056a8:	e7eb      	b.n	8005682 <_printf_i+0x212>
 80056aa:	2500      	movs	r5, #0
 80056ac:	f104 0619 	add.w	r6, r4, #25
 80056b0:	e7f5      	b.n	800569e <_printf_i+0x22e>
 80056b2:	bf00      	nop
 80056b4:	080080aa 	.word	0x080080aa
 80056b8:	080080bb 	.word	0x080080bb

080056bc <iprintf>:
 80056bc:	b40f      	push	{r0, r1, r2, r3}
 80056be:	4b0a      	ldr	r3, [pc, #40]	; (80056e8 <iprintf+0x2c>)
 80056c0:	b513      	push	{r0, r1, r4, lr}
 80056c2:	681c      	ldr	r4, [r3, #0]
 80056c4:	b124      	cbz	r4, 80056d0 <iprintf+0x14>
 80056c6:	69a3      	ldr	r3, [r4, #24]
 80056c8:	b913      	cbnz	r3, 80056d0 <iprintf+0x14>
 80056ca:	4620      	mov	r0, r4
 80056cc:	f001 f8ee 	bl	80068ac <__sinit>
 80056d0:	ab05      	add	r3, sp, #20
 80056d2:	9a04      	ldr	r2, [sp, #16]
 80056d4:	68a1      	ldr	r1, [r4, #8]
 80056d6:	9301      	str	r3, [sp, #4]
 80056d8:	4620      	mov	r0, r4
 80056da:	f001 fe69 	bl	80073b0 <_vfiprintf_r>
 80056de:	b002      	add	sp, #8
 80056e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056e4:	b004      	add	sp, #16
 80056e6:	4770      	bx	lr
 80056e8:	2000009c 	.word	0x2000009c

080056ec <putchar>:
 80056ec:	4b09      	ldr	r3, [pc, #36]	; (8005714 <putchar+0x28>)
 80056ee:	b513      	push	{r0, r1, r4, lr}
 80056f0:	681c      	ldr	r4, [r3, #0]
 80056f2:	4601      	mov	r1, r0
 80056f4:	b134      	cbz	r4, 8005704 <putchar+0x18>
 80056f6:	69a3      	ldr	r3, [r4, #24]
 80056f8:	b923      	cbnz	r3, 8005704 <putchar+0x18>
 80056fa:	9001      	str	r0, [sp, #4]
 80056fc:	4620      	mov	r0, r4
 80056fe:	f001 f8d5 	bl	80068ac <__sinit>
 8005702:	9901      	ldr	r1, [sp, #4]
 8005704:	68a2      	ldr	r2, [r4, #8]
 8005706:	4620      	mov	r0, r4
 8005708:	b002      	add	sp, #8
 800570a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800570e:	f001 bf7f 	b.w	8007610 <_putc_r>
 8005712:	bf00      	nop
 8005714:	2000009c 	.word	0x2000009c

08005718 <_puts_r>:
 8005718:	b570      	push	{r4, r5, r6, lr}
 800571a:	460e      	mov	r6, r1
 800571c:	4605      	mov	r5, r0
 800571e:	b118      	cbz	r0, 8005728 <_puts_r+0x10>
 8005720:	6983      	ldr	r3, [r0, #24]
 8005722:	b90b      	cbnz	r3, 8005728 <_puts_r+0x10>
 8005724:	f001 f8c2 	bl	80068ac <__sinit>
 8005728:	69ab      	ldr	r3, [r5, #24]
 800572a:	68ac      	ldr	r4, [r5, #8]
 800572c:	b913      	cbnz	r3, 8005734 <_puts_r+0x1c>
 800572e:	4628      	mov	r0, r5
 8005730:	f001 f8bc 	bl	80068ac <__sinit>
 8005734:	4b2c      	ldr	r3, [pc, #176]	; (80057e8 <_puts_r+0xd0>)
 8005736:	429c      	cmp	r4, r3
 8005738:	d120      	bne.n	800577c <_puts_r+0x64>
 800573a:	686c      	ldr	r4, [r5, #4]
 800573c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800573e:	07db      	lsls	r3, r3, #31
 8005740:	d405      	bmi.n	800574e <_puts_r+0x36>
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	0598      	lsls	r0, r3, #22
 8005746:	d402      	bmi.n	800574e <_puts_r+0x36>
 8005748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800574a:	f001 f952 	bl	80069f2 <__retarget_lock_acquire_recursive>
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	0719      	lsls	r1, r3, #28
 8005752:	d51d      	bpl.n	8005790 <_puts_r+0x78>
 8005754:	6923      	ldr	r3, [r4, #16]
 8005756:	b1db      	cbz	r3, 8005790 <_puts_r+0x78>
 8005758:	3e01      	subs	r6, #1
 800575a:	68a3      	ldr	r3, [r4, #8]
 800575c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005760:	3b01      	subs	r3, #1
 8005762:	60a3      	str	r3, [r4, #8]
 8005764:	bb39      	cbnz	r1, 80057b6 <_puts_r+0x9e>
 8005766:	2b00      	cmp	r3, #0
 8005768:	da38      	bge.n	80057dc <_puts_r+0xc4>
 800576a:	4622      	mov	r2, r4
 800576c:	210a      	movs	r1, #10
 800576e:	4628      	mov	r0, r5
 8005770:	f000 f848 	bl	8005804 <__swbuf_r>
 8005774:	3001      	adds	r0, #1
 8005776:	d011      	beq.n	800579c <_puts_r+0x84>
 8005778:	250a      	movs	r5, #10
 800577a:	e011      	b.n	80057a0 <_puts_r+0x88>
 800577c:	4b1b      	ldr	r3, [pc, #108]	; (80057ec <_puts_r+0xd4>)
 800577e:	429c      	cmp	r4, r3
 8005780:	d101      	bne.n	8005786 <_puts_r+0x6e>
 8005782:	68ac      	ldr	r4, [r5, #8]
 8005784:	e7da      	b.n	800573c <_puts_r+0x24>
 8005786:	4b1a      	ldr	r3, [pc, #104]	; (80057f0 <_puts_r+0xd8>)
 8005788:	429c      	cmp	r4, r3
 800578a:	bf08      	it	eq
 800578c:	68ec      	ldreq	r4, [r5, #12]
 800578e:	e7d5      	b.n	800573c <_puts_r+0x24>
 8005790:	4621      	mov	r1, r4
 8005792:	4628      	mov	r0, r5
 8005794:	f000 f888 	bl	80058a8 <__swsetup_r>
 8005798:	2800      	cmp	r0, #0
 800579a:	d0dd      	beq.n	8005758 <_puts_r+0x40>
 800579c:	f04f 35ff 	mov.w	r5, #4294967295
 80057a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057a2:	07da      	lsls	r2, r3, #31
 80057a4:	d405      	bmi.n	80057b2 <_puts_r+0x9a>
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	059b      	lsls	r3, r3, #22
 80057aa:	d402      	bmi.n	80057b2 <_puts_r+0x9a>
 80057ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057ae:	f001 f921 	bl	80069f4 <__retarget_lock_release_recursive>
 80057b2:	4628      	mov	r0, r5
 80057b4:	bd70      	pop	{r4, r5, r6, pc}
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	da04      	bge.n	80057c4 <_puts_r+0xac>
 80057ba:	69a2      	ldr	r2, [r4, #24]
 80057bc:	429a      	cmp	r2, r3
 80057be:	dc06      	bgt.n	80057ce <_puts_r+0xb6>
 80057c0:	290a      	cmp	r1, #10
 80057c2:	d004      	beq.n	80057ce <_puts_r+0xb6>
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	6022      	str	r2, [r4, #0]
 80057ca:	7019      	strb	r1, [r3, #0]
 80057cc:	e7c5      	b.n	800575a <_puts_r+0x42>
 80057ce:	4622      	mov	r2, r4
 80057d0:	4628      	mov	r0, r5
 80057d2:	f000 f817 	bl	8005804 <__swbuf_r>
 80057d6:	3001      	adds	r0, #1
 80057d8:	d1bf      	bne.n	800575a <_puts_r+0x42>
 80057da:	e7df      	b.n	800579c <_puts_r+0x84>
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	250a      	movs	r5, #10
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	6022      	str	r2, [r4, #0]
 80057e4:	701d      	strb	r5, [r3, #0]
 80057e6:	e7db      	b.n	80057a0 <_puts_r+0x88>
 80057e8:	08008180 	.word	0x08008180
 80057ec:	080081a0 	.word	0x080081a0
 80057f0:	08008160 	.word	0x08008160

080057f4 <puts>:
 80057f4:	4b02      	ldr	r3, [pc, #8]	; (8005800 <puts+0xc>)
 80057f6:	4601      	mov	r1, r0
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	f7ff bf8d 	b.w	8005718 <_puts_r>
 80057fe:	bf00      	nop
 8005800:	2000009c 	.word	0x2000009c

08005804 <__swbuf_r>:
 8005804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005806:	460e      	mov	r6, r1
 8005808:	4614      	mov	r4, r2
 800580a:	4605      	mov	r5, r0
 800580c:	b118      	cbz	r0, 8005816 <__swbuf_r+0x12>
 800580e:	6983      	ldr	r3, [r0, #24]
 8005810:	b90b      	cbnz	r3, 8005816 <__swbuf_r+0x12>
 8005812:	f001 f84b 	bl	80068ac <__sinit>
 8005816:	4b21      	ldr	r3, [pc, #132]	; (800589c <__swbuf_r+0x98>)
 8005818:	429c      	cmp	r4, r3
 800581a:	d12b      	bne.n	8005874 <__swbuf_r+0x70>
 800581c:	686c      	ldr	r4, [r5, #4]
 800581e:	69a3      	ldr	r3, [r4, #24]
 8005820:	60a3      	str	r3, [r4, #8]
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	071a      	lsls	r2, r3, #28
 8005826:	d52f      	bpl.n	8005888 <__swbuf_r+0x84>
 8005828:	6923      	ldr	r3, [r4, #16]
 800582a:	b36b      	cbz	r3, 8005888 <__swbuf_r+0x84>
 800582c:	6923      	ldr	r3, [r4, #16]
 800582e:	6820      	ldr	r0, [r4, #0]
 8005830:	1ac0      	subs	r0, r0, r3
 8005832:	6963      	ldr	r3, [r4, #20]
 8005834:	b2f6      	uxtb	r6, r6
 8005836:	4283      	cmp	r3, r0
 8005838:	4637      	mov	r7, r6
 800583a:	dc04      	bgt.n	8005846 <__swbuf_r+0x42>
 800583c:	4621      	mov	r1, r4
 800583e:	4628      	mov	r0, r5
 8005840:	f000 ffa0 	bl	8006784 <_fflush_r>
 8005844:	bb30      	cbnz	r0, 8005894 <__swbuf_r+0x90>
 8005846:	68a3      	ldr	r3, [r4, #8]
 8005848:	3b01      	subs	r3, #1
 800584a:	60a3      	str	r3, [r4, #8]
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	6022      	str	r2, [r4, #0]
 8005852:	701e      	strb	r6, [r3, #0]
 8005854:	6963      	ldr	r3, [r4, #20]
 8005856:	3001      	adds	r0, #1
 8005858:	4283      	cmp	r3, r0
 800585a:	d004      	beq.n	8005866 <__swbuf_r+0x62>
 800585c:	89a3      	ldrh	r3, [r4, #12]
 800585e:	07db      	lsls	r3, r3, #31
 8005860:	d506      	bpl.n	8005870 <__swbuf_r+0x6c>
 8005862:	2e0a      	cmp	r6, #10
 8005864:	d104      	bne.n	8005870 <__swbuf_r+0x6c>
 8005866:	4621      	mov	r1, r4
 8005868:	4628      	mov	r0, r5
 800586a:	f000 ff8b 	bl	8006784 <_fflush_r>
 800586e:	b988      	cbnz	r0, 8005894 <__swbuf_r+0x90>
 8005870:	4638      	mov	r0, r7
 8005872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005874:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <__swbuf_r+0x9c>)
 8005876:	429c      	cmp	r4, r3
 8005878:	d101      	bne.n	800587e <__swbuf_r+0x7a>
 800587a:	68ac      	ldr	r4, [r5, #8]
 800587c:	e7cf      	b.n	800581e <__swbuf_r+0x1a>
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <__swbuf_r+0xa0>)
 8005880:	429c      	cmp	r4, r3
 8005882:	bf08      	it	eq
 8005884:	68ec      	ldreq	r4, [r5, #12]
 8005886:	e7ca      	b.n	800581e <__swbuf_r+0x1a>
 8005888:	4621      	mov	r1, r4
 800588a:	4628      	mov	r0, r5
 800588c:	f000 f80c 	bl	80058a8 <__swsetup_r>
 8005890:	2800      	cmp	r0, #0
 8005892:	d0cb      	beq.n	800582c <__swbuf_r+0x28>
 8005894:	f04f 37ff 	mov.w	r7, #4294967295
 8005898:	e7ea      	b.n	8005870 <__swbuf_r+0x6c>
 800589a:	bf00      	nop
 800589c:	08008180 	.word	0x08008180
 80058a0:	080081a0 	.word	0x080081a0
 80058a4:	08008160 	.word	0x08008160

080058a8 <__swsetup_r>:
 80058a8:	4b32      	ldr	r3, [pc, #200]	; (8005974 <__swsetup_r+0xcc>)
 80058aa:	b570      	push	{r4, r5, r6, lr}
 80058ac:	681d      	ldr	r5, [r3, #0]
 80058ae:	4606      	mov	r6, r0
 80058b0:	460c      	mov	r4, r1
 80058b2:	b125      	cbz	r5, 80058be <__swsetup_r+0x16>
 80058b4:	69ab      	ldr	r3, [r5, #24]
 80058b6:	b913      	cbnz	r3, 80058be <__swsetup_r+0x16>
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 fff7 	bl	80068ac <__sinit>
 80058be:	4b2e      	ldr	r3, [pc, #184]	; (8005978 <__swsetup_r+0xd0>)
 80058c0:	429c      	cmp	r4, r3
 80058c2:	d10f      	bne.n	80058e4 <__swsetup_r+0x3c>
 80058c4:	686c      	ldr	r4, [r5, #4]
 80058c6:	89a3      	ldrh	r3, [r4, #12]
 80058c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058cc:	0719      	lsls	r1, r3, #28
 80058ce:	d42c      	bmi.n	800592a <__swsetup_r+0x82>
 80058d0:	06dd      	lsls	r5, r3, #27
 80058d2:	d411      	bmi.n	80058f8 <__swsetup_r+0x50>
 80058d4:	2309      	movs	r3, #9
 80058d6:	6033      	str	r3, [r6, #0]
 80058d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058dc:	81a3      	strh	r3, [r4, #12]
 80058de:	f04f 30ff 	mov.w	r0, #4294967295
 80058e2:	e03e      	b.n	8005962 <__swsetup_r+0xba>
 80058e4:	4b25      	ldr	r3, [pc, #148]	; (800597c <__swsetup_r+0xd4>)
 80058e6:	429c      	cmp	r4, r3
 80058e8:	d101      	bne.n	80058ee <__swsetup_r+0x46>
 80058ea:	68ac      	ldr	r4, [r5, #8]
 80058ec:	e7eb      	b.n	80058c6 <__swsetup_r+0x1e>
 80058ee:	4b24      	ldr	r3, [pc, #144]	; (8005980 <__swsetup_r+0xd8>)
 80058f0:	429c      	cmp	r4, r3
 80058f2:	bf08      	it	eq
 80058f4:	68ec      	ldreq	r4, [r5, #12]
 80058f6:	e7e6      	b.n	80058c6 <__swsetup_r+0x1e>
 80058f8:	0758      	lsls	r0, r3, #29
 80058fa:	d512      	bpl.n	8005922 <__swsetup_r+0x7a>
 80058fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058fe:	b141      	cbz	r1, 8005912 <__swsetup_r+0x6a>
 8005900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005904:	4299      	cmp	r1, r3
 8005906:	d002      	beq.n	800590e <__swsetup_r+0x66>
 8005908:	4630      	mov	r0, r6
 800590a:	f001 fc7d 	bl	8007208 <_free_r>
 800590e:	2300      	movs	r3, #0
 8005910:	6363      	str	r3, [r4, #52]	; 0x34
 8005912:	89a3      	ldrh	r3, [r4, #12]
 8005914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005918:	81a3      	strh	r3, [r4, #12]
 800591a:	2300      	movs	r3, #0
 800591c:	6063      	str	r3, [r4, #4]
 800591e:	6923      	ldr	r3, [r4, #16]
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	89a3      	ldrh	r3, [r4, #12]
 8005924:	f043 0308 	orr.w	r3, r3, #8
 8005928:	81a3      	strh	r3, [r4, #12]
 800592a:	6923      	ldr	r3, [r4, #16]
 800592c:	b94b      	cbnz	r3, 8005942 <__swsetup_r+0x9a>
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005938:	d003      	beq.n	8005942 <__swsetup_r+0x9a>
 800593a:	4621      	mov	r1, r4
 800593c:	4630      	mov	r0, r6
 800593e:	f001 f87f 	bl	8006a40 <__smakebuf_r>
 8005942:	89a0      	ldrh	r0, [r4, #12]
 8005944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005948:	f010 0301 	ands.w	r3, r0, #1
 800594c:	d00a      	beq.n	8005964 <__swsetup_r+0xbc>
 800594e:	2300      	movs	r3, #0
 8005950:	60a3      	str	r3, [r4, #8]
 8005952:	6963      	ldr	r3, [r4, #20]
 8005954:	425b      	negs	r3, r3
 8005956:	61a3      	str	r3, [r4, #24]
 8005958:	6923      	ldr	r3, [r4, #16]
 800595a:	b943      	cbnz	r3, 800596e <__swsetup_r+0xc6>
 800595c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005960:	d1ba      	bne.n	80058d8 <__swsetup_r+0x30>
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	0781      	lsls	r1, r0, #30
 8005966:	bf58      	it	pl
 8005968:	6963      	ldrpl	r3, [r4, #20]
 800596a:	60a3      	str	r3, [r4, #8]
 800596c:	e7f4      	b.n	8005958 <__swsetup_r+0xb0>
 800596e:	2000      	movs	r0, #0
 8005970:	e7f7      	b.n	8005962 <__swsetup_r+0xba>
 8005972:	bf00      	nop
 8005974:	2000009c 	.word	0x2000009c
 8005978:	08008180 	.word	0x08008180
 800597c:	080081a0 	.word	0x080081a0
 8005980:	08008160 	.word	0x08008160

08005984 <quorem>:
 8005984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005988:	6903      	ldr	r3, [r0, #16]
 800598a:	690c      	ldr	r4, [r1, #16]
 800598c:	42a3      	cmp	r3, r4
 800598e:	4607      	mov	r7, r0
 8005990:	f2c0 8081 	blt.w	8005a96 <quorem+0x112>
 8005994:	3c01      	subs	r4, #1
 8005996:	f101 0814 	add.w	r8, r1, #20
 800599a:	f100 0514 	add.w	r5, r0, #20
 800599e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059a2:	9301      	str	r3, [sp, #4]
 80059a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059ac:	3301      	adds	r3, #1
 80059ae:	429a      	cmp	r2, r3
 80059b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80059bc:	d331      	bcc.n	8005a22 <quorem+0x9e>
 80059be:	f04f 0e00 	mov.w	lr, #0
 80059c2:	4640      	mov	r0, r8
 80059c4:	46ac      	mov	ip, r5
 80059c6:	46f2      	mov	sl, lr
 80059c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80059cc:	b293      	uxth	r3, r2
 80059ce:	fb06 e303 	mla	r3, r6, r3, lr
 80059d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	ebaa 0303 	sub.w	r3, sl, r3
 80059dc:	0c12      	lsrs	r2, r2, #16
 80059de:	f8dc a000 	ldr.w	sl, [ip]
 80059e2:	fb06 e202 	mla	r2, r6, r2, lr
 80059e6:	fa13 f38a 	uxtah	r3, r3, sl
 80059ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059ee:	fa1f fa82 	uxth.w	sl, r2
 80059f2:	f8dc 2000 	ldr.w	r2, [ip]
 80059f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80059fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a04:	4581      	cmp	r9, r0
 8005a06:	f84c 3b04 	str.w	r3, [ip], #4
 8005a0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a0e:	d2db      	bcs.n	80059c8 <quorem+0x44>
 8005a10:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a14:	b92b      	cbnz	r3, 8005a22 <quorem+0x9e>
 8005a16:	9b01      	ldr	r3, [sp, #4]
 8005a18:	3b04      	subs	r3, #4
 8005a1a:	429d      	cmp	r5, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	d32e      	bcc.n	8005a7e <quorem+0xfa>
 8005a20:	613c      	str	r4, [r7, #16]
 8005a22:	4638      	mov	r0, r7
 8005a24:	f001 fae0 	bl	8006fe8 <__mcmp>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	db24      	blt.n	8005a76 <quorem+0xf2>
 8005a2c:	3601      	adds	r6, #1
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f04f 0c00 	mov.w	ip, #0
 8005a34:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a38:	f8d0 e000 	ldr.w	lr, [r0]
 8005a3c:	b293      	uxth	r3, r2
 8005a3e:	ebac 0303 	sub.w	r3, ip, r3
 8005a42:	0c12      	lsrs	r2, r2, #16
 8005a44:	fa13 f38e 	uxtah	r3, r3, lr
 8005a48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a56:	45c1      	cmp	r9, r8
 8005a58:	f840 3b04 	str.w	r3, [r0], #4
 8005a5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a60:	d2e8      	bcs.n	8005a34 <quorem+0xb0>
 8005a62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a6a:	b922      	cbnz	r2, 8005a76 <quorem+0xf2>
 8005a6c:	3b04      	subs	r3, #4
 8005a6e:	429d      	cmp	r5, r3
 8005a70:	461a      	mov	r2, r3
 8005a72:	d30a      	bcc.n	8005a8a <quorem+0x106>
 8005a74:	613c      	str	r4, [r7, #16]
 8005a76:	4630      	mov	r0, r6
 8005a78:	b003      	add	sp, #12
 8005a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	3b04      	subs	r3, #4
 8005a82:	2a00      	cmp	r2, #0
 8005a84:	d1cc      	bne.n	8005a20 <quorem+0x9c>
 8005a86:	3c01      	subs	r4, #1
 8005a88:	e7c7      	b.n	8005a1a <quorem+0x96>
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	3b04      	subs	r3, #4
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	d1f0      	bne.n	8005a74 <quorem+0xf0>
 8005a92:	3c01      	subs	r4, #1
 8005a94:	e7eb      	b.n	8005a6e <quorem+0xea>
 8005a96:	2000      	movs	r0, #0
 8005a98:	e7ee      	b.n	8005a78 <quorem+0xf4>
 8005a9a:	0000      	movs	r0, r0
 8005a9c:	0000      	movs	r0, r0
	...

08005aa0 <_dtoa_r>:
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	ed2d 8b02 	vpush	{d8}
 8005aa8:	ec57 6b10 	vmov	r6, r7, d0
 8005aac:	b095      	sub	sp, #84	; 0x54
 8005aae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ab0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ab4:	9105      	str	r1, [sp, #20]
 8005ab6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005aba:	4604      	mov	r4, r0
 8005abc:	9209      	str	r2, [sp, #36]	; 0x24
 8005abe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ac0:	b975      	cbnz	r5, 8005ae0 <_dtoa_r+0x40>
 8005ac2:	2010      	movs	r0, #16
 8005ac4:	f000 fffc 	bl	8006ac0 <malloc>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6260      	str	r0, [r4, #36]	; 0x24
 8005acc:	b920      	cbnz	r0, 8005ad8 <_dtoa_r+0x38>
 8005ace:	4bb2      	ldr	r3, [pc, #712]	; (8005d98 <_dtoa_r+0x2f8>)
 8005ad0:	21ea      	movs	r1, #234	; 0xea
 8005ad2:	48b2      	ldr	r0, [pc, #712]	; (8005d9c <_dtoa_r+0x2fc>)
 8005ad4:	f001 fe4a 	bl	800776c <__assert_func>
 8005ad8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005adc:	6005      	str	r5, [r0, #0]
 8005ade:	60c5      	str	r5, [r0, #12]
 8005ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ae2:	6819      	ldr	r1, [r3, #0]
 8005ae4:	b151      	cbz	r1, 8005afc <_dtoa_r+0x5c>
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	604a      	str	r2, [r1, #4]
 8005aea:	2301      	movs	r3, #1
 8005aec:	4093      	lsls	r3, r2
 8005aee:	608b      	str	r3, [r1, #8]
 8005af0:	4620      	mov	r0, r4
 8005af2:	f001 f83b 	bl	8006b6c <_Bfree>
 8005af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	1e3b      	subs	r3, r7, #0
 8005afe:	bfb9      	ittee	lt
 8005b00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b04:	9303      	strlt	r3, [sp, #12]
 8005b06:	2300      	movge	r3, #0
 8005b08:	f8c8 3000 	strge.w	r3, [r8]
 8005b0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005b10:	4ba3      	ldr	r3, [pc, #652]	; (8005da0 <_dtoa_r+0x300>)
 8005b12:	bfbc      	itt	lt
 8005b14:	2201      	movlt	r2, #1
 8005b16:	f8c8 2000 	strlt.w	r2, [r8]
 8005b1a:	ea33 0309 	bics.w	r3, r3, r9
 8005b1e:	d11b      	bne.n	8005b58 <_dtoa_r+0xb8>
 8005b20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b22:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b2c:	4333      	orrs	r3, r6
 8005b2e:	f000 857a 	beq.w	8006626 <_dtoa_r+0xb86>
 8005b32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b34:	b963      	cbnz	r3, 8005b50 <_dtoa_r+0xb0>
 8005b36:	4b9b      	ldr	r3, [pc, #620]	; (8005da4 <_dtoa_r+0x304>)
 8005b38:	e024      	b.n	8005b84 <_dtoa_r+0xe4>
 8005b3a:	4b9b      	ldr	r3, [pc, #620]	; (8005da8 <_dtoa_r+0x308>)
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	9800      	ldr	r0, [sp, #0]
 8005b46:	b015      	add	sp, #84	; 0x54
 8005b48:	ecbd 8b02 	vpop	{d8}
 8005b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b50:	4b94      	ldr	r3, [pc, #592]	; (8005da4 <_dtoa_r+0x304>)
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	3303      	adds	r3, #3
 8005b56:	e7f3      	b.n	8005b40 <_dtoa_r+0xa0>
 8005b58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	ec51 0b17 	vmov	r0, r1, d7
 8005b62:	2300      	movs	r3, #0
 8005b64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005b68:	f7fa ffb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b6c:	4680      	mov	r8, r0
 8005b6e:	b158      	cbz	r0, 8005b88 <_dtoa_r+0xe8>
 8005b70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b72:	2301      	movs	r3, #1
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 8551 	beq.w	8006620 <_dtoa_r+0xb80>
 8005b7e:	488b      	ldr	r0, [pc, #556]	; (8005dac <_dtoa_r+0x30c>)
 8005b80:	6018      	str	r0, [r3, #0]
 8005b82:	1e43      	subs	r3, r0, #1
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	e7dd      	b.n	8005b44 <_dtoa_r+0xa4>
 8005b88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005b8c:	aa12      	add	r2, sp, #72	; 0x48
 8005b8e:	a913      	add	r1, sp, #76	; 0x4c
 8005b90:	4620      	mov	r0, r4
 8005b92:	f001 facd 	bl	8007130 <__d2b>
 8005b96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b9a:	4683      	mov	fp, r0
 8005b9c:	2d00      	cmp	r5, #0
 8005b9e:	d07c      	beq.n	8005c9a <_dtoa_r+0x1fa>
 8005ba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ba2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005ba6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005baa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005bae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005bb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005bb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bba:	4b7d      	ldr	r3, [pc, #500]	; (8005db0 <_dtoa_r+0x310>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	f7fa fb69 	bl	8000298 <__aeabi_dsub>
 8005bc6:	a36e      	add	r3, pc, #440	; (adr r3, 8005d80 <_dtoa_r+0x2e0>)
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f7fa fd1c 	bl	8000608 <__aeabi_dmul>
 8005bd0:	a36d      	add	r3, pc, #436	; (adr r3, 8005d88 <_dtoa_r+0x2e8>)
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f7fa fb61 	bl	800029c <__adddf3>
 8005bda:	4606      	mov	r6, r0
 8005bdc:	4628      	mov	r0, r5
 8005bde:	460f      	mov	r7, r1
 8005be0:	f7fa fca8 	bl	8000534 <__aeabi_i2d>
 8005be4:	a36a      	add	r3, pc, #424	; (adr r3, 8005d90 <_dtoa_r+0x2f0>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f7fa fd0d 	bl	8000608 <__aeabi_dmul>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	f7fa fb51 	bl	800029c <__adddf3>
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	460f      	mov	r7, r1
 8005bfe:	f7fa ffb3 	bl	8000b68 <__aeabi_d2iz>
 8005c02:	2200      	movs	r2, #0
 8005c04:	4682      	mov	sl, r0
 8005c06:	2300      	movs	r3, #0
 8005c08:	4630      	mov	r0, r6
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	f7fa ff6e 	bl	8000aec <__aeabi_dcmplt>
 8005c10:	b148      	cbz	r0, 8005c26 <_dtoa_r+0x186>
 8005c12:	4650      	mov	r0, sl
 8005c14:	f7fa fc8e 	bl	8000534 <__aeabi_i2d>
 8005c18:	4632      	mov	r2, r6
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	f7fa ff5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c20:	b908      	cbnz	r0, 8005c26 <_dtoa_r+0x186>
 8005c22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c26:	f1ba 0f16 	cmp.w	sl, #22
 8005c2a:	d854      	bhi.n	8005cd6 <_dtoa_r+0x236>
 8005c2c:	4b61      	ldr	r3, [pc, #388]	; (8005db4 <_dtoa_r+0x314>)
 8005c2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c3a:	f7fa ff57 	bl	8000aec <__aeabi_dcmplt>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d04b      	beq.n	8005cda <_dtoa_r+0x23a>
 8005c42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c46:	2300      	movs	r3, #0
 8005c48:	930e      	str	r3, [sp, #56]	; 0x38
 8005c4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c4c:	1b5d      	subs	r5, r3, r5
 8005c4e:	1e6b      	subs	r3, r5, #1
 8005c50:	9304      	str	r3, [sp, #16]
 8005c52:	bf43      	ittte	mi
 8005c54:	2300      	movmi	r3, #0
 8005c56:	f1c5 0801 	rsbmi	r8, r5, #1
 8005c5a:	9304      	strmi	r3, [sp, #16]
 8005c5c:	f04f 0800 	movpl.w	r8, #0
 8005c60:	f1ba 0f00 	cmp.w	sl, #0
 8005c64:	db3b      	blt.n	8005cde <_dtoa_r+0x23e>
 8005c66:	9b04      	ldr	r3, [sp, #16]
 8005c68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005c6c:	4453      	add	r3, sl
 8005c6e:	9304      	str	r3, [sp, #16]
 8005c70:	2300      	movs	r3, #0
 8005c72:	9306      	str	r3, [sp, #24]
 8005c74:	9b05      	ldr	r3, [sp, #20]
 8005c76:	2b09      	cmp	r3, #9
 8005c78:	d869      	bhi.n	8005d4e <_dtoa_r+0x2ae>
 8005c7a:	2b05      	cmp	r3, #5
 8005c7c:	bfc4      	itt	gt
 8005c7e:	3b04      	subgt	r3, #4
 8005c80:	9305      	strgt	r3, [sp, #20]
 8005c82:	9b05      	ldr	r3, [sp, #20]
 8005c84:	f1a3 0302 	sub.w	r3, r3, #2
 8005c88:	bfcc      	ite	gt
 8005c8a:	2500      	movgt	r5, #0
 8005c8c:	2501      	movle	r5, #1
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d869      	bhi.n	8005d66 <_dtoa_r+0x2c6>
 8005c92:	e8df f003 	tbb	[pc, r3]
 8005c96:	4e2c      	.short	0x4e2c
 8005c98:	5a4c      	.short	0x5a4c
 8005c9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005c9e:	441d      	add	r5, r3
 8005ca0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ca4:	2b20      	cmp	r3, #32
 8005ca6:	bfc1      	itttt	gt
 8005ca8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005cb0:	fa09 f303 	lslgt.w	r3, r9, r3
 8005cb4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005cb8:	bfda      	itte	le
 8005cba:	f1c3 0320 	rsble	r3, r3, #32
 8005cbe:	fa06 f003 	lslle.w	r0, r6, r3
 8005cc2:	4318      	orrgt	r0, r3
 8005cc4:	f7fa fc26 	bl	8000514 <__aeabi_ui2d>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	4606      	mov	r6, r0
 8005ccc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005cd0:	3d01      	subs	r5, #1
 8005cd2:	9310      	str	r3, [sp, #64]	; 0x40
 8005cd4:	e771      	b.n	8005bba <_dtoa_r+0x11a>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e7b6      	b.n	8005c48 <_dtoa_r+0x1a8>
 8005cda:	900e      	str	r0, [sp, #56]	; 0x38
 8005cdc:	e7b5      	b.n	8005c4a <_dtoa_r+0x1aa>
 8005cde:	f1ca 0300 	rsb	r3, sl, #0
 8005ce2:	9306      	str	r3, [sp, #24]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	eba8 080a 	sub.w	r8, r8, sl
 8005cea:	930d      	str	r3, [sp, #52]	; 0x34
 8005cec:	e7c2      	b.n	8005c74 <_dtoa_r+0x1d4>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	9308      	str	r3, [sp, #32]
 8005cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	dc39      	bgt.n	8005d6c <_dtoa_r+0x2cc>
 8005cf8:	f04f 0901 	mov.w	r9, #1
 8005cfc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d00:	464b      	mov	r3, r9
 8005d02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005d06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d08:	2200      	movs	r2, #0
 8005d0a:	6042      	str	r2, [r0, #4]
 8005d0c:	2204      	movs	r2, #4
 8005d0e:	f102 0614 	add.w	r6, r2, #20
 8005d12:	429e      	cmp	r6, r3
 8005d14:	6841      	ldr	r1, [r0, #4]
 8005d16:	d92f      	bls.n	8005d78 <_dtoa_r+0x2d8>
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 fee7 	bl	8006aec <_Balloc>
 8005d1e:	9000      	str	r0, [sp, #0]
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d14b      	bne.n	8005dbc <_dtoa_r+0x31c>
 8005d24:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <_dtoa_r+0x318>)
 8005d26:	4602      	mov	r2, r0
 8005d28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d2c:	e6d1      	b.n	8005ad2 <_dtoa_r+0x32>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e7de      	b.n	8005cf0 <_dtoa_r+0x250>
 8005d32:	2300      	movs	r3, #0
 8005d34:	9308      	str	r3, [sp, #32]
 8005d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d38:	eb0a 0903 	add.w	r9, sl, r3
 8005d3c:	f109 0301 	add.w	r3, r9, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	9301      	str	r3, [sp, #4]
 8005d44:	bfb8      	it	lt
 8005d46:	2301      	movlt	r3, #1
 8005d48:	e7dd      	b.n	8005d06 <_dtoa_r+0x266>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e7f2      	b.n	8005d34 <_dtoa_r+0x294>
 8005d4e:	2501      	movs	r5, #1
 8005d50:	2300      	movs	r3, #0
 8005d52:	9305      	str	r3, [sp, #20]
 8005d54:	9508      	str	r5, [sp, #32]
 8005d56:	f04f 39ff 	mov.w	r9, #4294967295
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d60:	2312      	movs	r3, #18
 8005d62:	9209      	str	r2, [sp, #36]	; 0x24
 8005d64:	e7cf      	b.n	8005d06 <_dtoa_r+0x266>
 8005d66:	2301      	movs	r3, #1
 8005d68:	9308      	str	r3, [sp, #32]
 8005d6a:	e7f4      	b.n	8005d56 <_dtoa_r+0x2b6>
 8005d6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005d70:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d74:	464b      	mov	r3, r9
 8005d76:	e7c6      	b.n	8005d06 <_dtoa_r+0x266>
 8005d78:	3101      	adds	r1, #1
 8005d7a:	6041      	str	r1, [r0, #4]
 8005d7c:	0052      	lsls	r2, r2, #1
 8005d7e:	e7c6      	b.n	8005d0e <_dtoa_r+0x26e>
 8005d80:	636f4361 	.word	0x636f4361
 8005d84:	3fd287a7 	.word	0x3fd287a7
 8005d88:	8b60c8b3 	.word	0x8b60c8b3
 8005d8c:	3fc68a28 	.word	0x3fc68a28
 8005d90:	509f79fb 	.word	0x509f79fb
 8005d94:	3fd34413 	.word	0x3fd34413
 8005d98:	080080d9 	.word	0x080080d9
 8005d9c:	080080f0 	.word	0x080080f0
 8005da0:	7ff00000 	.word	0x7ff00000
 8005da4:	080080d5 	.word	0x080080d5
 8005da8:	080080cc 	.word	0x080080cc
 8005dac:	080080a9 	.word	0x080080a9
 8005db0:	3ff80000 	.word	0x3ff80000
 8005db4:	08008248 	.word	0x08008248
 8005db8:	0800814f 	.word	0x0800814f
 8005dbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dbe:	9a00      	ldr	r2, [sp, #0]
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	9b01      	ldr	r3, [sp, #4]
 8005dc4:	2b0e      	cmp	r3, #14
 8005dc6:	f200 80ad 	bhi.w	8005f24 <_dtoa_r+0x484>
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	f000 80aa 	beq.w	8005f24 <_dtoa_r+0x484>
 8005dd0:	f1ba 0f00 	cmp.w	sl, #0
 8005dd4:	dd36      	ble.n	8005e44 <_dtoa_r+0x3a4>
 8005dd6:	4ac3      	ldr	r2, [pc, #780]	; (80060e4 <_dtoa_r+0x644>)
 8005dd8:	f00a 030f 	and.w	r3, sl, #15
 8005ddc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005de0:	ed93 7b00 	vldr	d7, [r3]
 8005de4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005de8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005dec:	eeb0 8a47 	vmov.f32	s16, s14
 8005df0:	eef0 8a67 	vmov.f32	s17, s15
 8005df4:	d016      	beq.n	8005e24 <_dtoa_r+0x384>
 8005df6:	4bbc      	ldr	r3, [pc, #752]	; (80060e8 <_dtoa_r+0x648>)
 8005df8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e00:	f7fa fd2c 	bl	800085c <__aeabi_ddiv>
 8005e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e08:	f007 070f 	and.w	r7, r7, #15
 8005e0c:	2503      	movs	r5, #3
 8005e0e:	4eb6      	ldr	r6, [pc, #728]	; (80060e8 <_dtoa_r+0x648>)
 8005e10:	b957      	cbnz	r7, 8005e28 <_dtoa_r+0x388>
 8005e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e16:	ec53 2b18 	vmov	r2, r3, d8
 8005e1a:	f7fa fd1f 	bl	800085c <__aeabi_ddiv>
 8005e1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e22:	e029      	b.n	8005e78 <_dtoa_r+0x3d8>
 8005e24:	2502      	movs	r5, #2
 8005e26:	e7f2      	b.n	8005e0e <_dtoa_r+0x36e>
 8005e28:	07f9      	lsls	r1, r7, #31
 8005e2a:	d508      	bpl.n	8005e3e <_dtoa_r+0x39e>
 8005e2c:	ec51 0b18 	vmov	r0, r1, d8
 8005e30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e34:	f7fa fbe8 	bl	8000608 <__aeabi_dmul>
 8005e38:	ec41 0b18 	vmov	d8, r0, r1
 8005e3c:	3501      	adds	r5, #1
 8005e3e:	107f      	asrs	r7, r7, #1
 8005e40:	3608      	adds	r6, #8
 8005e42:	e7e5      	b.n	8005e10 <_dtoa_r+0x370>
 8005e44:	f000 80a6 	beq.w	8005f94 <_dtoa_r+0x4f4>
 8005e48:	f1ca 0600 	rsb	r6, sl, #0
 8005e4c:	4ba5      	ldr	r3, [pc, #660]	; (80060e4 <_dtoa_r+0x644>)
 8005e4e:	4fa6      	ldr	r7, [pc, #664]	; (80060e8 <_dtoa_r+0x648>)
 8005e50:	f006 020f 	and.w	r2, r6, #15
 8005e54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e60:	f7fa fbd2 	bl	8000608 <__aeabi_dmul>
 8005e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e68:	1136      	asrs	r6, r6, #4
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2502      	movs	r5, #2
 8005e6e:	2e00      	cmp	r6, #0
 8005e70:	f040 8085 	bne.w	8005f7e <_dtoa_r+0x4de>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1d2      	bne.n	8005e1e <_dtoa_r+0x37e>
 8005e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 808c 	beq.w	8005f98 <_dtoa_r+0x4f8>
 8005e80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e84:	4b99      	ldr	r3, [pc, #612]	; (80060ec <_dtoa_r+0x64c>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	4630      	mov	r0, r6
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	f7fa fe2e 	bl	8000aec <__aeabi_dcmplt>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	f000 8081 	beq.w	8005f98 <_dtoa_r+0x4f8>
 8005e96:	9b01      	ldr	r3, [sp, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d07d      	beq.n	8005f98 <_dtoa_r+0x4f8>
 8005e9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ea0:	dd3c      	ble.n	8005f1c <_dtoa_r+0x47c>
 8005ea2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005ea6:	9307      	str	r3, [sp, #28]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4b91      	ldr	r3, [pc, #580]	; (80060f0 <_dtoa_r+0x650>)
 8005eac:	4630      	mov	r0, r6
 8005eae:	4639      	mov	r1, r7
 8005eb0:	f7fa fbaa 	bl	8000608 <__aeabi_dmul>
 8005eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eb8:	3501      	adds	r5, #1
 8005eba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005ebe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f7fa fb36 	bl	8000534 <__aeabi_i2d>
 8005ec8:	4632      	mov	r2, r6
 8005eca:	463b      	mov	r3, r7
 8005ecc:	f7fa fb9c 	bl	8000608 <__aeabi_dmul>
 8005ed0:	4b88      	ldr	r3, [pc, #544]	; (80060f4 <_dtoa_r+0x654>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f7fa f9e2 	bl	800029c <__adddf3>
 8005ed8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ee0:	9303      	str	r3, [sp, #12]
 8005ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d15c      	bne.n	8005fa2 <_dtoa_r+0x502>
 8005ee8:	4b83      	ldr	r3, [pc, #524]	; (80060f8 <_dtoa_r+0x658>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	4630      	mov	r0, r6
 8005eee:	4639      	mov	r1, r7
 8005ef0:	f7fa f9d2 	bl	8000298 <__aeabi_dsub>
 8005ef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ef8:	4606      	mov	r6, r0
 8005efa:	460f      	mov	r7, r1
 8005efc:	f7fa fe14 	bl	8000b28 <__aeabi_dcmpgt>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	f040 8296 	bne.w	8006432 <_dtoa_r+0x992>
 8005f06:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f10:	4639      	mov	r1, r7
 8005f12:	f7fa fdeb 	bl	8000aec <__aeabi_dcmplt>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f040 8288 	bne.w	800642c <_dtoa_r+0x98c>
 8005f1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f2c0 8158 	blt.w	80061dc <_dtoa_r+0x73c>
 8005f2c:	f1ba 0f0e 	cmp.w	sl, #14
 8005f30:	f300 8154 	bgt.w	80061dc <_dtoa_r+0x73c>
 8005f34:	4b6b      	ldr	r3, [pc, #428]	; (80060e4 <_dtoa_r+0x644>)
 8005f36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f280 80e3 	bge.w	800610c <_dtoa_r+0x66c>
 8005f46:	9b01      	ldr	r3, [sp, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f300 80df 	bgt.w	800610c <_dtoa_r+0x66c>
 8005f4e:	f040 826d 	bne.w	800642c <_dtoa_r+0x98c>
 8005f52:	4b69      	ldr	r3, [pc, #420]	; (80060f8 <_dtoa_r+0x658>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	4640      	mov	r0, r8
 8005f58:	4649      	mov	r1, r9
 8005f5a:	f7fa fb55 	bl	8000608 <__aeabi_dmul>
 8005f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f62:	f7fa fdd7 	bl	8000b14 <__aeabi_dcmpge>
 8005f66:	9e01      	ldr	r6, [sp, #4]
 8005f68:	4637      	mov	r7, r6
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	f040 8243 	bne.w	80063f6 <_dtoa_r+0x956>
 8005f70:	9d00      	ldr	r5, [sp, #0]
 8005f72:	2331      	movs	r3, #49	; 0x31
 8005f74:	f805 3b01 	strb.w	r3, [r5], #1
 8005f78:	f10a 0a01 	add.w	sl, sl, #1
 8005f7c:	e23f      	b.n	80063fe <_dtoa_r+0x95e>
 8005f7e:	07f2      	lsls	r2, r6, #31
 8005f80:	d505      	bpl.n	8005f8e <_dtoa_r+0x4ee>
 8005f82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f86:	f7fa fb3f 	bl	8000608 <__aeabi_dmul>
 8005f8a:	3501      	adds	r5, #1
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	1076      	asrs	r6, r6, #1
 8005f90:	3708      	adds	r7, #8
 8005f92:	e76c      	b.n	8005e6e <_dtoa_r+0x3ce>
 8005f94:	2502      	movs	r5, #2
 8005f96:	e76f      	b.n	8005e78 <_dtoa_r+0x3d8>
 8005f98:	9b01      	ldr	r3, [sp, #4]
 8005f9a:	f8cd a01c 	str.w	sl, [sp, #28]
 8005f9e:	930c      	str	r3, [sp, #48]	; 0x30
 8005fa0:	e78d      	b.n	8005ebe <_dtoa_r+0x41e>
 8005fa2:	9900      	ldr	r1, [sp, #0]
 8005fa4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005fa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fa8:	4b4e      	ldr	r3, [pc, #312]	; (80060e4 <_dtoa_r+0x644>)
 8005faa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fae:	4401      	add	r1, r0
 8005fb0:	9102      	str	r1, [sp, #8]
 8005fb2:	9908      	ldr	r1, [sp, #32]
 8005fb4:	eeb0 8a47 	vmov.f32	s16, s14
 8005fb8:	eef0 8a67 	vmov.f32	s17, s15
 8005fbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fc4:	2900      	cmp	r1, #0
 8005fc6:	d045      	beq.n	8006054 <_dtoa_r+0x5b4>
 8005fc8:	494c      	ldr	r1, [pc, #304]	; (80060fc <_dtoa_r+0x65c>)
 8005fca:	2000      	movs	r0, #0
 8005fcc:	f7fa fc46 	bl	800085c <__aeabi_ddiv>
 8005fd0:	ec53 2b18 	vmov	r2, r3, d8
 8005fd4:	f7fa f960 	bl	8000298 <__aeabi_dsub>
 8005fd8:	9d00      	ldr	r5, [sp, #0]
 8005fda:	ec41 0b18 	vmov	d8, r0, r1
 8005fde:	4639      	mov	r1, r7
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f7fa fdc1 	bl	8000b68 <__aeabi_d2iz>
 8005fe6:	900c      	str	r0, [sp, #48]	; 0x30
 8005fe8:	f7fa faa4 	bl	8000534 <__aeabi_i2d>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	4639      	mov	r1, r7
 8005ff4:	f7fa f950 	bl	8000298 <__aeabi_dsub>
 8005ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ffa:	3330      	adds	r3, #48	; 0x30
 8005ffc:	f805 3b01 	strb.w	r3, [r5], #1
 8006000:	ec53 2b18 	vmov	r2, r3, d8
 8006004:	4606      	mov	r6, r0
 8006006:	460f      	mov	r7, r1
 8006008:	f7fa fd70 	bl	8000aec <__aeabi_dcmplt>
 800600c:	2800      	cmp	r0, #0
 800600e:	d165      	bne.n	80060dc <_dtoa_r+0x63c>
 8006010:	4632      	mov	r2, r6
 8006012:	463b      	mov	r3, r7
 8006014:	4935      	ldr	r1, [pc, #212]	; (80060ec <_dtoa_r+0x64c>)
 8006016:	2000      	movs	r0, #0
 8006018:	f7fa f93e 	bl	8000298 <__aeabi_dsub>
 800601c:	ec53 2b18 	vmov	r2, r3, d8
 8006020:	f7fa fd64 	bl	8000aec <__aeabi_dcmplt>
 8006024:	2800      	cmp	r0, #0
 8006026:	f040 80b9 	bne.w	800619c <_dtoa_r+0x6fc>
 800602a:	9b02      	ldr	r3, [sp, #8]
 800602c:	429d      	cmp	r5, r3
 800602e:	f43f af75 	beq.w	8005f1c <_dtoa_r+0x47c>
 8006032:	4b2f      	ldr	r3, [pc, #188]	; (80060f0 <_dtoa_r+0x650>)
 8006034:	ec51 0b18 	vmov	r0, r1, d8
 8006038:	2200      	movs	r2, #0
 800603a:	f7fa fae5 	bl	8000608 <__aeabi_dmul>
 800603e:	4b2c      	ldr	r3, [pc, #176]	; (80060f0 <_dtoa_r+0x650>)
 8006040:	ec41 0b18 	vmov	d8, r0, r1
 8006044:	2200      	movs	r2, #0
 8006046:	4630      	mov	r0, r6
 8006048:	4639      	mov	r1, r7
 800604a:	f7fa fadd 	bl	8000608 <__aeabi_dmul>
 800604e:	4606      	mov	r6, r0
 8006050:	460f      	mov	r7, r1
 8006052:	e7c4      	b.n	8005fde <_dtoa_r+0x53e>
 8006054:	ec51 0b17 	vmov	r0, r1, d7
 8006058:	f7fa fad6 	bl	8000608 <__aeabi_dmul>
 800605c:	9b02      	ldr	r3, [sp, #8]
 800605e:	9d00      	ldr	r5, [sp, #0]
 8006060:	930c      	str	r3, [sp, #48]	; 0x30
 8006062:	ec41 0b18 	vmov	d8, r0, r1
 8006066:	4639      	mov	r1, r7
 8006068:	4630      	mov	r0, r6
 800606a:	f7fa fd7d 	bl	8000b68 <__aeabi_d2iz>
 800606e:	9011      	str	r0, [sp, #68]	; 0x44
 8006070:	f7fa fa60 	bl	8000534 <__aeabi_i2d>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4630      	mov	r0, r6
 800607a:	4639      	mov	r1, r7
 800607c:	f7fa f90c 	bl	8000298 <__aeabi_dsub>
 8006080:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006082:	3330      	adds	r3, #48	; 0x30
 8006084:	f805 3b01 	strb.w	r3, [r5], #1
 8006088:	9b02      	ldr	r3, [sp, #8]
 800608a:	429d      	cmp	r5, r3
 800608c:	4606      	mov	r6, r0
 800608e:	460f      	mov	r7, r1
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	d134      	bne.n	8006100 <_dtoa_r+0x660>
 8006096:	4b19      	ldr	r3, [pc, #100]	; (80060fc <_dtoa_r+0x65c>)
 8006098:	ec51 0b18 	vmov	r0, r1, d8
 800609c:	f7fa f8fe 	bl	800029c <__adddf3>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4630      	mov	r0, r6
 80060a6:	4639      	mov	r1, r7
 80060a8:	f7fa fd3e 	bl	8000b28 <__aeabi_dcmpgt>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d175      	bne.n	800619c <_dtoa_r+0x6fc>
 80060b0:	ec53 2b18 	vmov	r2, r3, d8
 80060b4:	4911      	ldr	r1, [pc, #68]	; (80060fc <_dtoa_r+0x65c>)
 80060b6:	2000      	movs	r0, #0
 80060b8:	f7fa f8ee 	bl	8000298 <__aeabi_dsub>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4630      	mov	r0, r6
 80060c2:	4639      	mov	r1, r7
 80060c4:	f7fa fd12 	bl	8000aec <__aeabi_dcmplt>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	f43f af27 	beq.w	8005f1c <_dtoa_r+0x47c>
 80060ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060d0:	1e6b      	subs	r3, r5, #1
 80060d2:	930c      	str	r3, [sp, #48]	; 0x30
 80060d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060d8:	2b30      	cmp	r3, #48	; 0x30
 80060da:	d0f8      	beq.n	80060ce <_dtoa_r+0x62e>
 80060dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80060e0:	e04a      	b.n	8006178 <_dtoa_r+0x6d8>
 80060e2:	bf00      	nop
 80060e4:	08008248 	.word	0x08008248
 80060e8:	08008220 	.word	0x08008220
 80060ec:	3ff00000 	.word	0x3ff00000
 80060f0:	40240000 	.word	0x40240000
 80060f4:	401c0000 	.word	0x401c0000
 80060f8:	40140000 	.word	0x40140000
 80060fc:	3fe00000 	.word	0x3fe00000
 8006100:	4baf      	ldr	r3, [pc, #700]	; (80063c0 <_dtoa_r+0x920>)
 8006102:	f7fa fa81 	bl	8000608 <__aeabi_dmul>
 8006106:	4606      	mov	r6, r0
 8006108:	460f      	mov	r7, r1
 800610a:	e7ac      	b.n	8006066 <_dtoa_r+0x5c6>
 800610c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006110:	9d00      	ldr	r5, [sp, #0]
 8006112:	4642      	mov	r2, r8
 8006114:	464b      	mov	r3, r9
 8006116:	4630      	mov	r0, r6
 8006118:	4639      	mov	r1, r7
 800611a:	f7fa fb9f 	bl	800085c <__aeabi_ddiv>
 800611e:	f7fa fd23 	bl	8000b68 <__aeabi_d2iz>
 8006122:	9002      	str	r0, [sp, #8]
 8006124:	f7fa fa06 	bl	8000534 <__aeabi_i2d>
 8006128:	4642      	mov	r2, r8
 800612a:	464b      	mov	r3, r9
 800612c:	f7fa fa6c 	bl	8000608 <__aeabi_dmul>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4630      	mov	r0, r6
 8006136:	4639      	mov	r1, r7
 8006138:	f7fa f8ae 	bl	8000298 <__aeabi_dsub>
 800613c:	9e02      	ldr	r6, [sp, #8]
 800613e:	9f01      	ldr	r7, [sp, #4]
 8006140:	3630      	adds	r6, #48	; 0x30
 8006142:	f805 6b01 	strb.w	r6, [r5], #1
 8006146:	9e00      	ldr	r6, [sp, #0]
 8006148:	1bae      	subs	r6, r5, r6
 800614a:	42b7      	cmp	r7, r6
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	d137      	bne.n	80061c2 <_dtoa_r+0x722>
 8006152:	f7fa f8a3 	bl	800029c <__adddf3>
 8006156:	4642      	mov	r2, r8
 8006158:	464b      	mov	r3, r9
 800615a:	4606      	mov	r6, r0
 800615c:	460f      	mov	r7, r1
 800615e:	f7fa fce3 	bl	8000b28 <__aeabi_dcmpgt>
 8006162:	b9c8      	cbnz	r0, 8006198 <_dtoa_r+0x6f8>
 8006164:	4642      	mov	r2, r8
 8006166:	464b      	mov	r3, r9
 8006168:	4630      	mov	r0, r6
 800616a:	4639      	mov	r1, r7
 800616c:	f7fa fcb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006170:	b110      	cbz	r0, 8006178 <_dtoa_r+0x6d8>
 8006172:	9b02      	ldr	r3, [sp, #8]
 8006174:	07d9      	lsls	r1, r3, #31
 8006176:	d40f      	bmi.n	8006198 <_dtoa_r+0x6f8>
 8006178:	4620      	mov	r0, r4
 800617a:	4659      	mov	r1, fp
 800617c:	f000 fcf6 	bl	8006b6c <_Bfree>
 8006180:	2300      	movs	r3, #0
 8006182:	702b      	strb	r3, [r5, #0]
 8006184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006186:	f10a 0001 	add.w	r0, sl, #1
 800618a:	6018      	str	r0, [r3, #0]
 800618c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800618e:	2b00      	cmp	r3, #0
 8006190:	f43f acd8 	beq.w	8005b44 <_dtoa_r+0xa4>
 8006194:	601d      	str	r5, [r3, #0]
 8006196:	e4d5      	b.n	8005b44 <_dtoa_r+0xa4>
 8006198:	f8cd a01c 	str.w	sl, [sp, #28]
 800619c:	462b      	mov	r3, r5
 800619e:	461d      	mov	r5, r3
 80061a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061a4:	2a39      	cmp	r2, #57	; 0x39
 80061a6:	d108      	bne.n	80061ba <_dtoa_r+0x71a>
 80061a8:	9a00      	ldr	r2, [sp, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d1f7      	bne.n	800619e <_dtoa_r+0x6fe>
 80061ae:	9a07      	ldr	r2, [sp, #28]
 80061b0:	9900      	ldr	r1, [sp, #0]
 80061b2:	3201      	adds	r2, #1
 80061b4:	9207      	str	r2, [sp, #28]
 80061b6:	2230      	movs	r2, #48	; 0x30
 80061b8:	700a      	strb	r2, [r1, #0]
 80061ba:	781a      	ldrb	r2, [r3, #0]
 80061bc:	3201      	adds	r2, #1
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	e78c      	b.n	80060dc <_dtoa_r+0x63c>
 80061c2:	4b7f      	ldr	r3, [pc, #508]	; (80063c0 <_dtoa_r+0x920>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	f7fa fa1f 	bl	8000608 <__aeabi_dmul>
 80061ca:	2200      	movs	r2, #0
 80061cc:	2300      	movs	r3, #0
 80061ce:	4606      	mov	r6, r0
 80061d0:	460f      	mov	r7, r1
 80061d2:	f7fa fc81 	bl	8000ad8 <__aeabi_dcmpeq>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	d09b      	beq.n	8006112 <_dtoa_r+0x672>
 80061da:	e7cd      	b.n	8006178 <_dtoa_r+0x6d8>
 80061dc:	9a08      	ldr	r2, [sp, #32]
 80061de:	2a00      	cmp	r2, #0
 80061e0:	f000 80c4 	beq.w	800636c <_dtoa_r+0x8cc>
 80061e4:	9a05      	ldr	r2, [sp, #20]
 80061e6:	2a01      	cmp	r2, #1
 80061e8:	f300 80a8 	bgt.w	800633c <_dtoa_r+0x89c>
 80061ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061ee:	2a00      	cmp	r2, #0
 80061f0:	f000 80a0 	beq.w	8006334 <_dtoa_r+0x894>
 80061f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061f8:	9e06      	ldr	r6, [sp, #24]
 80061fa:	4645      	mov	r5, r8
 80061fc:	9a04      	ldr	r2, [sp, #16]
 80061fe:	2101      	movs	r1, #1
 8006200:	441a      	add	r2, r3
 8006202:	4620      	mov	r0, r4
 8006204:	4498      	add	r8, r3
 8006206:	9204      	str	r2, [sp, #16]
 8006208:	f000 fd6c 	bl	8006ce4 <__i2b>
 800620c:	4607      	mov	r7, r0
 800620e:	2d00      	cmp	r5, #0
 8006210:	dd0b      	ble.n	800622a <_dtoa_r+0x78a>
 8006212:	9b04      	ldr	r3, [sp, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	dd08      	ble.n	800622a <_dtoa_r+0x78a>
 8006218:	42ab      	cmp	r3, r5
 800621a:	9a04      	ldr	r2, [sp, #16]
 800621c:	bfa8      	it	ge
 800621e:	462b      	movge	r3, r5
 8006220:	eba8 0803 	sub.w	r8, r8, r3
 8006224:	1aed      	subs	r5, r5, r3
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	9304      	str	r3, [sp, #16]
 800622a:	9b06      	ldr	r3, [sp, #24]
 800622c:	b1fb      	cbz	r3, 800626e <_dtoa_r+0x7ce>
 800622e:	9b08      	ldr	r3, [sp, #32]
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 809f 	beq.w	8006374 <_dtoa_r+0x8d4>
 8006236:	2e00      	cmp	r6, #0
 8006238:	dd11      	ble.n	800625e <_dtoa_r+0x7be>
 800623a:	4639      	mov	r1, r7
 800623c:	4632      	mov	r2, r6
 800623e:	4620      	mov	r0, r4
 8006240:	f000 fe0c 	bl	8006e5c <__pow5mult>
 8006244:	465a      	mov	r2, fp
 8006246:	4601      	mov	r1, r0
 8006248:	4607      	mov	r7, r0
 800624a:	4620      	mov	r0, r4
 800624c:	f000 fd60 	bl	8006d10 <__multiply>
 8006250:	4659      	mov	r1, fp
 8006252:	9007      	str	r0, [sp, #28]
 8006254:	4620      	mov	r0, r4
 8006256:	f000 fc89 	bl	8006b6c <_Bfree>
 800625a:	9b07      	ldr	r3, [sp, #28]
 800625c:	469b      	mov	fp, r3
 800625e:	9b06      	ldr	r3, [sp, #24]
 8006260:	1b9a      	subs	r2, r3, r6
 8006262:	d004      	beq.n	800626e <_dtoa_r+0x7ce>
 8006264:	4659      	mov	r1, fp
 8006266:	4620      	mov	r0, r4
 8006268:	f000 fdf8 	bl	8006e5c <__pow5mult>
 800626c:	4683      	mov	fp, r0
 800626e:	2101      	movs	r1, #1
 8006270:	4620      	mov	r0, r4
 8006272:	f000 fd37 	bl	8006ce4 <__i2b>
 8006276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006278:	2b00      	cmp	r3, #0
 800627a:	4606      	mov	r6, r0
 800627c:	dd7c      	ble.n	8006378 <_dtoa_r+0x8d8>
 800627e:	461a      	mov	r2, r3
 8006280:	4601      	mov	r1, r0
 8006282:	4620      	mov	r0, r4
 8006284:	f000 fdea 	bl	8006e5c <__pow5mult>
 8006288:	9b05      	ldr	r3, [sp, #20]
 800628a:	2b01      	cmp	r3, #1
 800628c:	4606      	mov	r6, r0
 800628e:	dd76      	ble.n	800637e <_dtoa_r+0x8de>
 8006290:	2300      	movs	r3, #0
 8006292:	9306      	str	r3, [sp, #24]
 8006294:	6933      	ldr	r3, [r6, #16]
 8006296:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800629a:	6918      	ldr	r0, [r3, #16]
 800629c:	f000 fcd2 	bl	8006c44 <__hi0bits>
 80062a0:	f1c0 0020 	rsb	r0, r0, #32
 80062a4:	9b04      	ldr	r3, [sp, #16]
 80062a6:	4418      	add	r0, r3
 80062a8:	f010 001f 	ands.w	r0, r0, #31
 80062ac:	f000 8086 	beq.w	80063bc <_dtoa_r+0x91c>
 80062b0:	f1c0 0320 	rsb	r3, r0, #32
 80062b4:	2b04      	cmp	r3, #4
 80062b6:	dd7f      	ble.n	80063b8 <_dtoa_r+0x918>
 80062b8:	f1c0 001c 	rsb	r0, r0, #28
 80062bc:	9b04      	ldr	r3, [sp, #16]
 80062be:	4403      	add	r3, r0
 80062c0:	4480      	add	r8, r0
 80062c2:	4405      	add	r5, r0
 80062c4:	9304      	str	r3, [sp, #16]
 80062c6:	f1b8 0f00 	cmp.w	r8, #0
 80062ca:	dd05      	ble.n	80062d8 <_dtoa_r+0x838>
 80062cc:	4659      	mov	r1, fp
 80062ce:	4642      	mov	r2, r8
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 fe1d 	bl	8006f10 <__lshift>
 80062d6:	4683      	mov	fp, r0
 80062d8:	9b04      	ldr	r3, [sp, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	dd05      	ble.n	80062ea <_dtoa_r+0x84a>
 80062de:	4631      	mov	r1, r6
 80062e0:	461a      	mov	r2, r3
 80062e2:	4620      	mov	r0, r4
 80062e4:	f000 fe14 	bl	8006f10 <__lshift>
 80062e8:	4606      	mov	r6, r0
 80062ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d069      	beq.n	80063c4 <_dtoa_r+0x924>
 80062f0:	4631      	mov	r1, r6
 80062f2:	4658      	mov	r0, fp
 80062f4:	f000 fe78 	bl	8006fe8 <__mcmp>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	da63      	bge.n	80063c4 <_dtoa_r+0x924>
 80062fc:	2300      	movs	r3, #0
 80062fe:	4659      	mov	r1, fp
 8006300:	220a      	movs	r2, #10
 8006302:	4620      	mov	r0, r4
 8006304:	f000 fc54 	bl	8006bb0 <__multadd>
 8006308:	9b08      	ldr	r3, [sp, #32]
 800630a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800630e:	4683      	mov	fp, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 818f 	beq.w	8006634 <_dtoa_r+0xb94>
 8006316:	4639      	mov	r1, r7
 8006318:	2300      	movs	r3, #0
 800631a:	220a      	movs	r2, #10
 800631c:	4620      	mov	r0, r4
 800631e:	f000 fc47 	bl	8006bb0 <__multadd>
 8006322:	f1b9 0f00 	cmp.w	r9, #0
 8006326:	4607      	mov	r7, r0
 8006328:	f300 808e 	bgt.w	8006448 <_dtoa_r+0x9a8>
 800632c:	9b05      	ldr	r3, [sp, #20]
 800632e:	2b02      	cmp	r3, #2
 8006330:	dc50      	bgt.n	80063d4 <_dtoa_r+0x934>
 8006332:	e089      	b.n	8006448 <_dtoa_r+0x9a8>
 8006334:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800633a:	e75d      	b.n	80061f8 <_dtoa_r+0x758>
 800633c:	9b01      	ldr	r3, [sp, #4]
 800633e:	1e5e      	subs	r6, r3, #1
 8006340:	9b06      	ldr	r3, [sp, #24]
 8006342:	42b3      	cmp	r3, r6
 8006344:	bfbf      	itttt	lt
 8006346:	9b06      	ldrlt	r3, [sp, #24]
 8006348:	9606      	strlt	r6, [sp, #24]
 800634a:	1af2      	sublt	r2, r6, r3
 800634c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800634e:	bfb6      	itet	lt
 8006350:	189b      	addlt	r3, r3, r2
 8006352:	1b9e      	subge	r6, r3, r6
 8006354:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006356:	9b01      	ldr	r3, [sp, #4]
 8006358:	bfb8      	it	lt
 800635a:	2600      	movlt	r6, #0
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfb5      	itete	lt
 8006360:	eba8 0503 	sublt.w	r5, r8, r3
 8006364:	9b01      	ldrge	r3, [sp, #4]
 8006366:	2300      	movlt	r3, #0
 8006368:	4645      	movge	r5, r8
 800636a:	e747      	b.n	80061fc <_dtoa_r+0x75c>
 800636c:	9e06      	ldr	r6, [sp, #24]
 800636e:	9f08      	ldr	r7, [sp, #32]
 8006370:	4645      	mov	r5, r8
 8006372:	e74c      	b.n	800620e <_dtoa_r+0x76e>
 8006374:	9a06      	ldr	r2, [sp, #24]
 8006376:	e775      	b.n	8006264 <_dtoa_r+0x7c4>
 8006378:	9b05      	ldr	r3, [sp, #20]
 800637a:	2b01      	cmp	r3, #1
 800637c:	dc18      	bgt.n	80063b0 <_dtoa_r+0x910>
 800637e:	9b02      	ldr	r3, [sp, #8]
 8006380:	b9b3      	cbnz	r3, 80063b0 <_dtoa_r+0x910>
 8006382:	9b03      	ldr	r3, [sp, #12]
 8006384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006388:	b9a3      	cbnz	r3, 80063b4 <_dtoa_r+0x914>
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006390:	0d1b      	lsrs	r3, r3, #20
 8006392:	051b      	lsls	r3, r3, #20
 8006394:	b12b      	cbz	r3, 80063a2 <_dtoa_r+0x902>
 8006396:	9b04      	ldr	r3, [sp, #16]
 8006398:	3301      	adds	r3, #1
 800639a:	9304      	str	r3, [sp, #16]
 800639c:	f108 0801 	add.w	r8, r8, #1
 80063a0:	2301      	movs	r3, #1
 80063a2:	9306      	str	r3, [sp, #24]
 80063a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f47f af74 	bne.w	8006294 <_dtoa_r+0x7f4>
 80063ac:	2001      	movs	r0, #1
 80063ae:	e779      	b.n	80062a4 <_dtoa_r+0x804>
 80063b0:	2300      	movs	r3, #0
 80063b2:	e7f6      	b.n	80063a2 <_dtoa_r+0x902>
 80063b4:	9b02      	ldr	r3, [sp, #8]
 80063b6:	e7f4      	b.n	80063a2 <_dtoa_r+0x902>
 80063b8:	d085      	beq.n	80062c6 <_dtoa_r+0x826>
 80063ba:	4618      	mov	r0, r3
 80063bc:	301c      	adds	r0, #28
 80063be:	e77d      	b.n	80062bc <_dtoa_r+0x81c>
 80063c0:	40240000 	.word	0x40240000
 80063c4:	9b01      	ldr	r3, [sp, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	dc38      	bgt.n	800643c <_dtoa_r+0x99c>
 80063ca:	9b05      	ldr	r3, [sp, #20]
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	dd35      	ble.n	800643c <_dtoa_r+0x99c>
 80063d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80063d4:	f1b9 0f00 	cmp.w	r9, #0
 80063d8:	d10d      	bne.n	80063f6 <_dtoa_r+0x956>
 80063da:	4631      	mov	r1, r6
 80063dc:	464b      	mov	r3, r9
 80063de:	2205      	movs	r2, #5
 80063e0:	4620      	mov	r0, r4
 80063e2:	f000 fbe5 	bl	8006bb0 <__multadd>
 80063e6:	4601      	mov	r1, r0
 80063e8:	4606      	mov	r6, r0
 80063ea:	4658      	mov	r0, fp
 80063ec:	f000 fdfc 	bl	8006fe8 <__mcmp>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	f73f adbd 	bgt.w	8005f70 <_dtoa_r+0x4d0>
 80063f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f8:	9d00      	ldr	r5, [sp, #0]
 80063fa:	ea6f 0a03 	mvn.w	sl, r3
 80063fe:	f04f 0800 	mov.w	r8, #0
 8006402:	4631      	mov	r1, r6
 8006404:	4620      	mov	r0, r4
 8006406:	f000 fbb1 	bl	8006b6c <_Bfree>
 800640a:	2f00      	cmp	r7, #0
 800640c:	f43f aeb4 	beq.w	8006178 <_dtoa_r+0x6d8>
 8006410:	f1b8 0f00 	cmp.w	r8, #0
 8006414:	d005      	beq.n	8006422 <_dtoa_r+0x982>
 8006416:	45b8      	cmp	r8, r7
 8006418:	d003      	beq.n	8006422 <_dtoa_r+0x982>
 800641a:	4641      	mov	r1, r8
 800641c:	4620      	mov	r0, r4
 800641e:	f000 fba5 	bl	8006b6c <_Bfree>
 8006422:	4639      	mov	r1, r7
 8006424:	4620      	mov	r0, r4
 8006426:	f000 fba1 	bl	8006b6c <_Bfree>
 800642a:	e6a5      	b.n	8006178 <_dtoa_r+0x6d8>
 800642c:	2600      	movs	r6, #0
 800642e:	4637      	mov	r7, r6
 8006430:	e7e1      	b.n	80063f6 <_dtoa_r+0x956>
 8006432:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006434:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006438:	4637      	mov	r7, r6
 800643a:	e599      	b.n	8005f70 <_dtoa_r+0x4d0>
 800643c:	9b08      	ldr	r3, [sp, #32]
 800643e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 80fd 	beq.w	8006642 <_dtoa_r+0xba2>
 8006448:	2d00      	cmp	r5, #0
 800644a:	dd05      	ble.n	8006458 <_dtoa_r+0x9b8>
 800644c:	4639      	mov	r1, r7
 800644e:	462a      	mov	r2, r5
 8006450:	4620      	mov	r0, r4
 8006452:	f000 fd5d 	bl	8006f10 <__lshift>
 8006456:	4607      	mov	r7, r0
 8006458:	9b06      	ldr	r3, [sp, #24]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d05c      	beq.n	8006518 <_dtoa_r+0xa78>
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4620      	mov	r0, r4
 8006462:	f000 fb43 	bl	8006aec <_Balloc>
 8006466:	4605      	mov	r5, r0
 8006468:	b928      	cbnz	r0, 8006476 <_dtoa_r+0x9d6>
 800646a:	4b80      	ldr	r3, [pc, #512]	; (800666c <_dtoa_r+0xbcc>)
 800646c:	4602      	mov	r2, r0
 800646e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006472:	f7ff bb2e 	b.w	8005ad2 <_dtoa_r+0x32>
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	3202      	adds	r2, #2
 800647a:	0092      	lsls	r2, r2, #2
 800647c:	f107 010c 	add.w	r1, r7, #12
 8006480:	300c      	adds	r0, #12
 8006482:	f000 fb25 	bl	8006ad0 <memcpy>
 8006486:	2201      	movs	r2, #1
 8006488:	4629      	mov	r1, r5
 800648a:	4620      	mov	r0, r4
 800648c:	f000 fd40 	bl	8006f10 <__lshift>
 8006490:	9b00      	ldr	r3, [sp, #0]
 8006492:	3301      	adds	r3, #1
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	9b00      	ldr	r3, [sp, #0]
 8006498:	444b      	add	r3, r9
 800649a:	9307      	str	r3, [sp, #28]
 800649c:	9b02      	ldr	r3, [sp, #8]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	46b8      	mov	r8, r7
 80064a4:	9306      	str	r3, [sp, #24]
 80064a6:	4607      	mov	r7, r0
 80064a8:	9b01      	ldr	r3, [sp, #4]
 80064aa:	4631      	mov	r1, r6
 80064ac:	3b01      	subs	r3, #1
 80064ae:	4658      	mov	r0, fp
 80064b0:	9302      	str	r3, [sp, #8]
 80064b2:	f7ff fa67 	bl	8005984 <quorem>
 80064b6:	4603      	mov	r3, r0
 80064b8:	3330      	adds	r3, #48	; 0x30
 80064ba:	9004      	str	r0, [sp, #16]
 80064bc:	4641      	mov	r1, r8
 80064be:	4658      	mov	r0, fp
 80064c0:	9308      	str	r3, [sp, #32]
 80064c2:	f000 fd91 	bl	8006fe8 <__mcmp>
 80064c6:	463a      	mov	r2, r7
 80064c8:	4681      	mov	r9, r0
 80064ca:	4631      	mov	r1, r6
 80064cc:	4620      	mov	r0, r4
 80064ce:	f000 fda7 	bl	8007020 <__mdiff>
 80064d2:	68c2      	ldr	r2, [r0, #12]
 80064d4:	9b08      	ldr	r3, [sp, #32]
 80064d6:	4605      	mov	r5, r0
 80064d8:	bb02      	cbnz	r2, 800651c <_dtoa_r+0xa7c>
 80064da:	4601      	mov	r1, r0
 80064dc:	4658      	mov	r0, fp
 80064de:	f000 fd83 	bl	8006fe8 <__mcmp>
 80064e2:	9b08      	ldr	r3, [sp, #32]
 80064e4:	4602      	mov	r2, r0
 80064e6:	4629      	mov	r1, r5
 80064e8:	4620      	mov	r0, r4
 80064ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80064ee:	f000 fb3d 	bl	8006b6c <_Bfree>
 80064f2:	9b05      	ldr	r3, [sp, #20]
 80064f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064f6:	9d01      	ldr	r5, [sp, #4]
 80064f8:	ea43 0102 	orr.w	r1, r3, r2
 80064fc:	9b06      	ldr	r3, [sp, #24]
 80064fe:	430b      	orrs	r3, r1
 8006500:	9b08      	ldr	r3, [sp, #32]
 8006502:	d10d      	bne.n	8006520 <_dtoa_r+0xa80>
 8006504:	2b39      	cmp	r3, #57	; 0x39
 8006506:	d029      	beq.n	800655c <_dtoa_r+0xabc>
 8006508:	f1b9 0f00 	cmp.w	r9, #0
 800650c:	dd01      	ble.n	8006512 <_dtoa_r+0xa72>
 800650e:	9b04      	ldr	r3, [sp, #16]
 8006510:	3331      	adds	r3, #49	; 0x31
 8006512:	9a02      	ldr	r2, [sp, #8]
 8006514:	7013      	strb	r3, [r2, #0]
 8006516:	e774      	b.n	8006402 <_dtoa_r+0x962>
 8006518:	4638      	mov	r0, r7
 800651a:	e7b9      	b.n	8006490 <_dtoa_r+0x9f0>
 800651c:	2201      	movs	r2, #1
 800651e:	e7e2      	b.n	80064e6 <_dtoa_r+0xa46>
 8006520:	f1b9 0f00 	cmp.w	r9, #0
 8006524:	db06      	blt.n	8006534 <_dtoa_r+0xa94>
 8006526:	9905      	ldr	r1, [sp, #20]
 8006528:	ea41 0909 	orr.w	r9, r1, r9
 800652c:	9906      	ldr	r1, [sp, #24]
 800652e:	ea59 0101 	orrs.w	r1, r9, r1
 8006532:	d120      	bne.n	8006576 <_dtoa_r+0xad6>
 8006534:	2a00      	cmp	r2, #0
 8006536:	ddec      	ble.n	8006512 <_dtoa_r+0xa72>
 8006538:	4659      	mov	r1, fp
 800653a:	2201      	movs	r2, #1
 800653c:	4620      	mov	r0, r4
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	f000 fce6 	bl	8006f10 <__lshift>
 8006544:	4631      	mov	r1, r6
 8006546:	4683      	mov	fp, r0
 8006548:	f000 fd4e 	bl	8006fe8 <__mcmp>
 800654c:	2800      	cmp	r0, #0
 800654e:	9b01      	ldr	r3, [sp, #4]
 8006550:	dc02      	bgt.n	8006558 <_dtoa_r+0xab8>
 8006552:	d1de      	bne.n	8006512 <_dtoa_r+0xa72>
 8006554:	07da      	lsls	r2, r3, #31
 8006556:	d5dc      	bpl.n	8006512 <_dtoa_r+0xa72>
 8006558:	2b39      	cmp	r3, #57	; 0x39
 800655a:	d1d8      	bne.n	800650e <_dtoa_r+0xa6e>
 800655c:	9a02      	ldr	r2, [sp, #8]
 800655e:	2339      	movs	r3, #57	; 0x39
 8006560:	7013      	strb	r3, [r2, #0]
 8006562:	462b      	mov	r3, r5
 8006564:	461d      	mov	r5, r3
 8006566:	3b01      	subs	r3, #1
 8006568:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800656c:	2a39      	cmp	r2, #57	; 0x39
 800656e:	d050      	beq.n	8006612 <_dtoa_r+0xb72>
 8006570:	3201      	adds	r2, #1
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	e745      	b.n	8006402 <_dtoa_r+0x962>
 8006576:	2a00      	cmp	r2, #0
 8006578:	dd03      	ble.n	8006582 <_dtoa_r+0xae2>
 800657a:	2b39      	cmp	r3, #57	; 0x39
 800657c:	d0ee      	beq.n	800655c <_dtoa_r+0xabc>
 800657e:	3301      	adds	r3, #1
 8006580:	e7c7      	b.n	8006512 <_dtoa_r+0xa72>
 8006582:	9a01      	ldr	r2, [sp, #4]
 8006584:	9907      	ldr	r1, [sp, #28]
 8006586:	f802 3c01 	strb.w	r3, [r2, #-1]
 800658a:	428a      	cmp	r2, r1
 800658c:	d02a      	beq.n	80065e4 <_dtoa_r+0xb44>
 800658e:	4659      	mov	r1, fp
 8006590:	2300      	movs	r3, #0
 8006592:	220a      	movs	r2, #10
 8006594:	4620      	mov	r0, r4
 8006596:	f000 fb0b 	bl	8006bb0 <__multadd>
 800659a:	45b8      	cmp	r8, r7
 800659c:	4683      	mov	fp, r0
 800659e:	f04f 0300 	mov.w	r3, #0
 80065a2:	f04f 020a 	mov.w	r2, #10
 80065a6:	4641      	mov	r1, r8
 80065a8:	4620      	mov	r0, r4
 80065aa:	d107      	bne.n	80065bc <_dtoa_r+0xb1c>
 80065ac:	f000 fb00 	bl	8006bb0 <__multadd>
 80065b0:	4680      	mov	r8, r0
 80065b2:	4607      	mov	r7, r0
 80065b4:	9b01      	ldr	r3, [sp, #4]
 80065b6:	3301      	adds	r3, #1
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	e775      	b.n	80064a8 <_dtoa_r+0xa08>
 80065bc:	f000 faf8 	bl	8006bb0 <__multadd>
 80065c0:	4639      	mov	r1, r7
 80065c2:	4680      	mov	r8, r0
 80065c4:	2300      	movs	r3, #0
 80065c6:	220a      	movs	r2, #10
 80065c8:	4620      	mov	r0, r4
 80065ca:	f000 faf1 	bl	8006bb0 <__multadd>
 80065ce:	4607      	mov	r7, r0
 80065d0:	e7f0      	b.n	80065b4 <_dtoa_r+0xb14>
 80065d2:	f1b9 0f00 	cmp.w	r9, #0
 80065d6:	9a00      	ldr	r2, [sp, #0]
 80065d8:	bfcc      	ite	gt
 80065da:	464d      	movgt	r5, r9
 80065dc:	2501      	movle	r5, #1
 80065de:	4415      	add	r5, r2
 80065e0:	f04f 0800 	mov.w	r8, #0
 80065e4:	4659      	mov	r1, fp
 80065e6:	2201      	movs	r2, #1
 80065e8:	4620      	mov	r0, r4
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	f000 fc90 	bl	8006f10 <__lshift>
 80065f0:	4631      	mov	r1, r6
 80065f2:	4683      	mov	fp, r0
 80065f4:	f000 fcf8 	bl	8006fe8 <__mcmp>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	dcb2      	bgt.n	8006562 <_dtoa_r+0xac2>
 80065fc:	d102      	bne.n	8006604 <_dtoa_r+0xb64>
 80065fe:	9b01      	ldr	r3, [sp, #4]
 8006600:	07db      	lsls	r3, r3, #31
 8006602:	d4ae      	bmi.n	8006562 <_dtoa_r+0xac2>
 8006604:	462b      	mov	r3, r5
 8006606:	461d      	mov	r5, r3
 8006608:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800660c:	2a30      	cmp	r2, #48	; 0x30
 800660e:	d0fa      	beq.n	8006606 <_dtoa_r+0xb66>
 8006610:	e6f7      	b.n	8006402 <_dtoa_r+0x962>
 8006612:	9a00      	ldr	r2, [sp, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d1a5      	bne.n	8006564 <_dtoa_r+0xac4>
 8006618:	f10a 0a01 	add.w	sl, sl, #1
 800661c:	2331      	movs	r3, #49	; 0x31
 800661e:	e779      	b.n	8006514 <_dtoa_r+0xa74>
 8006620:	4b13      	ldr	r3, [pc, #76]	; (8006670 <_dtoa_r+0xbd0>)
 8006622:	f7ff baaf 	b.w	8005b84 <_dtoa_r+0xe4>
 8006626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006628:	2b00      	cmp	r3, #0
 800662a:	f47f aa86 	bne.w	8005b3a <_dtoa_r+0x9a>
 800662e:	4b11      	ldr	r3, [pc, #68]	; (8006674 <_dtoa_r+0xbd4>)
 8006630:	f7ff baa8 	b.w	8005b84 <_dtoa_r+0xe4>
 8006634:	f1b9 0f00 	cmp.w	r9, #0
 8006638:	dc03      	bgt.n	8006642 <_dtoa_r+0xba2>
 800663a:	9b05      	ldr	r3, [sp, #20]
 800663c:	2b02      	cmp	r3, #2
 800663e:	f73f aec9 	bgt.w	80063d4 <_dtoa_r+0x934>
 8006642:	9d00      	ldr	r5, [sp, #0]
 8006644:	4631      	mov	r1, r6
 8006646:	4658      	mov	r0, fp
 8006648:	f7ff f99c 	bl	8005984 <quorem>
 800664c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006650:	f805 3b01 	strb.w	r3, [r5], #1
 8006654:	9a00      	ldr	r2, [sp, #0]
 8006656:	1aaa      	subs	r2, r5, r2
 8006658:	4591      	cmp	r9, r2
 800665a:	ddba      	ble.n	80065d2 <_dtoa_r+0xb32>
 800665c:	4659      	mov	r1, fp
 800665e:	2300      	movs	r3, #0
 8006660:	220a      	movs	r2, #10
 8006662:	4620      	mov	r0, r4
 8006664:	f000 faa4 	bl	8006bb0 <__multadd>
 8006668:	4683      	mov	fp, r0
 800666a:	e7eb      	b.n	8006644 <_dtoa_r+0xba4>
 800666c:	0800814f 	.word	0x0800814f
 8006670:	080080a8 	.word	0x080080a8
 8006674:	080080cc 	.word	0x080080cc

08006678 <__sflush_r>:
 8006678:	898a      	ldrh	r2, [r1, #12]
 800667a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800667e:	4605      	mov	r5, r0
 8006680:	0710      	lsls	r0, r2, #28
 8006682:	460c      	mov	r4, r1
 8006684:	d458      	bmi.n	8006738 <__sflush_r+0xc0>
 8006686:	684b      	ldr	r3, [r1, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	dc05      	bgt.n	8006698 <__sflush_r+0x20>
 800668c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	dc02      	bgt.n	8006698 <__sflush_r+0x20>
 8006692:	2000      	movs	r0, #0
 8006694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800669a:	2e00      	cmp	r6, #0
 800669c:	d0f9      	beq.n	8006692 <__sflush_r+0x1a>
 800669e:	2300      	movs	r3, #0
 80066a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066a4:	682f      	ldr	r7, [r5, #0]
 80066a6:	602b      	str	r3, [r5, #0]
 80066a8:	d032      	beq.n	8006710 <__sflush_r+0x98>
 80066aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	075a      	lsls	r2, r3, #29
 80066b0:	d505      	bpl.n	80066be <__sflush_r+0x46>
 80066b2:	6863      	ldr	r3, [r4, #4]
 80066b4:	1ac0      	subs	r0, r0, r3
 80066b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066b8:	b10b      	cbz	r3, 80066be <__sflush_r+0x46>
 80066ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066bc:	1ac0      	subs	r0, r0, r3
 80066be:	2300      	movs	r3, #0
 80066c0:	4602      	mov	r2, r0
 80066c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066c4:	6a21      	ldr	r1, [r4, #32]
 80066c6:	4628      	mov	r0, r5
 80066c8:	47b0      	blx	r6
 80066ca:	1c43      	adds	r3, r0, #1
 80066cc:	89a3      	ldrh	r3, [r4, #12]
 80066ce:	d106      	bne.n	80066de <__sflush_r+0x66>
 80066d0:	6829      	ldr	r1, [r5, #0]
 80066d2:	291d      	cmp	r1, #29
 80066d4:	d82c      	bhi.n	8006730 <__sflush_r+0xb8>
 80066d6:	4a2a      	ldr	r2, [pc, #168]	; (8006780 <__sflush_r+0x108>)
 80066d8:	40ca      	lsrs	r2, r1
 80066da:	07d6      	lsls	r6, r2, #31
 80066dc:	d528      	bpl.n	8006730 <__sflush_r+0xb8>
 80066de:	2200      	movs	r2, #0
 80066e0:	6062      	str	r2, [r4, #4]
 80066e2:	04d9      	lsls	r1, r3, #19
 80066e4:	6922      	ldr	r2, [r4, #16]
 80066e6:	6022      	str	r2, [r4, #0]
 80066e8:	d504      	bpl.n	80066f4 <__sflush_r+0x7c>
 80066ea:	1c42      	adds	r2, r0, #1
 80066ec:	d101      	bne.n	80066f2 <__sflush_r+0x7a>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	b903      	cbnz	r3, 80066f4 <__sflush_r+0x7c>
 80066f2:	6560      	str	r0, [r4, #84]	; 0x54
 80066f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066f6:	602f      	str	r7, [r5, #0]
 80066f8:	2900      	cmp	r1, #0
 80066fa:	d0ca      	beq.n	8006692 <__sflush_r+0x1a>
 80066fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006700:	4299      	cmp	r1, r3
 8006702:	d002      	beq.n	800670a <__sflush_r+0x92>
 8006704:	4628      	mov	r0, r5
 8006706:	f000 fd7f 	bl	8007208 <_free_r>
 800670a:	2000      	movs	r0, #0
 800670c:	6360      	str	r0, [r4, #52]	; 0x34
 800670e:	e7c1      	b.n	8006694 <__sflush_r+0x1c>
 8006710:	6a21      	ldr	r1, [r4, #32]
 8006712:	2301      	movs	r3, #1
 8006714:	4628      	mov	r0, r5
 8006716:	47b0      	blx	r6
 8006718:	1c41      	adds	r1, r0, #1
 800671a:	d1c7      	bne.n	80066ac <__sflush_r+0x34>
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0c4      	beq.n	80066ac <__sflush_r+0x34>
 8006722:	2b1d      	cmp	r3, #29
 8006724:	d001      	beq.n	800672a <__sflush_r+0xb2>
 8006726:	2b16      	cmp	r3, #22
 8006728:	d101      	bne.n	800672e <__sflush_r+0xb6>
 800672a:	602f      	str	r7, [r5, #0]
 800672c:	e7b1      	b.n	8006692 <__sflush_r+0x1a>
 800672e:	89a3      	ldrh	r3, [r4, #12]
 8006730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006734:	81a3      	strh	r3, [r4, #12]
 8006736:	e7ad      	b.n	8006694 <__sflush_r+0x1c>
 8006738:	690f      	ldr	r7, [r1, #16]
 800673a:	2f00      	cmp	r7, #0
 800673c:	d0a9      	beq.n	8006692 <__sflush_r+0x1a>
 800673e:	0793      	lsls	r3, r2, #30
 8006740:	680e      	ldr	r6, [r1, #0]
 8006742:	bf08      	it	eq
 8006744:	694b      	ldreq	r3, [r1, #20]
 8006746:	600f      	str	r7, [r1, #0]
 8006748:	bf18      	it	ne
 800674a:	2300      	movne	r3, #0
 800674c:	eba6 0807 	sub.w	r8, r6, r7
 8006750:	608b      	str	r3, [r1, #8]
 8006752:	f1b8 0f00 	cmp.w	r8, #0
 8006756:	dd9c      	ble.n	8006692 <__sflush_r+0x1a>
 8006758:	6a21      	ldr	r1, [r4, #32]
 800675a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800675c:	4643      	mov	r3, r8
 800675e:	463a      	mov	r2, r7
 8006760:	4628      	mov	r0, r5
 8006762:	47b0      	blx	r6
 8006764:	2800      	cmp	r0, #0
 8006766:	dc06      	bgt.n	8006776 <__sflush_r+0xfe>
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	f04f 30ff 	mov.w	r0, #4294967295
 8006774:	e78e      	b.n	8006694 <__sflush_r+0x1c>
 8006776:	4407      	add	r7, r0
 8006778:	eba8 0800 	sub.w	r8, r8, r0
 800677c:	e7e9      	b.n	8006752 <__sflush_r+0xda>
 800677e:	bf00      	nop
 8006780:	20400001 	.word	0x20400001

08006784 <_fflush_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	690b      	ldr	r3, [r1, #16]
 8006788:	4605      	mov	r5, r0
 800678a:	460c      	mov	r4, r1
 800678c:	b913      	cbnz	r3, 8006794 <_fflush_r+0x10>
 800678e:	2500      	movs	r5, #0
 8006790:	4628      	mov	r0, r5
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	b118      	cbz	r0, 800679e <_fflush_r+0x1a>
 8006796:	6983      	ldr	r3, [r0, #24]
 8006798:	b90b      	cbnz	r3, 800679e <_fflush_r+0x1a>
 800679a:	f000 f887 	bl	80068ac <__sinit>
 800679e:	4b14      	ldr	r3, [pc, #80]	; (80067f0 <_fflush_r+0x6c>)
 80067a0:	429c      	cmp	r4, r3
 80067a2:	d11b      	bne.n	80067dc <_fflush_r+0x58>
 80067a4:	686c      	ldr	r4, [r5, #4]
 80067a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0ef      	beq.n	800678e <_fflush_r+0xa>
 80067ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067b0:	07d0      	lsls	r0, r2, #31
 80067b2:	d404      	bmi.n	80067be <_fflush_r+0x3a>
 80067b4:	0599      	lsls	r1, r3, #22
 80067b6:	d402      	bmi.n	80067be <_fflush_r+0x3a>
 80067b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ba:	f000 f91a 	bl	80069f2 <__retarget_lock_acquire_recursive>
 80067be:	4628      	mov	r0, r5
 80067c0:	4621      	mov	r1, r4
 80067c2:	f7ff ff59 	bl	8006678 <__sflush_r>
 80067c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067c8:	07da      	lsls	r2, r3, #31
 80067ca:	4605      	mov	r5, r0
 80067cc:	d4e0      	bmi.n	8006790 <_fflush_r+0xc>
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	059b      	lsls	r3, r3, #22
 80067d2:	d4dd      	bmi.n	8006790 <_fflush_r+0xc>
 80067d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067d6:	f000 f90d 	bl	80069f4 <__retarget_lock_release_recursive>
 80067da:	e7d9      	b.n	8006790 <_fflush_r+0xc>
 80067dc:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <_fflush_r+0x70>)
 80067de:	429c      	cmp	r4, r3
 80067e0:	d101      	bne.n	80067e6 <_fflush_r+0x62>
 80067e2:	68ac      	ldr	r4, [r5, #8]
 80067e4:	e7df      	b.n	80067a6 <_fflush_r+0x22>
 80067e6:	4b04      	ldr	r3, [pc, #16]	; (80067f8 <_fflush_r+0x74>)
 80067e8:	429c      	cmp	r4, r3
 80067ea:	bf08      	it	eq
 80067ec:	68ec      	ldreq	r4, [r5, #12]
 80067ee:	e7da      	b.n	80067a6 <_fflush_r+0x22>
 80067f0:	08008180 	.word	0x08008180
 80067f4:	080081a0 	.word	0x080081a0
 80067f8:	08008160 	.word	0x08008160

080067fc <std>:
 80067fc:	2300      	movs	r3, #0
 80067fe:	b510      	push	{r4, lr}
 8006800:	4604      	mov	r4, r0
 8006802:	e9c0 3300 	strd	r3, r3, [r0]
 8006806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800680a:	6083      	str	r3, [r0, #8]
 800680c:	8181      	strh	r1, [r0, #12]
 800680e:	6643      	str	r3, [r0, #100]	; 0x64
 8006810:	81c2      	strh	r2, [r0, #14]
 8006812:	6183      	str	r3, [r0, #24]
 8006814:	4619      	mov	r1, r3
 8006816:	2208      	movs	r2, #8
 8006818:	305c      	adds	r0, #92	; 0x5c
 800681a:	f7fe fadd 	bl	8004dd8 <memset>
 800681e:	4b05      	ldr	r3, [pc, #20]	; (8006834 <std+0x38>)
 8006820:	6263      	str	r3, [r4, #36]	; 0x24
 8006822:	4b05      	ldr	r3, [pc, #20]	; (8006838 <std+0x3c>)
 8006824:	62a3      	str	r3, [r4, #40]	; 0x28
 8006826:	4b05      	ldr	r3, [pc, #20]	; (800683c <std+0x40>)
 8006828:	62e3      	str	r3, [r4, #44]	; 0x2c
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <std+0x44>)
 800682c:	6224      	str	r4, [r4, #32]
 800682e:	6323      	str	r3, [r4, #48]	; 0x30
 8006830:	bd10      	pop	{r4, pc}
 8006832:	bf00      	nop
 8006834:	080076c1 	.word	0x080076c1
 8006838:	080076e3 	.word	0x080076e3
 800683c:	0800771b 	.word	0x0800771b
 8006840:	0800773f 	.word	0x0800773f

08006844 <_cleanup_r>:
 8006844:	4901      	ldr	r1, [pc, #4]	; (800684c <_cleanup_r+0x8>)
 8006846:	f000 b8af 	b.w	80069a8 <_fwalk_reent>
 800684a:	bf00      	nop
 800684c:	08006785 	.word	0x08006785

08006850 <__sfmoreglue>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	1e4a      	subs	r2, r1, #1
 8006854:	2568      	movs	r5, #104	; 0x68
 8006856:	4355      	muls	r5, r2
 8006858:	460e      	mov	r6, r1
 800685a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800685e:	f000 fd23 	bl	80072a8 <_malloc_r>
 8006862:	4604      	mov	r4, r0
 8006864:	b140      	cbz	r0, 8006878 <__sfmoreglue+0x28>
 8006866:	2100      	movs	r1, #0
 8006868:	e9c0 1600 	strd	r1, r6, [r0]
 800686c:	300c      	adds	r0, #12
 800686e:	60a0      	str	r0, [r4, #8]
 8006870:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006874:	f7fe fab0 	bl	8004dd8 <memset>
 8006878:	4620      	mov	r0, r4
 800687a:	bd70      	pop	{r4, r5, r6, pc}

0800687c <__sfp_lock_acquire>:
 800687c:	4801      	ldr	r0, [pc, #4]	; (8006884 <__sfp_lock_acquire+0x8>)
 800687e:	f000 b8b8 	b.w	80069f2 <__retarget_lock_acquire_recursive>
 8006882:	bf00      	nop
 8006884:	20000424 	.word	0x20000424

08006888 <__sfp_lock_release>:
 8006888:	4801      	ldr	r0, [pc, #4]	; (8006890 <__sfp_lock_release+0x8>)
 800688a:	f000 b8b3 	b.w	80069f4 <__retarget_lock_release_recursive>
 800688e:	bf00      	nop
 8006890:	20000424 	.word	0x20000424

08006894 <__sinit_lock_acquire>:
 8006894:	4801      	ldr	r0, [pc, #4]	; (800689c <__sinit_lock_acquire+0x8>)
 8006896:	f000 b8ac 	b.w	80069f2 <__retarget_lock_acquire_recursive>
 800689a:	bf00      	nop
 800689c:	2000041f 	.word	0x2000041f

080068a0 <__sinit_lock_release>:
 80068a0:	4801      	ldr	r0, [pc, #4]	; (80068a8 <__sinit_lock_release+0x8>)
 80068a2:	f000 b8a7 	b.w	80069f4 <__retarget_lock_release_recursive>
 80068a6:	bf00      	nop
 80068a8:	2000041f 	.word	0x2000041f

080068ac <__sinit>:
 80068ac:	b510      	push	{r4, lr}
 80068ae:	4604      	mov	r4, r0
 80068b0:	f7ff fff0 	bl	8006894 <__sinit_lock_acquire>
 80068b4:	69a3      	ldr	r3, [r4, #24]
 80068b6:	b11b      	cbz	r3, 80068c0 <__sinit+0x14>
 80068b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068bc:	f7ff bff0 	b.w	80068a0 <__sinit_lock_release>
 80068c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068c4:	6523      	str	r3, [r4, #80]	; 0x50
 80068c6:	4b13      	ldr	r3, [pc, #76]	; (8006914 <__sinit+0x68>)
 80068c8:	4a13      	ldr	r2, [pc, #76]	; (8006918 <__sinit+0x6c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80068ce:	42a3      	cmp	r3, r4
 80068d0:	bf04      	itt	eq
 80068d2:	2301      	moveq	r3, #1
 80068d4:	61a3      	streq	r3, [r4, #24]
 80068d6:	4620      	mov	r0, r4
 80068d8:	f000 f820 	bl	800691c <__sfp>
 80068dc:	6060      	str	r0, [r4, #4]
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 f81c 	bl	800691c <__sfp>
 80068e4:	60a0      	str	r0, [r4, #8]
 80068e6:	4620      	mov	r0, r4
 80068e8:	f000 f818 	bl	800691c <__sfp>
 80068ec:	2200      	movs	r2, #0
 80068ee:	60e0      	str	r0, [r4, #12]
 80068f0:	2104      	movs	r1, #4
 80068f2:	6860      	ldr	r0, [r4, #4]
 80068f4:	f7ff ff82 	bl	80067fc <std>
 80068f8:	68a0      	ldr	r0, [r4, #8]
 80068fa:	2201      	movs	r2, #1
 80068fc:	2109      	movs	r1, #9
 80068fe:	f7ff ff7d 	bl	80067fc <std>
 8006902:	68e0      	ldr	r0, [r4, #12]
 8006904:	2202      	movs	r2, #2
 8006906:	2112      	movs	r1, #18
 8006908:	f7ff ff78 	bl	80067fc <std>
 800690c:	2301      	movs	r3, #1
 800690e:	61a3      	str	r3, [r4, #24]
 8006910:	e7d2      	b.n	80068b8 <__sinit+0xc>
 8006912:	bf00      	nop
 8006914:	08008094 	.word	0x08008094
 8006918:	08006845 	.word	0x08006845

0800691c <__sfp>:
 800691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691e:	4607      	mov	r7, r0
 8006920:	f7ff ffac 	bl	800687c <__sfp_lock_acquire>
 8006924:	4b1e      	ldr	r3, [pc, #120]	; (80069a0 <__sfp+0x84>)
 8006926:	681e      	ldr	r6, [r3, #0]
 8006928:	69b3      	ldr	r3, [r6, #24]
 800692a:	b913      	cbnz	r3, 8006932 <__sfp+0x16>
 800692c:	4630      	mov	r0, r6
 800692e:	f7ff ffbd 	bl	80068ac <__sinit>
 8006932:	3648      	adds	r6, #72	; 0x48
 8006934:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006938:	3b01      	subs	r3, #1
 800693a:	d503      	bpl.n	8006944 <__sfp+0x28>
 800693c:	6833      	ldr	r3, [r6, #0]
 800693e:	b30b      	cbz	r3, 8006984 <__sfp+0x68>
 8006940:	6836      	ldr	r6, [r6, #0]
 8006942:	e7f7      	b.n	8006934 <__sfp+0x18>
 8006944:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006948:	b9d5      	cbnz	r5, 8006980 <__sfp+0x64>
 800694a:	4b16      	ldr	r3, [pc, #88]	; (80069a4 <__sfp+0x88>)
 800694c:	60e3      	str	r3, [r4, #12]
 800694e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006952:	6665      	str	r5, [r4, #100]	; 0x64
 8006954:	f000 f84c 	bl	80069f0 <__retarget_lock_init_recursive>
 8006958:	f7ff ff96 	bl	8006888 <__sfp_lock_release>
 800695c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006960:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006964:	6025      	str	r5, [r4, #0]
 8006966:	61a5      	str	r5, [r4, #24]
 8006968:	2208      	movs	r2, #8
 800696a:	4629      	mov	r1, r5
 800696c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006970:	f7fe fa32 	bl	8004dd8 <memset>
 8006974:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006978:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800697c:	4620      	mov	r0, r4
 800697e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006980:	3468      	adds	r4, #104	; 0x68
 8006982:	e7d9      	b.n	8006938 <__sfp+0x1c>
 8006984:	2104      	movs	r1, #4
 8006986:	4638      	mov	r0, r7
 8006988:	f7ff ff62 	bl	8006850 <__sfmoreglue>
 800698c:	4604      	mov	r4, r0
 800698e:	6030      	str	r0, [r6, #0]
 8006990:	2800      	cmp	r0, #0
 8006992:	d1d5      	bne.n	8006940 <__sfp+0x24>
 8006994:	f7ff ff78 	bl	8006888 <__sfp_lock_release>
 8006998:	230c      	movs	r3, #12
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	e7ee      	b.n	800697c <__sfp+0x60>
 800699e:	bf00      	nop
 80069a0:	08008094 	.word	0x08008094
 80069a4:	ffff0001 	.word	0xffff0001

080069a8 <_fwalk_reent>:
 80069a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ac:	4606      	mov	r6, r0
 80069ae:	4688      	mov	r8, r1
 80069b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069b4:	2700      	movs	r7, #0
 80069b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069ba:	f1b9 0901 	subs.w	r9, r9, #1
 80069be:	d505      	bpl.n	80069cc <_fwalk_reent+0x24>
 80069c0:	6824      	ldr	r4, [r4, #0]
 80069c2:	2c00      	cmp	r4, #0
 80069c4:	d1f7      	bne.n	80069b6 <_fwalk_reent+0xe>
 80069c6:	4638      	mov	r0, r7
 80069c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069cc:	89ab      	ldrh	r3, [r5, #12]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d907      	bls.n	80069e2 <_fwalk_reent+0x3a>
 80069d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069d6:	3301      	adds	r3, #1
 80069d8:	d003      	beq.n	80069e2 <_fwalk_reent+0x3a>
 80069da:	4629      	mov	r1, r5
 80069dc:	4630      	mov	r0, r6
 80069de:	47c0      	blx	r8
 80069e0:	4307      	orrs	r7, r0
 80069e2:	3568      	adds	r5, #104	; 0x68
 80069e4:	e7e9      	b.n	80069ba <_fwalk_reent+0x12>
	...

080069e8 <_localeconv_r>:
 80069e8:	4800      	ldr	r0, [pc, #0]	; (80069ec <_localeconv_r+0x4>)
 80069ea:	4770      	bx	lr
 80069ec:	200001f0 	.word	0x200001f0

080069f0 <__retarget_lock_init_recursive>:
 80069f0:	4770      	bx	lr

080069f2 <__retarget_lock_acquire_recursive>:
 80069f2:	4770      	bx	lr

080069f4 <__retarget_lock_release_recursive>:
 80069f4:	4770      	bx	lr

080069f6 <__swhatbuf_r>:
 80069f6:	b570      	push	{r4, r5, r6, lr}
 80069f8:	460e      	mov	r6, r1
 80069fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069fe:	2900      	cmp	r1, #0
 8006a00:	b096      	sub	sp, #88	; 0x58
 8006a02:	4614      	mov	r4, r2
 8006a04:	461d      	mov	r5, r3
 8006a06:	da07      	bge.n	8006a18 <__swhatbuf_r+0x22>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	602b      	str	r3, [r5, #0]
 8006a0c:	89b3      	ldrh	r3, [r6, #12]
 8006a0e:	061a      	lsls	r2, r3, #24
 8006a10:	d410      	bmi.n	8006a34 <__swhatbuf_r+0x3e>
 8006a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a16:	e00e      	b.n	8006a36 <__swhatbuf_r+0x40>
 8006a18:	466a      	mov	r2, sp
 8006a1a:	f000 fee7 	bl	80077ec <_fstat_r>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	dbf2      	blt.n	8006a08 <__swhatbuf_r+0x12>
 8006a22:	9a01      	ldr	r2, [sp, #4]
 8006a24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a2c:	425a      	negs	r2, r3
 8006a2e:	415a      	adcs	r2, r3
 8006a30:	602a      	str	r2, [r5, #0]
 8006a32:	e7ee      	b.n	8006a12 <__swhatbuf_r+0x1c>
 8006a34:	2340      	movs	r3, #64	; 0x40
 8006a36:	2000      	movs	r0, #0
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	b016      	add	sp, #88	; 0x58
 8006a3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a40 <__smakebuf_r>:
 8006a40:	898b      	ldrh	r3, [r1, #12]
 8006a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a44:	079d      	lsls	r5, r3, #30
 8006a46:	4606      	mov	r6, r0
 8006a48:	460c      	mov	r4, r1
 8006a4a:	d507      	bpl.n	8006a5c <__smakebuf_r+0x1c>
 8006a4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	6123      	str	r3, [r4, #16]
 8006a54:	2301      	movs	r3, #1
 8006a56:	6163      	str	r3, [r4, #20]
 8006a58:	b002      	add	sp, #8
 8006a5a:	bd70      	pop	{r4, r5, r6, pc}
 8006a5c:	ab01      	add	r3, sp, #4
 8006a5e:	466a      	mov	r2, sp
 8006a60:	f7ff ffc9 	bl	80069f6 <__swhatbuf_r>
 8006a64:	9900      	ldr	r1, [sp, #0]
 8006a66:	4605      	mov	r5, r0
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f000 fc1d 	bl	80072a8 <_malloc_r>
 8006a6e:	b948      	cbnz	r0, 8006a84 <__smakebuf_r+0x44>
 8006a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a74:	059a      	lsls	r2, r3, #22
 8006a76:	d4ef      	bmi.n	8006a58 <__smakebuf_r+0x18>
 8006a78:	f023 0303 	bic.w	r3, r3, #3
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	81a3      	strh	r3, [r4, #12]
 8006a82:	e7e3      	b.n	8006a4c <__smakebuf_r+0xc>
 8006a84:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <__smakebuf_r+0x7c>)
 8006a86:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	6020      	str	r0, [r4, #0]
 8006a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a90:	81a3      	strh	r3, [r4, #12]
 8006a92:	9b00      	ldr	r3, [sp, #0]
 8006a94:	6163      	str	r3, [r4, #20]
 8006a96:	9b01      	ldr	r3, [sp, #4]
 8006a98:	6120      	str	r0, [r4, #16]
 8006a9a:	b15b      	cbz	r3, 8006ab4 <__smakebuf_r+0x74>
 8006a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f000 feb5 	bl	8007810 <_isatty_r>
 8006aa6:	b128      	cbz	r0, 8006ab4 <__smakebuf_r+0x74>
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	f023 0303 	bic.w	r3, r3, #3
 8006aae:	f043 0301 	orr.w	r3, r3, #1
 8006ab2:	81a3      	strh	r3, [r4, #12]
 8006ab4:	89a0      	ldrh	r0, [r4, #12]
 8006ab6:	4305      	orrs	r5, r0
 8006ab8:	81a5      	strh	r5, [r4, #12]
 8006aba:	e7cd      	b.n	8006a58 <__smakebuf_r+0x18>
 8006abc:	08006845 	.word	0x08006845

08006ac0 <malloc>:
 8006ac0:	4b02      	ldr	r3, [pc, #8]	; (8006acc <malloc+0xc>)
 8006ac2:	4601      	mov	r1, r0
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	f000 bbef 	b.w	80072a8 <_malloc_r>
 8006aca:	bf00      	nop
 8006acc:	2000009c 	.word	0x2000009c

08006ad0 <memcpy>:
 8006ad0:	440a      	add	r2, r1
 8006ad2:	4291      	cmp	r1, r2
 8006ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ad8:	d100      	bne.n	8006adc <memcpy+0xc>
 8006ada:	4770      	bx	lr
 8006adc:	b510      	push	{r4, lr}
 8006ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ae6:	4291      	cmp	r1, r2
 8006ae8:	d1f9      	bne.n	8006ade <memcpy+0xe>
 8006aea:	bd10      	pop	{r4, pc}

08006aec <_Balloc>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006af0:	4604      	mov	r4, r0
 8006af2:	460d      	mov	r5, r1
 8006af4:	b976      	cbnz	r6, 8006b14 <_Balloc+0x28>
 8006af6:	2010      	movs	r0, #16
 8006af8:	f7ff ffe2 	bl	8006ac0 <malloc>
 8006afc:	4602      	mov	r2, r0
 8006afe:	6260      	str	r0, [r4, #36]	; 0x24
 8006b00:	b920      	cbnz	r0, 8006b0c <_Balloc+0x20>
 8006b02:	4b18      	ldr	r3, [pc, #96]	; (8006b64 <_Balloc+0x78>)
 8006b04:	4818      	ldr	r0, [pc, #96]	; (8006b68 <_Balloc+0x7c>)
 8006b06:	2166      	movs	r1, #102	; 0x66
 8006b08:	f000 fe30 	bl	800776c <__assert_func>
 8006b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b10:	6006      	str	r6, [r0, #0]
 8006b12:	60c6      	str	r6, [r0, #12]
 8006b14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b16:	68f3      	ldr	r3, [r6, #12]
 8006b18:	b183      	cbz	r3, 8006b3c <_Balloc+0x50>
 8006b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b22:	b9b8      	cbnz	r0, 8006b54 <_Balloc+0x68>
 8006b24:	2101      	movs	r1, #1
 8006b26:	fa01 f605 	lsl.w	r6, r1, r5
 8006b2a:	1d72      	adds	r2, r6, #5
 8006b2c:	0092      	lsls	r2, r2, #2
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 fb5a 	bl	80071e8 <_calloc_r>
 8006b34:	b160      	cbz	r0, 8006b50 <_Balloc+0x64>
 8006b36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b3a:	e00e      	b.n	8006b5a <_Balloc+0x6e>
 8006b3c:	2221      	movs	r2, #33	; 0x21
 8006b3e:	2104      	movs	r1, #4
 8006b40:	4620      	mov	r0, r4
 8006b42:	f000 fb51 	bl	80071e8 <_calloc_r>
 8006b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b48:	60f0      	str	r0, [r6, #12]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e4      	bne.n	8006b1a <_Balloc+0x2e>
 8006b50:	2000      	movs	r0, #0
 8006b52:	bd70      	pop	{r4, r5, r6, pc}
 8006b54:	6802      	ldr	r2, [r0, #0]
 8006b56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b60:	e7f7      	b.n	8006b52 <_Balloc+0x66>
 8006b62:	bf00      	nop
 8006b64:	080080d9 	.word	0x080080d9
 8006b68:	080081c0 	.word	0x080081c0

08006b6c <_Bfree>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b70:	4605      	mov	r5, r0
 8006b72:	460c      	mov	r4, r1
 8006b74:	b976      	cbnz	r6, 8006b94 <_Bfree+0x28>
 8006b76:	2010      	movs	r0, #16
 8006b78:	f7ff ffa2 	bl	8006ac0 <malloc>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	6268      	str	r0, [r5, #36]	; 0x24
 8006b80:	b920      	cbnz	r0, 8006b8c <_Bfree+0x20>
 8006b82:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <_Bfree+0x3c>)
 8006b84:	4809      	ldr	r0, [pc, #36]	; (8006bac <_Bfree+0x40>)
 8006b86:	218a      	movs	r1, #138	; 0x8a
 8006b88:	f000 fdf0 	bl	800776c <__assert_func>
 8006b8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b90:	6006      	str	r6, [r0, #0]
 8006b92:	60c6      	str	r6, [r0, #12]
 8006b94:	b13c      	cbz	r4, 8006ba6 <_Bfree+0x3a>
 8006b96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b98:	6862      	ldr	r2, [r4, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ba0:	6021      	str	r1, [r4, #0]
 8006ba2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ba6:	bd70      	pop	{r4, r5, r6, pc}
 8006ba8:	080080d9 	.word	0x080080d9
 8006bac:	080081c0 	.word	0x080081c0

08006bb0 <__multadd>:
 8006bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb4:	690e      	ldr	r6, [r1, #16]
 8006bb6:	4607      	mov	r7, r0
 8006bb8:	4698      	mov	r8, r3
 8006bba:	460c      	mov	r4, r1
 8006bbc:	f101 0014 	add.w	r0, r1, #20
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	6805      	ldr	r5, [r0, #0]
 8006bc4:	b2a9      	uxth	r1, r5
 8006bc6:	fb02 8101 	mla	r1, r2, r1, r8
 8006bca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006bce:	0c2d      	lsrs	r5, r5, #16
 8006bd0:	fb02 c505 	mla	r5, r2, r5, ip
 8006bd4:	b289      	uxth	r1, r1
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006bdc:	429e      	cmp	r6, r3
 8006bde:	f840 1b04 	str.w	r1, [r0], #4
 8006be2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006be6:	dcec      	bgt.n	8006bc2 <__multadd+0x12>
 8006be8:	f1b8 0f00 	cmp.w	r8, #0
 8006bec:	d022      	beq.n	8006c34 <__multadd+0x84>
 8006bee:	68a3      	ldr	r3, [r4, #8]
 8006bf0:	42b3      	cmp	r3, r6
 8006bf2:	dc19      	bgt.n	8006c28 <__multadd+0x78>
 8006bf4:	6861      	ldr	r1, [r4, #4]
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	3101      	adds	r1, #1
 8006bfa:	f7ff ff77 	bl	8006aec <_Balloc>
 8006bfe:	4605      	mov	r5, r0
 8006c00:	b928      	cbnz	r0, 8006c0e <__multadd+0x5e>
 8006c02:	4602      	mov	r2, r0
 8006c04:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <__multadd+0x8c>)
 8006c06:	480e      	ldr	r0, [pc, #56]	; (8006c40 <__multadd+0x90>)
 8006c08:	21b5      	movs	r1, #181	; 0xb5
 8006c0a:	f000 fdaf 	bl	800776c <__assert_func>
 8006c0e:	6922      	ldr	r2, [r4, #16]
 8006c10:	3202      	adds	r2, #2
 8006c12:	f104 010c 	add.w	r1, r4, #12
 8006c16:	0092      	lsls	r2, r2, #2
 8006c18:	300c      	adds	r0, #12
 8006c1a:	f7ff ff59 	bl	8006ad0 <memcpy>
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4638      	mov	r0, r7
 8006c22:	f7ff ffa3 	bl	8006b6c <_Bfree>
 8006c26:	462c      	mov	r4, r5
 8006c28:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006c2c:	3601      	adds	r6, #1
 8006c2e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006c32:	6126      	str	r6, [r4, #16]
 8006c34:	4620      	mov	r0, r4
 8006c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c3a:	bf00      	nop
 8006c3c:	0800814f 	.word	0x0800814f
 8006c40:	080081c0 	.word	0x080081c0

08006c44 <__hi0bits>:
 8006c44:	0c03      	lsrs	r3, r0, #16
 8006c46:	041b      	lsls	r3, r3, #16
 8006c48:	b9d3      	cbnz	r3, 8006c80 <__hi0bits+0x3c>
 8006c4a:	0400      	lsls	r0, r0, #16
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006c52:	bf04      	itt	eq
 8006c54:	0200      	lsleq	r0, r0, #8
 8006c56:	3308      	addeq	r3, #8
 8006c58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006c5c:	bf04      	itt	eq
 8006c5e:	0100      	lsleq	r0, r0, #4
 8006c60:	3304      	addeq	r3, #4
 8006c62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006c66:	bf04      	itt	eq
 8006c68:	0080      	lsleq	r0, r0, #2
 8006c6a:	3302      	addeq	r3, #2
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	db05      	blt.n	8006c7c <__hi0bits+0x38>
 8006c70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c74:	f103 0301 	add.w	r3, r3, #1
 8006c78:	bf08      	it	eq
 8006c7a:	2320      	moveq	r3, #32
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	4770      	bx	lr
 8006c80:	2300      	movs	r3, #0
 8006c82:	e7e4      	b.n	8006c4e <__hi0bits+0xa>

08006c84 <__lo0bits>:
 8006c84:	6803      	ldr	r3, [r0, #0]
 8006c86:	f013 0207 	ands.w	r2, r3, #7
 8006c8a:	4601      	mov	r1, r0
 8006c8c:	d00b      	beq.n	8006ca6 <__lo0bits+0x22>
 8006c8e:	07da      	lsls	r2, r3, #31
 8006c90:	d424      	bmi.n	8006cdc <__lo0bits+0x58>
 8006c92:	0798      	lsls	r0, r3, #30
 8006c94:	bf49      	itett	mi
 8006c96:	085b      	lsrmi	r3, r3, #1
 8006c98:	089b      	lsrpl	r3, r3, #2
 8006c9a:	2001      	movmi	r0, #1
 8006c9c:	600b      	strmi	r3, [r1, #0]
 8006c9e:	bf5c      	itt	pl
 8006ca0:	600b      	strpl	r3, [r1, #0]
 8006ca2:	2002      	movpl	r0, #2
 8006ca4:	4770      	bx	lr
 8006ca6:	b298      	uxth	r0, r3
 8006ca8:	b9b0      	cbnz	r0, 8006cd8 <__lo0bits+0x54>
 8006caa:	0c1b      	lsrs	r3, r3, #16
 8006cac:	2010      	movs	r0, #16
 8006cae:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006cb2:	bf04      	itt	eq
 8006cb4:	0a1b      	lsreq	r3, r3, #8
 8006cb6:	3008      	addeq	r0, #8
 8006cb8:	071a      	lsls	r2, r3, #28
 8006cba:	bf04      	itt	eq
 8006cbc:	091b      	lsreq	r3, r3, #4
 8006cbe:	3004      	addeq	r0, #4
 8006cc0:	079a      	lsls	r2, r3, #30
 8006cc2:	bf04      	itt	eq
 8006cc4:	089b      	lsreq	r3, r3, #2
 8006cc6:	3002      	addeq	r0, #2
 8006cc8:	07da      	lsls	r2, r3, #31
 8006cca:	d403      	bmi.n	8006cd4 <__lo0bits+0x50>
 8006ccc:	085b      	lsrs	r3, r3, #1
 8006cce:	f100 0001 	add.w	r0, r0, #1
 8006cd2:	d005      	beq.n	8006ce0 <__lo0bits+0x5c>
 8006cd4:	600b      	str	r3, [r1, #0]
 8006cd6:	4770      	bx	lr
 8006cd8:	4610      	mov	r0, r2
 8006cda:	e7e8      	b.n	8006cae <__lo0bits+0x2a>
 8006cdc:	2000      	movs	r0, #0
 8006cde:	4770      	bx	lr
 8006ce0:	2020      	movs	r0, #32
 8006ce2:	4770      	bx	lr

08006ce4 <__i2b>:
 8006ce4:	b510      	push	{r4, lr}
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	2101      	movs	r1, #1
 8006cea:	f7ff feff 	bl	8006aec <_Balloc>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	b928      	cbnz	r0, 8006cfe <__i2b+0x1a>
 8006cf2:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <__i2b+0x24>)
 8006cf4:	4805      	ldr	r0, [pc, #20]	; (8006d0c <__i2b+0x28>)
 8006cf6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006cfa:	f000 fd37 	bl	800776c <__assert_func>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	6144      	str	r4, [r0, #20]
 8006d02:	6103      	str	r3, [r0, #16]
 8006d04:	bd10      	pop	{r4, pc}
 8006d06:	bf00      	nop
 8006d08:	0800814f 	.word	0x0800814f
 8006d0c:	080081c0 	.word	0x080081c0

08006d10 <__multiply>:
 8006d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d14:	4614      	mov	r4, r2
 8006d16:	690a      	ldr	r2, [r1, #16]
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	bfb8      	it	lt
 8006d1e:	460b      	movlt	r3, r1
 8006d20:	460d      	mov	r5, r1
 8006d22:	bfbc      	itt	lt
 8006d24:	4625      	movlt	r5, r4
 8006d26:	461c      	movlt	r4, r3
 8006d28:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006d2c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006d30:	68ab      	ldr	r3, [r5, #8]
 8006d32:	6869      	ldr	r1, [r5, #4]
 8006d34:	eb0a 0709 	add.w	r7, sl, r9
 8006d38:	42bb      	cmp	r3, r7
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	bfb8      	it	lt
 8006d3e:	3101      	addlt	r1, #1
 8006d40:	f7ff fed4 	bl	8006aec <_Balloc>
 8006d44:	b930      	cbnz	r0, 8006d54 <__multiply+0x44>
 8006d46:	4602      	mov	r2, r0
 8006d48:	4b42      	ldr	r3, [pc, #264]	; (8006e54 <__multiply+0x144>)
 8006d4a:	4843      	ldr	r0, [pc, #268]	; (8006e58 <__multiply+0x148>)
 8006d4c:	f240 115d 	movw	r1, #349	; 0x15d
 8006d50:	f000 fd0c 	bl	800776c <__assert_func>
 8006d54:	f100 0614 	add.w	r6, r0, #20
 8006d58:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006d5c:	4633      	mov	r3, r6
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4543      	cmp	r3, r8
 8006d62:	d31e      	bcc.n	8006da2 <__multiply+0x92>
 8006d64:	f105 0c14 	add.w	ip, r5, #20
 8006d68:	f104 0314 	add.w	r3, r4, #20
 8006d6c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006d70:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006d74:	9202      	str	r2, [sp, #8]
 8006d76:	ebac 0205 	sub.w	r2, ip, r5
 8006d7a:	3a15      	subs	r2, #21
 8006d7c:	f022 0203 	bic.w	r2, r2, #3
 8006d80:	3204      	adds	r2, #4
 8006d82:	f105 0115 	add.w	r1, r5, #21
 8006d86:	458c      	cmp	ip, r1
 8006d88:	bf38      	it	cc
 8006d8a:	2204      	movcc	r2, #4
 8006d8c:	9201      	str	r2, [sp, #4]
 8006d8e:	9a02      	ldr	r2, [sp, #8]
 8006d90:	9303      	str	r3, [sp, #12]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d808      	bhi.n	8006da8 <__multiply+0x98>
 8006d96:	2f00      	cmp	r7, #0
 8006d98:	dc55      	bgt.n	8006e46 <__multiply+0x136>
 8006d9a:	6107      	str	r7, [r0, #16]
 8006d9c:	b005      	add	sp, #20
 8006d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da2:	f843 2b04 	str.w	r2, [r3], #4
 8006da6:	e7db      	b.n	8006d60 <__multiply+0x50>
 8006da8:	f8b3 a000 	ldrh.w	sl, [r3]
 8006dac:	f1ba 0f00 	cmp.w	sl, #0
 8006db0:	d020      	beq.n	8006df4 <__multiply+0xe4>
 8006db2:	f105 0e14 	add.w	lr, r5, #20
 8006db6:	46b1      	mov	r9, r6
 8006db8:	2200      	movs	r2, #0
 8006dba:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006dbe:	f8d9 b000 	ldr.w	fp, [r9]
 8006dc2:	b2a1      	uxth	r1, r4
 8006dc4:	fa1f fb8b 	uxth.w	fp, fp
 8006dc8:	fb0a b101 	mla	r1, sl, r1, fp
 8006dcc:	4411      	add	r1, r2
 8006dce:	f8d9 2000 	ldr.w	r2, [r9]
 8006dd2:	0c24      	lsrs	r4, r4, #16
 8006dd4:	0c12      	lsrs	r2, r2, #16
 8006dd6:	fb0a 2404 	mla	r4, sl, r4, r2
 8006dda:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006dde:	b289      	uxth	r1, r1
 8006de0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006de4:	45f4      	cmp	ip, lr
 8006de6:	f849 1b04 	str.w	r1, [r9], #4
 8006dea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006dee:	d8e4      	bhi.n	8006dba <__multiply+0xaa>
 8006df0:	9901      	ldr	r1, [sp, #4]
 8006df2:	5072      	str	r2, [r6, r1]
 8006df4:	9a03      	ldr	r2, [sp, #12]
 8006df6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	f1b9 0f00 	cmp.w	r9, #0
 8006e00:	d01f      	beq.n	8006e42 <__multiply+0x132>
 8006e02:	6834      	ldr	r4, [r6, #0]
 8006e04:	f105 0114 	add.w	r1, r5, #20
 8006e08:	46b6      	mov	lr, r6
 8006e0a:	f04f 0a00 	mov.w	sl, #0
 8006e0e:	880a      	ldrh	r2, [r1, #0]
 8006e10:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006e14:	fb09 b202 	mla	r2, r9, r2, fp
 8006e18:	4492      	add	sl, r2
 8006e1a:	b2a4      	uxth	r4, r4
 8006e1c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006e20:	f84e 4b04 	str.w	r4, [lr], #4
 8006e24:	f851 4b04 	ldr.w	r4, [r1], #4
 8006e28:	f8be 2000 	ldrh.w	r2, [lr]
 8006e2c:	0c24      	lsrs	r4, r4, #16
 8006e2e:	fb09 2404 	mla	r4, r9, r4, r2
 8006e32:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006e36:	458c      	cmp	ip, r1
 8006e38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006e3c:	d8e7      	bhi.n	8006e0e <__multiply+0xfe>
 8006e3e:	9a01      	ldr	r2, [sp, #4]
 8006e40:	50b4      	str	r4, [r6, r2]
 8006e42:	3604      	adds	r6, #4
 8006e44:	e7a3      	b.n	8006d8e <__multiply+0x7e>
 8006e46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1a5      	bne.n	8006d9a <__multiply+0x8a>
 8006e4e:	3f01      	subs	r7, #1
 8006e50:	e7a1      	b.n	8006d96 <__multiply+0x86>
 8006e52:	bf00      	nop
 8006e54:	0800814f 	.word	0x0800814f
 8006e58:	080081c0 	.word	0x080081c0

08006e5c <__pow5mult>:
 8006e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e60:	4615      	mov	r5, r2
 8006e62:	f012 0203 	ands.w	r2, r2, #3
 8006e66:	4606      	mov	r6, r0
 8006e68:	460f      	mov	r7, r1
 8006e6a:	d007      	beq.n	8006e7c <__pow5mult+0x20>
 8006e6c:	4c25      	ldr	r4, [pc, #148]	; (8006f04 <__pow5mult+0xa8>)
 8006e6e:	3a01      	subs	r2, #1
 8006e70:	2300      	movs	r3, #0
 8006e72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e76:	f7ff fe9b 	bl	8006bb0 <__multadd>
 8006e7a:	4607      	mov	r7, r0
 8006e7c:	10ad      	asrs	r5, r5, #2
 8006e7e:	d03d      	beq.n	8006efc <__pow5mult+0xa0>
 8006e80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e82:	b97c      	cbnz	r4, 8006ea4 <__pow5mult+0x48>
 8006e84:	2010      	movs	r0, #16
 8006e86:	f7ff fe1b 	bl	8006ac0 <malloc>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	6270      	str	r0, [r6, #36]	; 0x24
 8006e8e:	b928      	cbnz	r0, 8006e9c <__pow5mult+0x40>
 8006e90:	4b1d      	ldr	r3, [pc, #116]	; (8006f08 <__pow5mult+0xac>)
 8006e92:	481e      	ldr	r0, [pc, #120]	; (8006f0c <__pow5mult+0xb0>)
 8006e94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006e98:	f000 fc68 	bl	800776c <__assert_func>
 8006e9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ea0:	6004      	str	r4, [r0, #0]
 8006ea2:	60c4      	str	r4, [r0, #12]
 8006ea4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006eac:	b94c      	cbnz	r4, 8006ec2 <__pow5mult+0x66>
 8006eae:	f240 2171 	movw	r1, #625	; 0x271
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7ff ff16 	bl	8006ce4 <__i2b>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	6003      	str	r3, [r0, #0]
 8006ec2:	f04f 0900 	mov.w	r9, #0
 8006ec6:	07eb      	lsls	r3, r5, #31
 8006ec8:	d50a      	bpl.n	8006ee0 <__pow5mult+0x84>
 8006eca:	4639      	mov	r1, r7
 8006ecc:	4622      	mov	r2, r4
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f7ff ff1e 	bl	8006d10 <__multiply>
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	4680      	mov	r8, r0
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f7ff fe47 	bl	8006b6c <_Bfree>
 8006ede:	4647      	mov	r7, r8
 8006ee0:	106d      	asrs	r5, r5, #1
 8006ee2:	d00b      	beq.n	8006efc <__pow5mult+0xa0>
 8006ee4:	6820      	ldr	r0, [r4, #0]
 8006ee6:	b938      	cbnz	r0, 8006ef8 <__pow5mult+0x9c>
 8006ee8:	4622      	mov	r2, r4
 8006eea:	4621      	mov	r1, r4
 8006eec:	4630      	mov	r0, r6
 8006eee:	f7ff ff0f 	bl	8006d10 <__multiply>
 8006ef2:	6020      	str	r0, [r4, #0]
 8006ef4:	f8c0 9000 	str.w	r9, [r0]
 8006ef8:	4604      	mov	r4, r0
 8006efa:	e7e4      	b.n	8006ec6 <__pow5mult+0x6a>
 8006efc:	4638      	mov	r0, r7
 8006efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f02:	bf00      	nop
 8006f04:	08008310 	.word	0x08008310
 8006f08:	080080d9 	.word	0x080080d9
 8006f0c:	080081c0 	.word	0x080081c0

08006f10 <__lshift>:
 8006f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f14:	460c      	mov	r4, r1
 8006f16:	6849      	ldr	r1, [r1, #4]
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f1e:	68a3      	ldr	r3, [r4, #8]
 8006f20:	4607      	mov	r7, r0
 8006f22:	4691      	mov	r9, r2
 8006f24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f28:	f108 0601 	add.w	r6, r8, #1
 8006f2c:	42b3      	cmp	r3, r6
 8006f2e:	db0b      	blt.n	8006f48 <__lshift+0x38>
 8006f30:	4638      	mov	r0, r7
 8006f32:	f7ff fddb 	bl	8006aec <_Balloc>
 8006f36:	4605      	mov	r5, r0
 8006f38:	b948      	cbnz	r0, 8006f4e <__lshift+0x3e>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	4b28      	ldr	r3, [pc, #160]	; (8006fe0 <__lshift+0xd0>)
 8006f3e:	4829      	ldr	r0, [pc, #164]	; (8006fe4 <__lshift+0xd4>)
 8006f40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006f44:	f000 fc12 	bl	800776c <__assert_func>
 8006f48:	3101      	adds	r1, #1
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	e7ee      	b.n	8006f2c <__lshift+0x1c>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f100 0114 	add.w	r1, r0, #20
 8006f54:	f100 0210 	add.w	r2, r0, #16
 8006f58:	4618      	mov	r0, r3
 8006f5a:	4553      	cmp	r3, sl
 8006f5c:	db33      	blt.n	8006fc6 <__lshift+0xb6>
 8006f5e:	6920      	ldr	r0, [r4, #16]
 8006f60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f64:	f104 0314 	add.w	r3, r4, #20
 8006f68:	f019 091f 	ands.w	r9, r9, #31
 8006f6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f74:	d02b      	beq.n	8006fce <__lshift+0xbe>
 8006f76:	f1c9 0e20 	rsb	lr, r9, #32
 8006f7a:	468a      	mov	sl, r1
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	fa00 f009 	lsl.w	r0, r0, r9
 8006f84:	4302      	orrs	r2, r0
 8006f86:	f84a 2b04 	str.w	r2, [sl], #4
 8006f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8e:	459c      	cmp	ip, r3
 8006f90:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f94:	d8f3      	bhi.n	8006f7e <__lshift+0x6e>
 8006f96:	ebac 0304 	sub.w	r3, ip, r4
 8006f9a:	3b15      	subs	r3, #21
 8006f9c:	f023 0303 	bic.w	r3, r3, #3
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	f104 0015 	add.w	r0, r4, #21
 8006fa6:	4584      	cmp	ip, r0
 8006fa8:	bf38      	it	cc
 8006faa:	2304      	movcc	r3, #4
 8006fac:	50ca      	str	r2, [r1, r3]
 8006fae:	b10a      	cbz	r2, 8006fb4 <__lshift+0xa4>
 8006fb0:	f108 0602 	add.w	r6, r8, #2
 8006fb4:	3e01      	subs	r6, #1
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	612e      	str	r6, [r5, #16]
 8006fba:	4621      	mov	r1, r4
 8006fbc:	f7ff fdd6 	bl	8006b6c <_Bfree>
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006fca:	3301      	adds	r3, #1
 8006fcc:	e7c5      	b.n	8006f5a <__lshift+0x4a>
 8006fce:	3904      	subs	r1, #4
 8006fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006fd8:	459c      	cmp	ip, r3
 8006fda:	d8f9      	bhi.n	8006fd0 <__lshift+0xc0>
 8006fdc:	e7ea      	b.n	8006fb4 <__lshift+0xa4>
 8006fde:	bf00      	nop
 8006fe0:	0800814f 	.word	0x0800814f
 8006fe4:	080081c0 	.word	0x080081c0

08006fe8 <__mcmp>:
 8006fe8:	b530      	push	{r4, r5, lr}
 8006fea:	6902      	ldr	r2, [r0, #16]
 8006fec:	690c      	ldr	r4, [r1, #16]
 8006fee:	1b12      	subs	r2, r2, r4
 8006ff0:	d10e      	bne.n	8007010 <__mcmp+0x28>
 8006ff2:	f100 0314 	add.w	r3, r0, #20
 8006ff6:	3114      	adds	r1, #20
 8006ff8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ffc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007000:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007004:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007008:	42a5      	cmp	r5, r4
 800700a:	d003      	beq.n	8007014 <__mcmp+0x2c>
 800700c:	d305      	bcc.n	800701a <__mcmp+0x32>
 800700e:	2201      	movs	r2, #1
 8007010:	4610      	mov	r0, r2
 8007012:	bd30      	pop	{r4, r5, pc}
 8007014:	4283      	cmp	r3, r0
 8007016:	d3f3      	bcc.n	8007000 <__mcmp+0x18>
 8007018:	e7fa      	b.n	8007010 <__mcmp+0x28>
 800701a:	f04f 32ff 	mov.w	r2, #4294967295
 800701e:	e7f7      	b.n	8007010 <__mcmp+0x28>

08007020 <__mdiff>:
 8007020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	460c      	mov	r4, r1
 8007026:	4606      	mov	r6, r0
 8007028:	4611      	mov	r1, r2
 800702a:	4620      	mov	r0, r4
 800702c:	4617      	mov	r7, r2
 800702e:	f7ff ffdb 	bl	8006fe8 <__mcmp>
 8007032:	1e05      	subs	r5, r0, #0
 8007034:	d110      	bne.n	8007058 <__mdiff+0x38>
 8007036:	4629      	mov	r1, r5
 8007038:	4630      	mov	r0, r6
 800703a:	f7ff fd57 	bl	8006aec <_Balloc>
 800703e:	b930      	cbnz	r0, 800704e <__mdiff+0x2e>
 8007040:	4b39      	ldr	r3, [pc, #228]	; (8007128 <__mdiff+0x108>)
 8007042:	4602      	mov	r2, r0
 8007044:	f240 2132 	movw	r1, #562	; 0x232
 8007048:	4838      	ldr	r0, [pc, #224]	; (800712c <__mdiff+0x10c>)
 800704a:	f000 fb8f 	bl	800776c <__assert_func>
 800704e:	2301      	movs	r3, #1
 8007050:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007054:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007058:	bfa4      	itt	ge
 800705a:	463b      	movge	r3, r7
 800705c:	4627      	movge	r7, r4
 800705e:	4630      	mov	r0, r6
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	bfa6      	itte	ge
 8007064:	461c      	movge	r4, r3
 8007066:	2500      	movge	r5, #0
 8007068:	2501      	movlt	r5, #1
 800706a:	f7ff fd3f 	bl	8006aec <_Balloc>
 800706e:	b920      	cbnz	r0, 800707a <__mdiff+0x5a>
 8007070:	4b2d      	ldr	r3, [pc, #180]	; (8007128 <__mdiff+0x108>)
 8007072:	4602      	mov	r2, r0
 8007074:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007078:	e7e6      	b.n	8007048 <__mdiff+0x28>
 800707a:	693e      	ldr	r6, [r7, #16]
 800707c:	60c5      	str	r5, [r0, #12]
 800707e:	6925      	ldr	r5, [r4, #16]
 8007080:	f107 0114 	add.w	r1, r7, #20
 8007084:	f104 0914 	add.w	r9, r4, #20
 8007088:	f100 0e14 	add.w	lr, r0, #20
 800708c:	f107 0210 	add.w	r2, r7, #16
 8007090:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007094:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007098:	46f2      	mov	sl, lr
 800709a:	2700      	movs	r7, #0
 800709c:	f859 3b04 	ldr.w	r3, [r9], #4
 80070a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80070a4:	fa1f f883 	uxth.w	r8, r3
 80070a8:	fa17 f78b 	uxtah	r7, r7, fp
 80070ac:	0c1b      	lsrs	r3, r3, #16
 80070ae:	eba7 0808 	sub.w	r8, r7, r8
 80070b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80070b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80070ba:	fa1f f888 	uxth.w	r8, r8
 80070be:	141f      	asrs	r7, r3, #16
 80070c0:	454d      	cmp	r5, r9
 80070c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80070c6:	f84a 3b04 	str.w	r3, [sl], #4
 80070ca:	d8e7      	bhi.n	800709c <__mdiff+0x7c>
 80070cc:	1b2b      	subs	r3, r5, r4
 80070ce:	3b15      	subs	r3, #21
 80070d0:	f023 0303 	bic.w	r3, r3, #3
 80070d4:	3304      	adds	r3, #4
 80070d6:	3415      	adds	r4, #21
 80070d8:	42a5      	cmp	r5, r4
 80070da:	bf38      	it	cc
 80070dc:	2304      	movcc	r3, #4
 80070de:	4419      	add	r1, r3
 80070e0:	4473      	add	r3, lr
 80070e2:	469e      	mov	lr, r3
 80070e4:	460d      	mov	r5, r1
 80070e6:	4565      	cmp	r5, ip
 80070e8:	d30e      	bcc.n	8007108 <__mdiff+0xe8>
 80070ea:	f10c 0203 	add.w	r2, ip, #3
 80070ee:	1a52      	subs	r2, r2, r1
 80070f0:	f022 0203 	bic.w	r2, r2, #3
 80070f4:	3903      	subs	r1, #3
 80070f6:	458c      	cmp	ip, r1
 80070f8:	bf38      	it	cc
 80070fa:	2200      	movcc	r2, #0
 80070fc:	441a      	add	r2, r3
 80070fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007102:	b17b      	cbz	r3, 8007124 <__mdiff+0x104>
 8007104:	6106      	str	r6, [r0, #16]
 8007106:	e7a5      	b.n	8007054 <__mdiff+0x34>
 8007108:	f855 8b04 	ldr.w	r8, [r5], #4
 800710c:	fa17 f488 	uxtah	r4, r7, r8
 8007110:	1422      	asrs	r2, r4, #16
 8007112:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007116:	b2a4      	uxth	r4, r4
 8007118:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800711c:	f84e 4b04 	str.w	r4, [lr], #4
 8007120:	1417      	asrs	r7, r2, #16
 8007122:	e7e0      	b.n	80070e6 <__mdiff+0xc6>
 8007124:	3e01      	subs	r6, #1
 8007126:	e7ea      	b.n	80070fe <__mdiff+0xde>
 8007128:	0800814f 	.word	0x0800814f
 800712c:	080081c0 	.word	0x080081c0

08007130 <__d2b>:
 8007130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007134:	4689      	mov	r9, r1
 8007136:	2101      	movs	r1, #1
 8007138:	ec57 6b10 	vmov	r6, r7, d0
 800713c:	4690      	mov	r8, r2
 800713e:	f7ff fcd5 	bl	8006aec <_Balloc>
 8007142:	4604      	mov	r4, r0
 8007144:	b930      	cbnz	r0, 8007154 <__d2b+0x24>
 8007146:	4602      	mov	r2, r0
 8007148:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <__d2b+0xb0>)
 800714a:	4826      	ldr	r0, [pc, #152]	; (80071e4 <__d2b+0xb4>)
 800714c:	f240 310a 	movw	r1, #778	; 0x30a
 8007150:	f000 fb0c 	bl	800776c <__assert_func>
 8007154:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007158:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800715c:	bb35      	cbnz	r5, 80071ac <__d2b+0x7c>
 800715e:	2e00      	cmp	r6, #0
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	d028      	beq.n	80071b6 <__d2b+0x86>
 8007164:	4668      	mov	r0, sp
 8007166:	9600      	str	r6, [sp, #0]
 8007168:	f7ff fd8c 	bl	8006c84 <__lo0bits>
 800716c:	9900      	ldr	r1, [sp, #0]
 800716e:	b300      	cbz	r0, 80071b2 <__d2b+0x82>
 8007170:	9a01      	ldr	r2, [sp, #4]
 8007172:	f1c0 0320 	rsb	r3, r0, #32
 8007176:	fa02 f303 	lsl.w	r3, r2, r3
 800717a:	430b      	orrs	r3, r1
 800717c:	40c2      	lsrs	r2, r0
 800717e:	6163      	str	r3, [r4, #20]
 8007180:	9201      	str	r2, [sp, #4]
 8007182:	9b01      	ldr	r3, [sp, #4]
 8007184:	61a3      	str	r3, [r4, #24]
 8007186:	2b00      	cmp	r3, #0
 8007188:	bf14      	ite	ne
 800718a:	2202      	movne	r2, #2
 800718c:	2201      	moveq	r2, #1
 800718e:	6122      	str	r2, [r4, #16]
 8007190:	b1d5      	cbz	r5, 80071c8 <__d2b+0x98>
 8007192:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007196:	4405      	add	r5, r0
 8007198:	f8c9 5000 	str.w	r5, [r9]
 800719c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071a0:	f8c8 0000 	str.w	r0, [r8]
 80071a4:	4620      	mov	r0, r4
 80071a6:	b003      	add	sp, #12
 80071a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071b0:	e7d5      	b.n	800715e <__d2b+0x2e>
 80071b2:	6161      	str	r1, [r4, #20]
 80071b4:	e7e5      	b.n	8007182 <__d2b+0x52>
 80071b6:	a801      	add	r0, sp, #4
 80071b8:	f7ff fd64 	bl	8006c84 <__lo0bits>
 80071bc:	9b01      	ldr	r3, [sp, #4]
 80071be:	6163      	str	r3, [r4, #20]
 80071c0:	2201      	movs	r2, #1
 80071c2:	6122      	str	r2, [r4, #16]
 80071c4:	3020      	adds	r0, #32
 80071c6:	e7e3      	b.n	8007190 <__d2b+0x60>
 80071c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071d0:	f8c9 0000 	str.w	r0, [r9]
 80071d4:	6918      	ldr	r0, [r3, #16]
 80071d6:	f7ff fd35 	bl	8006c44 <__hi0bits>
 80071da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071de:	e7df      	b.n	80071a0 <__d2b+0x70>
 80071e0:	0800814f 	.word	0x0800814f
 80071e4:	080081c0 	.word	0x080081c0

080071e8 <_calloc_r>:
 80071e8:	b513      	push	{r0, r1, r4, lr}
 80071ea:	434a      	muls	r2, r1
 80071ec:	4611      	mov	r1, r2
 80071ee:	9201      	str	r2, [sp, #4]
 80071f0:	f000 f85a 	bl	80072a8 <_malloc_r>
 80071f4:	4604      	mov	r4, r0
 80071f6:	b118      	cbz	r0, 8007200 <_calloc_r+0x18>
 80071f8:	9a01      	ldr	r2, [sp, #4]
 80071fa:	2100      	movs	r1, #0
 80071fc:	f7fd fdec 	bl	8004dd8 <memset>
 8007200:	4620      	mov	r0, r4
 8007202:	b002      	add	sp, #8
 8007204:	bd10      	pop	{r4, pc}
	...

08007208 <_free_r>:
 8007208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800720a:	2900      	cmp	r1, #0
 800720c:	d048      	beq.n	80072a0 <_free_r+0x98>
 800720e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007212:	9001      	str	r0, [sp, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f1a1 0404 	sub.w	r4, r1, #4
 800721a:	bfb8      	it	lt
 800721c:	18e4      	addlt	r4, r4, r3
 800721e:	f000 fb2b 	bl	8007878 <__malloc_lock>
 8007222:	4a20      	ldr	r2, [pc, #128]	; (80072a4 <_free_r+0x9c>)
 8007224:	9801      	ldr	r0, [sp, #4]
 8007226:	6813      	ldr	r3, [r2, #0]
 8007228:	4615      	mov	r5, r2
 800722a:	b933      	cbnz	r3, 800723a <_free_r+0x32>
 800722c:	6063      	str	r3, [r4, #4]
 800722e:	6014      	str	r4, [r2, #0]
 8007230:	b003      	add	sp, #12
 8007232:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007236:	f000 bb25 	b.w	8007884 <__malloc_unlock>
 800723a:	42a3      	cmp	r3, r4
 800723c:	d90b      	bls.n	8007256 <_free_r+0x4e>
 800723e:	6821      	ldr	r1, [r4, #0]
 8007240:	1862      	adds	r2, r4, r1
 8007242:	4293      	cmp	r3, r2
 8007244:	bf04      	itt	eq
 8007246:	681a      	ldreq	r2, [r3, #0]
 8007248:	685b      	ldreq	r3, [r3, #4]
 800724a:	6063      	str	r3, [r4, #4]
 800724c:	bf04      	itt	eq
 800724e:	1852      	addeq	r2, r2, r1
 8007250:	6022      	streq	r2, [r4, #0]
 8007252:	602c      	str	r4, [r5, #0]
 8007254:	e7ec      	b.n	8007230 <_free_r+0x28>
 8007256:	461a      	mov	r2, r3
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	b10b      	cbz	r3, 8007260 <_free_r+0x58>
 800725c:	42a3      	cmp	r3, r4
 800725e:	d9fa      	bls.n	8007256 <_free_r+0x4e>
 8007260:	6811      	ldr	r1, [r2, #0]
 8007262:	1855      	adds	r5, r2, r1
 8007264:	42a5      	cmp	r5, r4
 8007266:	d10b      	bne.n	8007280 <_free_r+0x78>
 8007268:	6824      	ldr	r4, [r4, #0]
 800726a:	4421      	add	r1, r4
 800726c:	1854      	adds	r4, r2, r1
 800726e:	42a3      	cmp	r3, r4
 8007270:	6011      	str	r1, [r2, #0]
 8007272:	d1dd      	bne.n	8007230 <_free_r+0x28>
 8007274:	681c      	ldr	r4, [r3, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	6053      	str	r3, [r2, #4]
 800727a:	4421      	add	r1, r4
 800727c:	6011      	str	r1, [r2, #0]
 800727e:	e7d7      	b.n	8007230 <_free_r+0x28>
 8007280:	d902      	bls.n	8007288 <_free_r+0x80>
 8007282:	230c      	movs	r3, #12
 8007284:	6003      	str	r3, [r0, #0]
 8007286:	e7d3      	b.n	8007230 <_free_r+0x28>
 8007288:	6825      	ldr	r5, [r4, #0]
 800728a:	1961      	adds	r1, r4, r5
 800728c:	428b      	cmp	r3, r1
 800728e:	bf04      	itt	eq
 8007290:	6819      	ldreq	r1, [r3, #0]
 8007292:	685b      	ldreq	r3, [r3, #4]
 8007294:	6063      	str	r3, [r4, #4]
 8007296:	bf04      	itt	eq
 8007298:	1949      	addeq	r1, r1, r5
 800729a:	6021      	streq	r1, [r4, #0]
 800729c:	6054      	str	r4, [r2, #4]
 800729e:	e7c7      	b.n	8007230 <_free_r+0x28>
 80072a0:	b003      	add	sp, #12
 80072a2:	bd30      	pop	{r4, r5, pc}
 80072a4:	20000290 	.word	0x20000290

080072a8 <_malloc_r>:
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072aa:	1ccd      	adds	r5, r1, #3
 80072ac:	f025 0503 	bic.w	r5, r5, #3
 80072b0:	3508      	adds	r5, #8
 80072b2:	2d0c      	cmp	r5, #12
 80072b4:	bf38      	it	cc
 80072b6:	250c      	movcc	r5, #12
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	4606      	mov	r6, r0
 80072bc:	db01      	blt.n	80072c2 <_malloc_r+0x1a>
 80072be:	42a9      	cmp	r1, r5
 80072c0:	d903      	bls.n	80072ca <_malloc_r+0x22>
 80072c2:	230c      	movs	r3, #12
 80072c4:	6033      	str	r3, [r6, #0]
 80072c6:	2000      	movs	r0, #0
 80072c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ca:	f000 fad5 	bl	8007878 <__malloc_lock>
 80072ce:	4921      	ldr	r1, [pc, #132]	; (8007354 <_malloc_r+0xac>)
 80072d0:	680a      	ldr	r2, [r1, #0]
 80072d2:	4614      	mov	r4, r2
 80072d4:	b99c      	cbnz	r4, 80072fe <_malloc_r+0x56>
 80072d6:	4f20      	ldr	r7, [pc, #128]	; (8007358 <_malloc_r+0xb0>)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	b923      	cbnz	r3, 80072e6 <_malloc_r+0x3e>
 80072dc:	4621      	mov	r1, r4
 80072de:	4630      	mov	r0, r6
 80072e0:	f000 f9de 	bl	80076a0 <_sbrk_r>
 80072e4:	6038      	str	r0, [r7, #0]
 80072e6:	4629      	mov	r1, r5
 80072e8:	4630      	mov	r0, r6
 80072ea:	f000 f9d9 	bl	80076a0 <_sbrk_r>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	d123      	bne.n	800733a <_malloc_r+0x92>
 80072f2:	230c      	movs	r3, #12
 80072f4:	6033      	str	r3, [r6, #0]
 80072f6:	4630      	mov	r0, r6
 80072f8:	f000 fac4 	bl	8007884 <__malloc_unlock>
 80072fc:	e7e3      	b.n	80072c6 <_malloc_r+0x1e>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	1b5b      	subs	r3, r3, r5
 8007302:	d417      	bmi.n	8007334 <_malloc_r+0x8c>
 8007304:	2b0b      	cmp	r3, #11
 8007306:	d903      	bls.n	8007310 <_malloc_r+0x68>
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	441c      	add	r4, r3
 800730c:	6025      	str	r5, [r4, #0]
 800730e:	e004      	b.n	800731a <_malloc_r+0x72>
 8007310:	6863      	ldr	r3, [r4, #4]
 8007312:	42a2      	cmp	r2, r4
 8007314:	bf0c      	ite	eq
 8007316:	600b      	streq	r3, [r1, #0]
 8007318:	6053      	strne	r3, [r2, #4]
 800731a:	4630      	mov	r0, r6
 800731c:	f000 fab2 	bl	8007884 <__malloc_unlock>
 8007320:	f104 000b 	add.w	r0, r4, #11
 8007324:	1d23      	adds	r3, r4, #4
 8007326:	f020 0007 	bic.w	r0, r0, #7
 800732a:	1ac2      	subs	r2, r0, r3
 800732c:	d0cc      	beq.n	80072c8 <_malloc_r+0x20>
 800732e:	1a1b      	subs	r3, r3, r0
 8007330:	50a3      	str	r3, [r4, r2]
 8007332:	e7c9      	b.n	80072c8 <_malloc_r+0x20>
 8007334:	4622      	mov	r2, r4
 8007336:	6864      	ldr	r4, [r4, #4]
 8007338:	e7cc      	b.n	80072d4 <_malloc_r+0x2c>
 800733a:	1cc4      	adds	r4, r0, #3
 800733c:	f024 0403 	bic.w	r4, r4, #3
 8007340:	42a0      	cmp	r0, r4
 8007342:	d0e3      	beq.n	800730c <_malloc_r+0x64>
 8007344:	1a21      	subs	r1, r4, r0
 8007346:	4630      	mov	r0, r6
 8007348:	f000 f9aa 	bl	80076a0 <_sbrk_r>
 800734c:	3001      	adds	r0, #1
 800734e:	d1dd      	bne.n	800730c <_malloc_r+0x64>
 8007350:	e7cf      	b.n	80072f2 <_malloc_r+0x4a>
 8007352:	bf00      	nop
 8007354:	20000290 	.word	0x20000290
 8007358:	20000294 	.word	0x20000294

0800735c <__sfputc_r>:
 800735c:	6893      	ldr	r3, [r2, #8]
 800735e:	3b01      	subs	r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	b410      	push	{r4}
 8007364:	6093      	str	r3, [r2, #8]
 8007366:	da08      	bge.n	800737a <__sfputc_r+0x1e>
 8007368:	6994      	ldr	r4, [r2, #24]
 800736a:	42a3      	cmp	r3, r4
 800736c:	db01      	blt.n	8007372 <__sfputc_r+0x16>
 800736e:	290a      	cmp	r1, #10
 8007370:	d103      	bne.n	800737a <__sfputc_r+0x1e>
 8007372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007376:	f7fe ba45 	b.w	8005804 <__swbuf_r>
 800737a:	6813      	ldr	r3, [r2, #0]
 800737c:	1c58      	adds	r0, r3, #1
 800737e:	6010      	str	r0, [r2, #0]
 8007380:	7019      	strb	r1, [r3, #0]
 8007382:	4608      	mov	r0, r1
 8007384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007388:	4770      	bx	lr

0800738a <__sfputs_r>:
 800738a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738c:	4606      	mov	r6, r0
 800738e:	460f      	mov	r7, r1
 8007390:	4614      	mov	r4, r2
 8007392:	18d5      	adds	r5, r2, r3
 8007394:	42ac      	cmp	r4, r5
 8007396:	d101      	bne.n	800739c <__sfputs_r+0x12>
 8007398:	2000      	movs	r0, #0
 800739a:	e007      	b.n	80073ac <__sfputs_r+0x22>
 800739c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073a0:	463a      	mov	r2, r7
 80073a2:	4630      	mov	r0, r6
 80073a4:	f7ff ffda 	bl	800735c <__sfputc_r>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d1f3      	bne.n	8007394 <__sfputs_r+0xa>
 80073ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073b0 <_vfiprintf_r>:
 80073b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b4:	460d      	mov	r5, r1
 80073b6:	b09d      	sub	sp, #116	; 0x74
 80073b8:	4614      	mov	r4, r2
 80073ba:	4698      	mov	r8, r3
 80073bc:	4606      	mov	r6, r0
 80073be:	b118      	cbz	r0, 80073c8 <_vfiprintf_r+0x18>
 80073c0:	6983      	ldr	r3, [r0, #24]
 80073c2:	b90b      	cbnz	r3, 80073c8 <_vfiprintf_r+0x18>
 80073c4:	f7ff fa72 	bl	80068ac <__sinit>
 80073c8:	4b89      	ldr	r3, [pc, #548]	; (80075f0 <_vfiprintf_r+0x240>)
 80073ca:	429d      	cmp	r5, r3
 80073cc:	d11b      	bne.n	8007406 <_vfiprintf_r+0x56>
 80073ce:	6875      	ldr	r5, [r6, #4]
 80073d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073d2:	07d9      	lsls	r1, r3, #31
 80073d4:	d405      	bmi.n	80073e2 <_vfiprintf_r+0x32>
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	059a      	lsls	r2, r3, #22
 80073da:	d402      	bmi.n	80073e2 <_vfiprintf_r+0x32>
 80073dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073de:	f7ff fb08 	bl	80069f2 <__retarget_lock_acquire_recursive>
 80073e2:	89ab      	ldrh	r3, [r5, #12]
 80073e4:	071b      	lsls	r3, r3, #28
 80073e6:	d501      	bpl.n	80073ec <_vfiprintf_r+0x3c>
 80073e8:	692b      	ldr	r3, [r5, #16]
 80073ea:	b9eb      	cbnz	r3, 8007428 <_vfiprintf_r+0x78>
 80073ec:	4629      	mov	r1, r5
 80073ee:	4630      	mov	r0, r6
 80073f0:	f7fe fa5a 	bl	80058a8 <__swsetup_r>
 80073f4:	b1c0      	cbz	r0, 8007428 <_vfiprintf_r+0x78>
 80073f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073f8:	07dc      	lsls	r4, r3, #31
 80073fa:	d50e      	bpl.n	800741a <_vfiprintf_r+0x6a>
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007400:	b01d      	add	sp, #116	; 0x74
 8007402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007406:	4b7b      	ldr	r3, [pc, #492]	; (80075f4 <_vfiprintf_r+0x244>)
 8007408:	429d      	cmp	r5, r3
 800740a:	d101      	bne.n	8007410 <_vfiprintf_r+0x60>
 800740c:	68b5      	ldr	r5, [r6, #8]
 800740e:	e7df      	b.n	80073d0 <_vfiprintf_r+0x20>
 8007410:	4b79      	ldr	r3, [pc, #484]	; (80075f8 <_vfiprintf_r+0x248>)
 8007412:	429d      	cmp	r5, r3
 8007414:	bf08      	it	eq
 8007416:	68f5      	ldreq	r5, [r6, #12]
 8007418:	e7da      	b.n	80073d0 <_vfiprintf_r+0x20>
 800741a:	89ab      	ldrh	r3, [r5, #12]
 800741c:	0598      	lsls	r0, r3, #22
 800741e:	d4ed      	bmi.n	80073fc <_vfiprintf_r+0x4c>
 8007420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007422:	f7ff fae7 	bl	80069f4 <__retarget_lock_release_recursive>
 8007426:	e7e9      	b.n	80073fc <_vfiprintf_r+0x4c>
 8007428:	2300      	movs	r3, #0
 800742a:	9309      	str	r3, [sp, #36]	; 0x24
 800742c:	2320      	movs	r3, #32
 800742e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007432:	f8cd 800c 	str.w	r8, [sp, #12]
 8007436:	2330      	movs	r3, #48	; 0x30
 8007438:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80075fc <_vfiprintf_r+0x24c>
 800743c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007440:	f04f 0901 	mov.w	r9, #1
 8007444:	4623      	mov	r3, r4
 8007446:	469a      	mov	sl, r3
 8007448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800744c:	b10a      	cbz	r2, 8007452 <_vfiprintf_r+0xa2>
 800744e:	2a25      	cmp	r2, #37	; 0x25
 8007450:	d1f9      	bne.n	8007446 <_vfiprintf_r+0x96>
 8007452:	ebba 0b04 	subs.w	fp, sl, r4
 8007456:	d00b      	beq.n	8007470 <_vfiprintf_r+0xc0>
 8007458:	465b      	mov	r3, fp
 800745a:	4622      	mov	r2, r4
 800745c:	4629      	mov	r1, r5
 800745e:	4630      	mov	r0, r6
 8007460:	f7ff ff93 	bl	800738a <__sfputs_r>
 8007464:	3001      	adds	r0, #1
 8007466:	f000 80aa 	beq.w	80075be <_vfiprintf_r+0x20e>
 800746a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800746c:	445a      	add	r2, fp
 800746e:	9209      	str	r2, [sp, #36]	; 0x24
 8007470:	f89a 3000 	ldrb.w	r3, [sl]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 80a2 	beq.w	80075be <_vfiprintf_r+0x20e>
 800747a:	2300      	movs	r3, #0
 800747c:	f04f 32ff 	mov.w	r2, #4294967295
 8007480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007484:	f10a 0a01 	add.w	sl, sl, #1
 8007488:	9304      	str	r3, [sp, #16]
 800748a:	9307      	str	r3, [sp, #28]
 800748c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007490:	931a      	str	r3, [sp, #104]	; 0x68
 8007492:	4654      	mov	r4, sl
 8007494:	2205      	movs	r2, #5
 8007496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749a:	4858      	ldr	r0, [pc, #352]	; (80075fc <_vfiprintf_r+0x24c>)
 800749c:	f7f8 fea8 	bl	80001f0 <memchr>
 80074a0:	9a04      	ldr	r2, [sp, #16]
 80074a2:	b9d8      	cbnz	r0, 80074dc <_vfiprintf_r+0x12c>
 80074a4:	06d1      	lsls	r1, r2, #27
 80074a6:	bf44      	itt	mi
 80074a8:	2320      	movmi	r3, #32
 80074aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074ae:	0713      	lsls	r3, r2, #28
 80074b0:	bf44      	itt	mi
 80074b2:	232b      	movmi	r3, #43	; 0x2b
 80074b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074b8:	f89a 3000 	ldrb.w	r3, [sl]
 80074bc:	2b2a      	cmp	r3, #42	; 0x2a
 80074be:	d015      	beq.n	80074ec <_vfiprintf_r+0x13c>
 80074c0:	9a07      	ldr	r2, [sp, #28]
 80074c2:	4654      	mov	r4, sl
 80074c4:	2000      	movs	r0, #0
 80074c6:	f04f 0c0a 	mov.w	ip, #10
 80074ca:	4621      	mov	r1, r4
 80074cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074d0:	3b30      	subs	r3, #48	; 0x30
 80074d2:	2b09      	cmp	r3, #9
 80074d4:	d94e      	bls.n	8007574 <_vfiprintf_r+0x1c4>
 80074d6:	b1b0      	cbz	r0, 8007506 <_vfiprintf_r+0x156>
 80074d8:	9207      	str	r2, [sp, #28]
 80074da:	e014      	b.n	8007506 <_vfiprintf_r+0x156>
 80074dc:	eba0 0308 	sub.w	r3, r0, r8
 80074e0:	fa09 f303 	lsl.w	r3, r9, r3
 80074e4:	4313      	orrs	r3, r2
 80074e6:	9304      	str	r3, [sp, #16]
 80074e8:	46a2      	mov	sl, r4
 80074ea:	e7d2      	b.n	8007492 <_vfiprintf_r+0xe2>
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	1d19      	adds	r1, r3, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	9103      	str	r1, [sp, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bfbb      	ittet	lt
 80074f8:	425b      	neglt	r3, r3
 80074fa:	f042 0202 	orrlt.w	r2, r2, #2
 80074fe:	9307      	strge	r3, [sp, #28]
 8007500:	9307      	strlt	r3, [sp, #28]
 8007502:	bfb8      	it	lt
 8007504:	9204      	strlt	r2, [sp, #16]
 8007506:	7823      	ldrb	r3, [r4, #0]
 8007508:	2b2e      	cmp	r3, #46	; 0x2e
 800750a:	d10c      	bne.n	8007526 <_vfiprintf_r+0x176>
 800750c:	7863      	ldrb	r3, [r4, #1]
 800750e:	2b2a      	cmp	r3, #42	; 0x2a
 8007510:	d135      	bne.n	800757e <_vfiprintf_r+0x1ce>
 8007512:	9b03      	ldr	r3, [sp, #12]
 8007514:	1d1a      	adds	r2, r3, #4
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	9203      	str	r2, [sp, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	bfb8      	it	lt
 800751e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007522:	3402      	adds	r4, #2
 8007524:	9305      	str	r3, [sp, #20]
 8007526:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800760c <_vfiprintf_r+0x25c>
 800752a:	7821      	ldrb	r1, [r4, #0]
 800752c:	2203      	movs	r2, #3
 800752e:	4650      	mov	r0, sl
 8007530:	f7f8 fe5e 	bl	80001f0 <memchr>
 8007534:	b140      	cbz	r0, 8007548 <_vfiprintf_r+0x198>
 8007536:	2340      	movs	r3, #64	; 0x40
 8007538:	eba0 000a 	sub.w	r0, r0, sl
 800753c:	fa03 f000 	lsl.w	r0, r3, r0
 8007540:	9b04      	ldr	r3, [sp, #16]
 8007542:	4303      	orrs	r3, r0
 8007544:	3401      	adds	r4, #1
 8007546:	9304      	str	r3, [sp, #16]
 8007548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800754c:	482c      	ldr	r0, [pc, #176]	; (8007600 <_vfiprintf_r+0x250>)
 800754e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007552:	2206      	movs	r2, #6
 8007554:	f7f8 fe4c 	bl	80001f0 <memchr>
 8007558:	2800      	cmp	r0, #0
 800755a:	d03f      	beq.n	80075dc <_vfiprintf_r+0x22c>
 800755c:	4b29      	ldr	r3, [pc, #164]	; (8007604 <_vfiprintf_r+0x254>)
 800755e:	bb1b      	cbnz	r3, 80075a8 <_vfiprintf_r+0x1f8>
 8007560:	9b03      	ldr	r3, [sp, #12]
 8007562:	3307      	adds	r3, #7
 8007564:	f023 0307 	bic.w	r3, r3, #7
 8007568:	3308      	adds	r3, #8
 800756a:	9303      	str	r3, [sp, #12]
 800756c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800756e:	443b      	add	r3, r7
 8007570:	9309      	str	r3, [sp, #36]	; 0x24
 8007572:	e767      	b.n	8007444 <_vfiprintf_r+0x94>
 8007574:	fb0c 3202 	mla	r2, ip, r2, r3
 8007578:	460c      	mov	r4, r1
 800757a:	2001      	movs	r0, #1
 800757c:	e7a5      	b.n	80074ca <_vfiprintf_r+0x11a>
 800757e:	2300      	movs	r3, #0
 8007580:	3401      	adds	r4, #1
 8007582:	9305      	str	r3, [sp, #20]
 8007584:	4619      	mov	r1, r3
 8007586:	f04f 0c0a 	mov.w	ip, #10
 800758a:	4620      	mov	r0, r4
 800758c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007590:	3a30      	subs	r2, #48	; 0x30
 8007592:	2a09      	cmp	r2, #9
 8007594:	d903      	bls.n	800759e <_vfiprintf_r+0x1ee>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0c5      	beq.n	8007526 <_vfiprintf_r+0x176>
 800759a:	9105      	str	r1, [sp, #20]
 800759c:	e7c3      	b.n	8007526 <_vfiprintf_r+0x176>
 800759e:	fb0c 2101 	mla	r1, ip, r1, r2
 80075a2:	4604      	mov	r4, r0
 80075a4:	2301      	movs	r3, #1
 80075a6:	e7f0      	b.n	800758a <_vfiprintf_r+0x1da>
 80075a8:	ab03      	add	r3, sp, #12
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	462a      	mov	r2, r5
 80075ae:	4b16      	ldr	r3, [pc, #88]	; (8007608 <_vfiprintf_r+0x258>)
 80075b0:	a904      	add	r1, sp, #16
 80075b2:	4630      	mov	r0, r6
 80075b4:	f7fd fcb8 	bl	8004f28 <_printf_float>
 80075b8:	4607      	mov	r7, r0
 80075ba:	1c78      	adds	r0, r7, #1
 80075bc:	d1d6      	bne.n	800756c <_vfiprintf_r+0x1bc>
 80075be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075c0:	07d9      	lsls	r1, r3, #31
 80075c2:	d405      	bmi.n	80075d0 <_vfiprintf_r+0x220>
 80075c4:	89ab      	ldrh	r3, [r5, #12]
 80075c6:	059a      	lsls	r2, r3, #22
 80075c8:	d402      	bmi.n	80075d0 <_vfiprintf_r+0x220>
 80075ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075cc:	f7ff fa12 	bl	80069f4 <__retarget_lock_release_recursive>
 80075d0:	89ab      	ldrh	r3, [r5, #12]
 80075d2:	065b      	lsls	r3, r3, #25
 80075d4:	f53f af12 	bmi.w	80073fc <_vfiprintf_r+0x4c>
 80075d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075da:	e711      	b.n	8007400 <_vfiprintf_r+0x50>
 80075dc:	ab03      	add	r3, sp, #12
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	462a      	mov	r2, r5
 80075e2:	4b09      	ldr	r3, [pc, #36]	; (8007608 <_vfiprintf_r+0x258>)
 80075e4:	a904      	add	r1, sp, #16
 80075e6:	4630      	mov	r0, r6
 80075e8:	f7fd ff42 	bl	8005470 <_printf_i>
 80075ec:	e7e4      	b.n	80075b8 <_vfiprintf_r+0x208>
 80075ee:	bf00      	nop
 80075f0:	08008180 	.word	0x08008180
 80075f4:	080081a0 	.word	0x080081a0
 80075f8:	08008160 	.word	0x08008160
 80075fc:	0800831c 	.word	0x0800831c
 8007600:	08008326 	.word	0x08008326
 8007604:	08004f29 	.word	0x08004f29
 8007608:	0800738b 	.word	0x0800738b
 800760c:	08008322 	.word	0x08008322

08007610 <_putc_r>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	460d      	mov	r5, r1
 8007614:	4614      	mov	r4, r2
 8007616:	4606      	mov	r6, r0
 8007618:	b118      	cbz	r0, 8007622 <_putc_r+0x12>
 800761a:	6983      	ldr	r3, [r0, #24]
 800761c:	b90b      	cbnz	r3, 8007622 <_putc_r+0x12>
 800761e:	f7ff f945 	bl	80068ac <__sinit>
 8007622:	4b1c      	ldr	r3, [pc, #112]	; (8007694 <_putc_r+0x84>)
 8007624:	429c      	cmp	r4, r3
 8007626:	d124      	bne.n	8007672 <_putc_r+0x62>
 8007628:	6874      	ldr	r4, [r6, #4]
 800762a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800762c:	07d8      	lsls	r0, r3, #31
 800762e:	d405      	bmi.n	800763c <_putc_r+0x2c>
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	0599      	lsls	r1, r3, #22
 8007634:	d402      	bmi.n	800763c <_putc_r+0x2c>
 8007636:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007638:	f7ff f9db 	bl	80069f2 <__retarget_lock_acquire_recursive>
 800763c:	68a3      	ldr	r3, [r4, #8]
 800763e:	3b01      	subs	r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	60a3      	str	r3, [r4, #8]
 8007644:	da05      	bge.n	8007652 <_putc_r+0x42>
 8007646:	69a2      	ldr	r2, [r4, #24]
 8007648:	4293      	cmp	r3, r2
 800764a:	db1c      	blt.n	8007686 <_putc_r+0x76>
 800764c:	b2eb      	uxtb	r3, r5
 800764e:	2b0a      	cmp	r3, #10
 8007650:	d019      	beq.n	8007686 <_putc_r+0x76>
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	6022      	str	r2, [r4, #0]
 8007658:	701d      	strb	r5, [r3, #0]
 800765a:	b2ed      	uxtb	r5, r5
 800765c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800765e:	07da      	lsls	r2, r3, #31
 8007660:	d405      	bmi.n	800766e <_putc_r+0x5e>
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	059b      	lsls	r3, r3, #22
 8007666:	d402      	bmi.n	800766e <_putc_r+0x5e>
 8007668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800766a:	f7ff f9c3 	bl	80069f4 <__retarget_lock_release_recursive>
 800766e:	4628      	mov	r0, r5
 8007670:	bd70      	pop	{r4, r5, r6, pc}
 8007672:	4b09      	ldr	r3, [pc, #36]	; (8007698 <_putc_r+0x88>)
 8007674:	429c      	cmp	r4, r3
 8007676:	d101      	bne.n	800767c <_putc_r+0x6c>
 8007678:	68b4      	ldr	r4, [r6, #8]
 800767a:	e7d6      	b.n	800762a <_putc_r+0x1a>
 800767c:	4b07      	ldr	r3, [pc, #28]	; (800769c <_putc_r+0x8c>)
 800767e:	429c      	cmp	r4, r3
 8007680:	bf08      	it	eq
 8007682:	68f4      	ldreq	r4, [r6, #12]
 8007684:	e7d1      	b.n	800762a <_putc_r+0x1a>
 8007686:	4629      	mov	r1, r5
 8007688:	4622      	mov	r2, r4
 800768a:	4630      	mov	r0, r6
 800768c:	f7fe f8ba 	bl	8005804 <__swbuf_r>
 8007690:	4605      	mov	r5, r0
 8007692:	e7e3      	b.n	800765c <_putc_r+0x4c>
 8007694:	08008180 	.word	0x08008180
 8007698:	080081a0 	.word	0x080081a0
 800769c:	08008160 	.word	0x08008160

080076a0 <_sbrk_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4d06      	ldr	r5, [pc, #24]	; (80076bc <_sbrk_r+0x1c>)
 80076a4:	2300      	movs	r3, #0
 80076a6:	4604      	mov	r4, r0
 80076a8:	4608      	mov	r0, r1
 80076aa:	602b      	str	r3, [r5, #0]
 80076ac:	f7fa fa44 	bl	8001b38 <_sbrk>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_sbrk_r+0x1a>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_sbrk_r+0x1a>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	20000428 	.word	0x20000428

080076c0 <__sread>:
 80076c0:	b510      	push	{r4, lr}
 80076c2:	460c      	mov	r4, r1
 80076c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076c8:	f000 f8e2 	bl	8007890 <_read_r>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	bfab      	itete	ge
 80076d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076d2:	89a3      	ldrhlt	r3, [r4, #12]
 80076d4:	181b      	addge	r3, r3, r0
 80076d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076da:	bfac      	ite	ge
 80076dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80076de:	81a3      	strhlt	r3, [r4, #12]
 80076e0:	bd10      	pop	{r4, pc}

080076e2 <__swrite>:
 80076e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e6:	461f      	mov	r7, r3
 80076e8:	898b      	ldrh	r3, [r1, #12]
 80076ea:	05db      	lsls	r3, r3, #23
 80076ec:	4605      	mov	r5, r0
 80076ee:	460c      	mov	r4, r1
 80076f0:	4616      	mov	r6, r2
 80076f2:	d505      	bpl.n	8007700 <__swrite+0x1e>
 80076f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f8:	2302      	movs	r3, #2
 80076fa:	2200      	movs	r2, #0
 80076fc:	f000 f898 	bl	8007830 <_lseek_r>
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800770a:	81a3      	strh	r3, [r4, #12]
 800770c:	4632      	mov	r2, r6
 800770e:	463b      	mov	r3, r7
 8007710:	4628      	mov	r0, r5
 8007712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007716:	f000 b817 	b.w	8007748 <_write_r>

0800771a <__sseek>:
 800771a:	b510      	push	{r4, lr}
 800771c:	460c      	mov	r4, r1
 800771e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007722:	f000 f885 	bl	8007830 <_lseek_r>
 8007726:	1c43      	adds	r3, r0, #1
 8007728:	89a3      	ldrh	r3, [r4, #12]
 800772a:	bf15      	itete	ne
 800772c:	6560      	strne	r0, [r4, #84]	; 0x54
 800772e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007736:	81a3      	strheq	r3, [r4, #12]
 8007738:	bf18      	it	ne
 800773a:	81a3      	strhne	r3, [r4, #12]
 800773c:	bd10      	pop	{r4, pc}

0800773e <__sclose>:
 800773e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007742:	f000 b831 	b.w	80077a8 <_close_r>
	...

08007748 <_write_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4d07      	ldr	r5, [pc, #28]	; (8007768 <_write_r+0x20>)
 800774c:	4604      	mov	r4, r0
 800774e:	4608      	mov	r0, r1
 8007750:	4611      	mov	r1, r2
 8007752:	2200      	movs	r2, #0
 8007754:	602a      	str	r2, [r5, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	f7fa f99d 	bl	8001a96 <_write>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d102      	bne.n	8007766 <_write_r+0x1e>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	b103      	cbz	r3, 8007766 <_write_r+0x1e>
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	20000428 	.word	0x20000428

0800776c <__assert_func>:
 800776c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800776e:	4614      	mov	r4, r2
 8007770:	461a      	mov	r2, r3
 8007772:	4b09      	ldr	r3, [pc, #36]	; (8007798 <__assert_func+0x2c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4605      	mov	r5, r0
 8007778:	68d8      	ldr	r0, [r3, #12]
 800777a:	b14c      	cbz	r4, 8007790 <__assert_func+0x24>
 800777c:	4b07      	ldr	r3, [pc, #28]	; (800779c <__assert_func+0x30>)
 800777e:	9100      	str	r1, [sp, #0]
 8007780:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007784:	4906      	ldr	r1, [pc, #24]	; (80077a0 <__assert_func+0x34>)
 8007786:	462b      	mov	r3, r5
 8007788:	f000 f81e 	bl	80077c8 <fiprintf>
 800778c:	f000 f89f 	bl	80078ce <abort>
 8007790:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <__assert_func+0x38>)
 8007792:	461c      	mov	r4, r3
 8007794:	e7f3      	b.n	800777e <__assert_func+0x12>
 8007796:	bf00      	nop
 8007798:	2000009c 	.word	0x2000009c
 800779c:	0800832d 	.word	0x0800832d
 80077a0:	0800833a 	.word	0x0800833a
 80077a4:	08008368 	.word	0x08008368

080077a8 <_close_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4d06      	ldr	r5, [pc, #24]	; (80077c4 <_close_r+0x1c>)
 80077ac:	2300      	movs	r3, #0
 80077ae:	4604      	mov	r4, r0
 80077b0:	4608      	mov	r0, r1
 80077b2:	602b      	str	r3, [r5, #0]
 80077b4:	f7fa f98b 	bl	8001ace <_close>
 80077b8:	1c43      	adds	r3, r0, #1
 80077ba:	d102      	bne.n	80077c2 <_close_r+0x1a>
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	b103      	cbz	r3, 80077c2 <_close_r+0x1a>
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	20000428 	.word	0x20000428

080077c8 <fiprintf>:
 80077c8:	b40e      	push	{r1, r2, r3}
 80077ca:	b503      	push	{r0, r1, lr}
 80077cc:	4601      	mov	r1, r0
 80077ce:	ab03      	add	r3, sp, #12
 80077d0:	4805      	ldr	r0, [pc, #20]	; (80077e8 <fiprintf+0x20>)
 80077d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077d6:	6800      	ldr	r0, [r0, #0]
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	f7ff fde9 	bl	80073b0 <_vfiprintf_r>
 80077de:	b002      	add	sp, #8
 80077e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077e4:	b003      	add	sp, #12
 80077e6:	4770      	bx	lr
 80077e8:	2000009c 	.word	0x2000009c

080077ec <_fstat_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4d07      	ldr	r5, [pc, #28]	; (800780c <_fstat_r+0x20>)
 80077f0:	2300      	movs	r3, #0
 80077f2:	4604      	mov	r4, r0
 80077f4:	4608      	mov	r0, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	602b      	str	r3, [r5, #0]
 80077fa:	f7fa f974 	bl	8001ae6 <_fstat>
 80077fe:	1c43      	adds	r3, r0, #1
 8007800:	d102      	bne.n	8007808 <_fstat_r+0x1c>
 8007802:	682b      	ldr	r3, [r5, #0]
 8007804:	b103      	cbz	r3, 8007808 <_fstat_r+0x1c>
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	bd38      	pop	{r3, r4, r5, pc}
 800780a:	bf00      	nop
 800780c:	20000428 	.word	0x20000428

08007810 <_isatty_r>:
 8007810:	b538      	push	{r3, r4, r5, lr}
 8007812:	4d06      	ldr	r5, [pc, #24]	; (800782c <_isatty_r+0x1c>)
 8007814:	2300      	movs	r3, #0
 8007816:	4604      	mov	r4, r0
 8007818:	4608      	mov	r0, r1
 800781a:	602b      	str	r3, [r5, #0]
 800781c:	f7fa f973 	bl	8001b06 <_isatty>
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	d102      	bne.n	800782a <_isatty_r+0x1a>
 8007824:	682b      	ldr	r3, [r5, #0]
 8007826:	b103      	cbz	r3, 800782a <_isatty_r+0x1a>
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	bd38      	pop	{r3, r4, r5, pc}
 800782c:	20000428 	.word	0x20000428

08007830 <_lseek_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4d07      	ldr	r5, [pc, #28]	; (8007850 <_lseek_r+0x20>)
 8007834:	4604      	mov	r4, r0
 8007836:	4608      	mov	r0, r1
 8007838:	4611      	mov	r1, r2
 800783a:	2200      	movs	r2, #0
 800783c:	602a      	str	r2, [r5, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	f7fa f96c 	bl	8001b1c <_lseek>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d102      	bne.n	800784e <_lseek_r+0x1e>
 8007848:	682b      	ldr	r3, [r5, #0]
 800784a:	b103      	cbz	r3, 800784e <_lseek_r+0x1e>
 800784c:	6023      	str	r3, [r4, #0]
 800784e:	bd38      	pop	{r3, r4, r5, pc}
 8007850:	20000428 	.word	0x20000428

08007854 <__ascii_mbtowc>:
 8007854:	b082      	sub	sp, #8
 8007856:	b901      	cbnz	r1, 800785a <__ascii_mbtowc+0x6>
 8007858:	a901      	add	r1, sp, #4
 800785a:	b142      	cbz	r2, 800786e <__ascii_mbtowc+0x1a>
 800785c:	b14b      	cbz	r3, 8007872 <__ascii_mbtowc+0x1e>
 800785e:	7813      	ldrb	r3, [r2, #0]
 8007860:	600b      	str	r3, [r1, #0]
 8007862:	7812      	ldrb	r2, [r2, #0]
 8007864:	1e10      	subs	r0, r2, #0
 8007866:	bf18      	it	ne
 8007868:	2001      	movne	r0, #1
 800786a:	b002      	add	sp, #8
 800786c:	4770      	bx	lr
 800786e:	4610      	mov	r0, r2
 8007870:	e7fb      	b.n	800786a <__ascii_mbtowc+0x16>
 8007872:	f06f 0001 	mvn.w	r0, #1
 8007876:	e7f8      	b.n	800786a <__ascii_mbtowc+0x16>

08007878 <__malloc_lock>:
 8007878:	4801      	ldr	r0, [pc, #4]	; (8007880 <__malloc_lock+0x8>)
 800787a:	f7ff b8ba 	b.w	80069f2 <__retarget_lock_acquire_recursive>
 800787e:	bf00      	nop
 8007880:	20000420 	.word	0x20000420

08007884 <__malloc_unlock>:
 8007884:	4801      	ldr	r0, [pc, #4]	; (800788c <__malloc_unlock+0x8>)
 8007886:	f7ff b8b5 	b.w	80069f4 <__retarget_lock_release_recursive>
 800788a:	bf00      	nop
 800788c:	20000420 	.word	0x20000420

08007890 <_read_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4d07      	ldr	r5, [pc, #28]	; (80078b0 <_read_r+0x20>)
 8007894:	4604      	mov	r4, r0
 8007896:	4608      	mov	r0, r1
 8007898:	4611      	mov	r1, r2
 800789a:	2200      	movs	r2, #0
 800789c:	602a      	str	r2, [r5, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	f7fa f8dc 	bl	8001a5c <_read>
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d102      	bne.n	80078ae <_read_r+0x1e>
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	b103      	cbz	r3, 80078ae <_read_r+0x1e>
 80078ac:	6023      	str	r3, [r4, #0]
 80078ae:	bd38      	pop	{r3, r4, r5, pc}
 80078b0:	20000428 	.word	0x20000428

080078b4 <__ascii_wctomb>:
 80078b4:	b149      	cbz	r1, 80078ca <__ascii_wctomb+0x16>
 80078b6:	2aff      	cmp	r2, #255	; 0xff
 80078b8:	bf85      	ittet	hi
 80078ba:	238a      	movhi	r3, #138	; 0x8a
 80078bc:	6003      	strhi	r3, [r0, #0]
 80078be:	700a      	strbls	r2, [r1, #0]
 80078c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80078c4:	bf98      	it	ls
 80078c6:	2001      	movls	r0, #1
 80078c8:	4770      	bx	lr
 80078ca:	4608      	mov	r0, r1
 80078cc:	4770      	bx	lr

080078ce <abort>:
 80078ce:	b508      	push	{r3, lr}
 80078d0:	2006      	movs	r0, #6
 80078d2:	f000 f82b 	bl	800792c <raise>
 80078d6:	2001      	movs	r0, #1
 80078d8:	f7fa f8b6 	bl	8001a48 <_exit>

080078dc <_raise_r>:
 80078dc:	291f      	cmp	r1, #31
 80078de:	b538      	push	{r3, r4, r5, lr}
 80078e0:	4604      	mov	r4, r0
 80078e2:	460d      	mov	r5, r1
 80078e4:	d904      	bls.n	80078f0 <_raise_r+0x14>
 80078e6:	2316      	movs	r3, #22
 80078e8:	6003      	str	r3, [r0, #0]
 80078ea:	f04f 30ff 	mov.w	r0, #4294967295
 80078ee:	bd38      	pop	{r3, r4, r5, pc}
 80078f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078f2:	b112      	cbz	r2, 80078fa <_raise_r+0x1e>
 80078f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078f8:	b94b      	cbnz	r3, 800790e <_raise_r+0x32>
 80078fa:	4620      	mov	r0, r4
 80078fc:	f000 f830 	bl	8007960 <_getpid_r>
 8007900:	462a      	mov	r2, r5
 8007902:	4601      	mov	r1, r0
 8007904:	4620      	mov	r0, r4
 8007906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800790a:	f000 b817 	b.w	800793c <_kill_r>
 800790e:	2b01      	cmp	r3, #1
 8007910:	d00a      	beq.n	8007928 <_raise_r+0x4c>
 8007912:	1c59      	adds	r1, r3, #1
 8007914:	d103      	bne.n	800791e <_raise_r+0x42>
 8007916:	2316      	movs	r3, #22
 8007918:	6003      	str	r3, [r0, #0]
 800791a:	2001      	movs	r0, #1
 800791c:	e7e7      	b.n	80078ee <_raise_r+0x12>
 800791e:	2400      	movs	r4, #0
 8007920:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007924:	4628      	mov	r0, r5
 8007926:	4798      	blx	r3
 8007928:	2000      	movs	r0, #0
 800792a:	e7e0      	b.n	80078ee <_raise_r+0x12>

0800792c <raise>:
 800792c:	4b02      	ldr	r3, [pc, #8]	; (8007938 <raise+0xc>)
 800792e:	4601      	mov	r1, r0
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	f7ff bfd3 	b.w	80078dc <_raise_r>
 8007936:	bf00      	nop
 8007938:	2000009c 	.word	0x2000009c

0800793c <_kill_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	4d07      	ldr	r5, [pc, #28]	; (800795c <_kill_r+0x20>)
 8007940:	2300      	movs	r3, #0
 8007942:	4604      	mov	r4, r0
 8007944:	4608      	mov	r0, r1
 8007946:	4611      	mov	r1, r2
 8007948:	602b      	str	r3, [r5, #0]
 800794a:	f7fa f86d 	bl	8001a28 <_kill>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	d102      	bne.n	8007958 <_kill_r+0x1c>
 8007952:	682b      	ldr	r3, [r5, #0]
 8007954:	b103      	cbz	r3, 8007958 <_kill_r+0x1c>
 8007956:	6023      	str	r3, [r4, #0]
 8007958:	bd38      	pop	{r3, r4, r5, pc}
 800795a:	bf00      	nop
 800795c:	20000428 	.word	0x20000428

08007960 <_getpid_r>:
 8007960:	f7fa b85a 	b.w	8001a18 <_getpid>
 8007964:	0000      	movs	r0, r0
	...

08007968 <atan>:
 8007968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	ec55 4b10 	vmov	r4, r5, d0
 8007970:	4bc3      	ldr	r3, [pc, #780]	; (8007c80 <atan+0x318>)
 8007972:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007976:	429e      	cmp	r6, r3
 8007978:	46ab      	mov	fp, r5
 800797a:	dd18      	ble.n	80079ae <atan+0x46>
 800797c:	4bc1      	ldr	r3, [pc, #772]	; (8007c84 <atan+0x31c>)
 800797e:	429e      	cmp	r6, r3
 8007980:	dc01      	bgt.n	8007986 <atan+0x1e>
 8007982:	d109      	bne.n	8007998 <atan+0x30>
 8007984:	b144      	cbz	r4, 8007998 <atan+0x30>
 8007986:	4622      	mov	r2, r4
 8007988:	462b      	mov	r3, r5
 800798a:	4620      	mov	r0, r4
 800798c:	4629      	mov	r1, r5
 800798e:	f7f8 fc85 	bl	800029c <__adddf3>
 8007992:	4604      	mov	r4, r0
 8007994:	460d      	mov	r5, r1
 8007996:	e006      	b.n	80079a6 <atan+0x3e>
 8007998:	f1bb 0f00 	cmp.w	fp, #0
 800799c:	f300 8131 	bgt.w	8007c02 <atan+0x29a>
 80079a0:	a59b      	add	r5, pc, #620	; (adr r5, 8007c10 <atan+0x2a8>)
 80079a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80079a6:	ec45 4b10 	vmov	d0, r4, r5
 80079aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ae:	4bb6      	ldr	r3, [pc, #728]	; (8007c88 <atan+0x320>)
 80079b0:	429e      	cmp	r6, r3
 80079b2:	dc14      	bgt.n	80079de <atan+0x76>
 80079b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80079b8:	429e      	cmp	r6, r3
 80079ba:	dc0d      	bgt.n	80079d8 <atan+0x70>
 80079bc:	a396      	add	r3, pc, #600	; (adr r3, 8007c18 <atan+0x2b0>)
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	ee10 0a10 	vmov	r0, s0
 80079c6:	4629      	mov	r1, r5
 80079c8:	f7f8 fc68 	bl	800029c <__adddf3>
 80079cc:	4baf      	ldr	r3, [pc, #700]	; (8007c8c <atan+0x324>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	f7f9 f8aa 	bl	8000b28 <__aeabi_dcmpgt>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d1e6      	bne.n	80079a6 <atan+0x3e>
 80079d8:	f04f 3aff 	mov.w	sl, #4294967295
 80079dc:	e02b      	b.n	8007a36 <atan+0xce>
 80079de:	f000 f963 	bl	8007ca8 <fabs>
 80079e2:	4bab      	ldr	r3, [pc, #684]	; (8007c90 <atan+0x328>)
 80079e4:	429e      	cmp	r6, r3
 80079e6:	ec55 4b10 	vmov	r4, r5, d0
 80079ea:	f300 80bf 	bgt.w	8007b6c <atan+0x204>
 80079ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80079f2:	429e      	cmp	r6, r3
 80079f4:	f300 80a0 	bgt.w	8007b38 <atan+0x1d0>
 80079f8:	ee10 2a10 	vmov	r2, s0
 80079fc:	ee10 0a10 	vmov	r0, s0
 8007a00:	462b      	mov	r3, r5
 8007a02:	4629      	mov	r1, r5
 8007a04:	f7f8 fc4a 	bl	800029c <__adddf3>
 8007a08:	4ba0      	ldr	r3, [pc, #640]	; (8007c8c <atan+0x324>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f7f8 fc44 	bl	8000298 <__aeabi_dsub>
 8007a10:	2200      	movs	r2, #0
 8007a12:	4606      	mov	r6, r0
 8007a14:	460f      	mov	r7, r1
 8007a16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	f7f8 fc3d 	bl	800029c <__adddf3>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4630      	mov	r0, r6
 8007a28:	4639      	mov	r1, r7
 8007a2a:	f7f8 ff17 	bl	800085c <__aeabi_ddiv>
 8007a2e:	f04f 0a00 	mov.w	sl, #0
 8007a32:	4604      	mov	r4, r0
 8007a34:	460d      	mov	r5, r1
 8007a36:	4622      	mov	r2, r4
 8007a38:	462b      	mov	r3, r5
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	f7f8 fde3 	bl	8000608 <__aeabi_dmul>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	4680      	mov	r8, r0
 8007a48:	4689      	mov	r9, r1
 8007a4a:	f7f8 fddd 	bl	8000608 <__aeabi_dmul>
 8007a4e:	a374      	add	r3, pc, #464	; (adr r3, 8007c20 <atan+0x2b8>)
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	4606      	mov	r6, r0
 8007a56:	460f      	mov	r7, r1
 8007a58:	f7f8 fdd6 	bl	8000608 <__aeabi_dmul>
 8007a5c:	a372      	add	r3, pc, #456	; (adr r3, 8007c28 <atan+0x2c0>)
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	f7f8 fc1b 	bl	800029c <__adddf3>
 8007a66:	4632      	mov	r2, r6
 8007a68:	463b      	mov	r3, r7
 8007a6a:	f7f8 fdcd 	bl	8000608 <__aeabi_dmul>
 8007a6e:	a370      	add	r3, pc, #448	; (adr r3, 8007c30 <atan+0x2c8>)
 8007a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a74:	f7f8 fc12 	bl	800029c <__adddf3>
 8007a78:	4632      	mov	r2, r6
 8007a7a:	463b      	mov	r3, r7
 8007a7c:	f7f8 fdc4 	bl	8000608 <__aeabi_dmul>
 8007a80:	a36d      	add	r3, pc, #436	; (adr r3, 8007c38 <atan+0x2d0>)
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	f7f8 fc09 	bl	800029c <__adddf3>
 8007a8a:	4632      	mov	r2, r6
 8007a8c:	463b      	mov	r3, r7
 8007a8e:	f7f8 fdbb 	bl	8000608 <__aeabi_dmul>
 8007a92:	a36b      	add	r3, pc, #428	; (adr r3, 8007c40 <atan+0x2d8>)
 8007a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a98:	f7f8 fc00 	bl	800029c <__adddf3>
 8007a9c:	4632      	mov	r2, r6
 8007a9e:	463b      	mov	r3, r7
 8007aa0:	f7f8 fdb2 	bl	8000608 <__aeabi_dmul>
 8007aa4:	a368      	add	r3, pc, #416	; (adr r3, 8007c48 <atan+0x2e0>)
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	f7f8 fbf7 	bl	800029c <__adddf3>
 8007aae:	4642      	mov	r2, r8
 8007ab0:	464b      	mov	r3, r9
 8007ab2:	f7f8 fda9 	bl	8000608 <__aeabi_dmul>
 8007ab6:	a366      	add	r3, pc, #408	; (adr r3, 8007c50 <atan+0x2e8>)
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	4680      	mov	r8, r0
 8007abe:	4689      	mov	r9, r1
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	f7f8 fda0 	bl	8000608 <__aeabi_dmul>
 8007ac8:	a363      	add	r3, pc, #396	; (adr r3, 8007c58 <atan+0x2f0>)
 8007aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ace:	f7f8 fbe3 	bl	8000298 <__aeabi_dsub>
 8007ad2:	4632      	mov	r2, r6
 8007ad4:	463b      	mov	r3, r7
 8007ad6:	f7f8 fd97 	bl	8000608 <__aeabi_dmul>
 8007ada:	a361      	add	r3, pc, #388	; (adr r3, 8007c60 <atan+0x2f8>)
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	f7f8 fbda 	bl	8000298 <__aeabi_dsub>
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	f7f8 fd8e 	bl	8000608 <__aeabi_dmul>
 8007aec:	a35e      	add	r3, pc, #376	; (adr r3, 8007c68 <atan+0x300>)
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	f7f8 fbd1 	bl	8000298 <__aeabi_dsub>
 8007af6:	4632      	mov	r2, r6
 8007af8:	463b      	mov	r3, r7
 8007afa:	f7f8 fd85 	bl	8000608 <__aeabi_dmul>
 8007afe:	a35c      	add	r3, pc, #368	; (adr r3, 8007c70 <atan+0x308>)
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	f7f8 fbc8 	bl	8000298 <__aeabi_dsub>
 8007b08:	4632      	mov	r2, r6
 8007b0a:	463b      	mov	r3, r7
 8007b0c:	f7f8 fd7c 	bl	8000608 <__aeabi_dmul>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4640      	mov	r0, r8
 8007b16:	4649      	mov	r1, r9
 8007b18:	f7f8 fbc0 	bl	800029c <__adddf3>
 8007b1c:	4622      	mov	r2, r4
 8007b1e:	462b      	mov	r3, r5
 8007b20:	f7f8 fd72 	bl	8000608 <__aeabi_dmul>
 8007b24:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	d14b      	bne.n	8007bc6 <atan+0x25e>
 8007b2e:	4620      	mov	r0, r4
 8007b30:	4629      	mov	r1, r5
 8007b32:	f7f8 fbb1 	bl	8000298 <__aeabi_dsub>
 8007b36:	e72c      	b.n	8007992 <atan+0x2a>
 8007b38:	ee10 0a10 	vmov	r0, s0
 8007b3c:	4b53      	ldr	r3, [pc, #332]	; (8007c8c <atan+0x324>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	4629      	mov	r1, r5
 8007b42:	f7f8 fba9 	bl	8000298 <__aeabi_dsub>
 8007b46:	4b51      	ldr	r3, [pc, #324]	; (8007c8c <atan+0x324>)
 8007b48:	4606      	mov	r6, r0
 8007b4a:	460f      	mov	r7, r1
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	4620      	mov	r0, r4
 8007b50:	4629      	mov	r1, r5
 8007b52:	f7f8 fba3 	bl	800029c <__adddf3>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	f7f8 fe7d 	bl	800085c <__aeabi_ddiv>
 8007b62:	f04f 0a01 	mov.w	sl, #1
 8007b66:	4604      	mov	r4, r0
 8007b68:	460d      	mov	r5, r1
 8007b6a:	e764      	b.n	8007a36 <atan+0xce>
 8007b6c:	4b49      	ldr	r3, [pc, #292]	; (8007c94 <atan+0x32c>)
 8007b6e:	429e      	cmp	r6, r3
 8007b70:	da1d      	bge.n	8007bae <atan+0x246>
 8007b72:	ee10 0a10 	vmov	r0, s0
 8007b76:	4b48      	ldr	r3, [pc, #288]	; (8007c98 <atan+0x330>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	f7f8 fb8c 	bl	8000298 <__aeabi_dsub>
 8007b80:	4b45      	ldr	r3, [pc, #276]	; (8007c98 <atan+0x330>)
 8007b82:	4606      	mov	r6, r0
 8007b84:	460f      	mov	r7, r1
 8007b86:	2200      	movs	r2, #0
 8007b88:	4620      	mov	r0, r4
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	f7f8 fd3c 	bl	8000608 <__aeabi_dmul>
 8007b90:	4b3e      	ldr	r3, [pc, #248]	; (8007c8c <atan+0x324>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	f7f8 fb82 	bl	800029c <__adddf3>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	4639      	mov	r1, r7
 8007ba0:	f7f8 fe5c 	bl	800085c <__aeabi_ddiv>
 8007ba4:	f04f 0a02 	mov.w	sl, #2
 8007ba8:	4604      	mov	r4, r0
 8007baa:	460d      	mov	r5, r1
 8007bac:	e743      	b.n	8007a36 <atan+0xce>
 8007bae:	462b      	mov	r3, r5
 8007bb0:	ee10 2a10 	vmov	r2, s0
 8007bb4:	4939      	ldr	r1, [pc, #228]	; (8007c9c <atan+0x334>)
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	f7f8 fe50 	bl	800085c <__aeabi_ddiv>
 8007bbc:	f04f 0a03 	mov.w	sl, #3
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	460d      	mov	r5, r1
 8007bc4:	e737      	b.n	8007a36 <atan+0xce>
 8007bc6:	4b36      	ldr	r3, [pc, #216]	; (8007ca0 <atan+0x338>)
 8007bc8:	4e36      	ldr	r6, [pc, #216]	; (8007ca4 <atan+0x33c>)
 8007bca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007bce:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007bd2:	e9da 2300 	ldrd	r2, r3, [sl]
 8007bd6:	f7f8 fb5f 	bl	8000298 <__aeabi_dsub>
 8007bda:	4622      	mov	r2, r4
 8007bdc:	462b      	mov	r3, r5
 8007bde:	f7f8 fb5b 	bl	8000298 <__aeabi_dsub>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007bea:	f7f8 fb55 	bl	8000298 <__aeabi_dsub>
 8007bee:	f1bb 0f00 	cmp.w	fp, #0
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	460d      	mov	r5, r1
 8007bf6:	f6bf aed6 	bge.w	80079a6 <atan+0x3e>
 8007bfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bfe:	461d      	mov	r5, r3
 8007c00:	e6d1      	b.n	80079a6 <atan+0x3e>
 8007c02:	a51d      	add	r5, pc, #116	; (adr r5, 8007c78 <atan+0x310>)
 8007c04:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c08:	e6cd      	b.n	80079a6 <atan+0x3e>
 8007c0a:	bf00      	nop
 8007c0c:	f3af 8000 	nop.w
 8007c10:	54442d18 	.word	0x54442d18
 8007c14:	bff921fb 	.word	0xbff921fb
 8007c18:	8800759c 	.word	0x8800759c
 8007c1c:	7e37e43c 	.word	0x7e37e43c
 8007c20:	e322da11 	.word	0xe322da11
 8007c24:	3f90ad3a 	.word	0x3f90ad3a
 8007c28:	24760deb 	.word	0x24760deb
 8007c2c:	3fa97b4b 	.word	0x3fa97b4b
 8007c30:	a0d03d51 	.word	0xa0d03d51
 8007c34:	3fb10d66 	.word	0x3fb10d66
 8007c38:	c54c206e 	.word	0xc54c206e
 8007c3c:	3fb745cd 	.word	0x3fb745cd
 8007c40:	920083ff 	.word	0x920083ff
 8007c44:	3fc24924 	.word	0x3fc24924
 8007c48:	5555550d 	.word	0x5555550d
 8007c4c:	3fd55555 	.word	0x3fd55555
 8007c50:	2c6a6c2f 	.word	0x2c6a6c2f
 8007c54:	bfa2b444 	.word	0xbfa2b444
 8007c58:	52defd9a 	.word	0x52defd9a
 8007c5c:	3fadde2d 	.word	0x3fadde2d
 8007c60:	af749a6d 	.word	0xaf749a6d
 8007c64:	3fb3b0f2 	.word	0x3fb3b0f2
 8007c68:	fe231671 	.word	0xfe231671
 8007c6c:	3fbc71c6 	.word	0x3fbc71c6
 8007c70:	9998ebc4 	.word	0x9998ebc4
 8007c74:	3fc99999 	.word	0x3fc99999
 8007c78:	54442d18 	.word	0x54442d18
 8007c7c:	3ff921fb 	.word	0x3ff921fb
 8007c80:	440fffff 	.word	0x440fffff
 8007c84:	7ff00000 	.word	0x7ff00000
 8007c88:	3fdbffff 	.word	0x3fdbffff
 8007c8c:	3ff00000 	.word	0x3ff00000
 8007c90:	3ff2ffff 	.word	0x3ff2ffff
 8007c94:	40038000 	.word	0x40038000
 8007c98:	3ff80000 	.word	0x3ff80000
 8007c9c:	bff00000 	.word	0xbff00000
 8007ca0:	08008498 	.word	0x08008498
 8007ca4:	08008478 	.word	0x08008478

08007ca8 <fabs>:
 8007ca8:	ec51 0b10 	vmov	r0, r1, d0
 8007cac:	ee10 2a10 	vmov	r2, s0
 8007cb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007cb4:	ec43 2b10 	vmov	d0, r2, r3
 8007cb8:	4770      	bx	lr

08007cba <atan2>:
 8007cba:	f000 b835 	b.w	8007d28 <__ieee754_atan2>
	...

08007cc0 <sqrt>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	ed2d 8b02 	vpush	{d8}
 8007cc6:	ec55 4b10 	vmov	r4, r5, d0
 8007cca:	f000 f8f7 	bl	8007ebc <__ieee754_sqrt>
 8007cce:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <sqrt+0x64>)
 8007cd0:	eeb0 8a40 	vmov.f32	s16, s0
 8007cd4:	eef0 8a60 	vmov.f32	s17, s1
 8007cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	d019      	beq.n	8007d14 <sqrt+0x54>
 8007ce0:	4622      	mov	r2, r4
 8007ce2:	462b      	mov	r3, r5
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	f7f8 ff28 	bl	8000b3c <__aeabi_dcmpun>
 8007cec:	b990      	cbnz	r0, 8007d14 <sqrt+0x54>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	f7f8 fef9 	bl	8000aec <__aeabi_dcmplt>
 8007cfa:	b158      	cbz	r0, 8007d14 <sqrt+0x54>
 8007cfc:	f7fd f842 	bl	8004d84 <__errno>
 8007d00:	2321      	movs	r3, #33	; 0x21
 8007d02:	6003      	str	r3, [r0, #0]
 8007d04:	2200      	movs	r2, #0
 8007d06:	2300      	movs	r3, #0
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	f7f8 fda6 	bl	800085c <__aeabi_ddiv>
 8007d10:	ec41 0b18 	vmov	d8, r0, r1
 8007d14:	eeb0 0a48 	vmov.f32	s0, s16
 8007d18:	eef0 0a68 	vmov.f32	s1, s17
 8007d1c:	ecbd 8b02 	vpop	{d8}
 8007d20:	bd38      	pop	{r3, r4, r5, pc}
 8007d22:	bf00      	nop
 8007d24:	2000026c 	.word	0x2000026c

08007d28 <__ieee754_atan2>:
 8007d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d2c:	ec57 6b11 	vmov	r6, r7, d1
 8007d30:	4273      	negs	r3, r6
 8007d32:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007eb8 <__ieee754_atan2+0x190>
 8007d36:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007d3a:	4333      	orrs	r3, r6
 8007d3c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007d40:	4573      	cmp	r3, lr
 8007d42:	ec51 0b10 	vmov	r0, r1, d0
 8007d46:	ee11 8a10 	vmov	r8, s2
 8007d4a:	d80a      	bhi.n	8007d62 <__ieee754_atan2+0x3a>
 8007d4c:	4244      	negs	r4, r0
 8007d4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d52:	4304      	orrs	r4, r0
 8007d54:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007d58:	4574      	cmp	r4, lr
 8007d5a:	ee10 9a10 	vmov	r9, s0
 8007d5e:	468c      	mov	ip, r1
 8007d60:	d907      	bls.n	8007d72 <__ieee754_atan2+0x4a>
 8007d62:	4632      	mov	r2, r6
 8007d64:	463b      	mov	r3, r7
 8007d66:	f7f8 fa99 	bl	800029c <__adddf3>
 8007d6a:	ec41 0b10 	vmov	d0, r0, r1
 8007d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d72:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007d76:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007d7a:	4334      	orrs	r4, r6
 8007d7c:	d103      	bne.n	8007d86 <__ieee754_atan2+0x5e>
 8007d7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d82:	f7ff bdf1 	b.w	8007968 <atan>
 8007d86:	17bc      	asrs	r4, r7, #30
 8007d88:	f004 0402 	and.w	r4, r4, #2
 8007d8c:	ea53 0909 	orrs.w	r9, r3, r9
 8007d90:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007d94:	d107      	bne.n	8007da6 <__ieee754_atan2+0x7e>
 8007d96:	2c02      	cmp	r4, #2
 8007d98:	d060      	beq.n	8007e5c <__ieee754_atan2+0x134>
 8007d9a:	2c03      	cmp	r4, #3
 8007d9c:	d1e5      	bne.n	8007d6a <__ieee754_atan2+0x42>
 8007d9e:	a142      	add	r1, pc, #264	; (adr r1, 8007ea8 <__ieee754_atan2+0x180>)
 8007da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007da4:	e7e1      	b.n	8007d6a <__ieee754_atan2+0x42>
 8007da6:	ea52 0808 	orrs.w	r8, r2, r8
 8007daa:	d106      	bne.n	8007dba <__ieee754_atan2+0x92>
 8007dac:	f1bc 0f00 	cmp.w	ip, #0
 8007db0:	da5f      	bge.n	8007e72 <__ieee754_atan2+0x14a>
 8007db2:	a13f      	add	r1, pc, #252	; (adr r1, 8007eb0 <__ieee754_atan2+0x188>)
 8007db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007db8:	e7d7      	b.n	8007d6a <__ieee754_atan2+0x42>
 8007dba:	4572      	cmp	r2, lr
 8007dbc:	d10f      	bne.n	8007dde <__ieee754_atan2+0xb6>
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	f104 34ff 	add.w	r4, r4, #4294967295
 8007dc4:	d107      	bne.n	8007dd6 <__ieee754_atan2+0xae>
 8007dc6:	2c02      	cmp	r4, #2
 8007dc8:	d84c      	bhi.n	8007e64 <__ieee754_atan2+0x13c>
 8007dca:	4b35      	ldr	r3, [pc, #212]	; (8007ea0 <__ieee754_atan2+0x178>)
 8007dcc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007dd0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007dd4:	e7c9      	b.n	8007d6a <__ieee754_atan2+0x42>
 8007dd6:	2c02      	cmp	r4, #2
 8007dd8:	d848      	bhi.n	8007e6c <__ieee754_atan2+0x144>
 8007dda:	4b32      	ldr	r3, [pc, #200]	; (8007ea4 <__ieee754_atan2+0x17c>)
 8007ddc:	e7f6      	b.n	8007dcc <__ieee754_atan2+0xa4>
 8007dde:	4573      	cmp	r3, lr
 8007de0:	d0e4      	beq.n	8007dac <__ieee754_atan2+0x84>
 8007de2:	1a9b      	subs	r3, r3, r2
 8007de4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007de8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007dec:	da1e      	bge.n	8007e2c <__ieee754_atan2+0x104>
 8007dee:	2f00      	cmp	r7, #0
 8007df0:	da01      	bge.n	8007df6 <__ieee754_atan2+0xce>
 8007df2:	323c      	adds	r2, #60	; 0x3c
 8007df4:	db1e      	blt.n	8007e34 <__ieee754_atan2+0x10c>
 8007df6:	4632      	mov	r2, r6
 8007df8:	463b      	mov	r3, r7
 8007dfa:	f7f8 fd2f 	bl	800085c <__aeabi_ddiv>
 8007dfe:	ec41 0b10 	vmov	d0, r0, r1
 8007e02:	f7ff ff51 	bl	8007ca8 <fabs>
 8007e06:	f7ff fdaf 	bl	8007968 <atan>
 8007e0a:	ec51 0b10 	vmov	r0, r1, d0
 8007e0e:	2c01      	cmp	r4, #1
 8007e10:	d013      	beq.n	8007e3a <__ieee754_atan2+0x112>
 8007e12:	2c02      	cmp	r4, #2
 8007e14:	d015      	beq.n	8007e42 <__ieee754_atan2+0x11a>
 8007e16:	2c00      	cmp	r4, #0
 8007e18:	d0a7      	beq.n	8007d6a <__ieee754_atan2+0x42>
 8007e1a:	a319      	add	r3, pc, #100	; (adr r3, 8007e80 <__ieee754_atan2+0x158>)
 8007e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e20:	f7f8 fa3a 	bl	8000298 <__aeabi_dsub>
 8007e24:	a318      	add	r3, pc, #96	; (adr r3, 8007e88 <__ieee754_atan2+0x160>)
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	e014      	b.n	8007e56 <__ieee754_atan2+0x12e>
 8007e2c:	a118      	add	r1, pc, #96	; (adr r1, 8007e90 <__ieee754_atan2+0x168>)
 8007e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e32:	e7ec      	b.n	8007e0e <__ieee754_atan2+0xe6>
 8007e34:	2000      	movs	r0, #0
 8007e36:	2100      	movs	r1, #0
 8007e38:	e7e9      	b.n	8007e0e <__ieee754_atan2+0xe6>
 8007e3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e3e:	4619      	mov	r1, r3
 8007e40:	e793      	b.n	8007d6a <__ieee754_atan2+0x42>
 8007e42:	a30f      	add	r3, pc, #60	; (adr r3, 8007e80 <__ieee754_atan2+0x158>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f7f8 fa26 	bl	8000298 <__aeabi_dsub>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	a10d      	add	r1, pc, #52	; (adr r1, 8007e88 <__ieee754_atan2+0x160>)
 8007e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e56:	f7f8 fa1f 	bl	8000298 <__aeabi_dsub>
 8007e5a:	e786      	b.n	8007d6a <__ieee754_atan2+0x42>
 8007e5c:	a10a      	add	r1, pc, #40	; (adr r1, 8007e88 <__ieee754_atan2+0x160>)
 8007e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e62:	e782      	b.n	8007d6a <__ieee754_atan2+0x42>
 8007e64:	a10c      	add	r1, pc, #48	; (adr r1, 8007e98 <__ieee754_atan2+0x170>)
 8007e66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e6a:	e77e      	b.n	8007d6a <__ieee754_atan2+0x42>
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	2100      	movs	r1, #0
 8007e70:	e77b      	b.n	8007d6a <__ieee754_atan2+0x42>
 8007e72:	a107      	add	r1, pc, #28	; (adr r1, 8007e90 <__ieee754_atan2+0x168>)
 8007e74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e78:	e777      	b.n	8007d6a <__ieee754_atan2+0x42>
 8007e7a:	bf00      	nop
 8007e7c:	f3af 8000 	nop.w
 8007e80:	33145c07 	.word	0x33145c07
 8007e84:	3ca1a626 	.word	0x3ca1a626
 8007e88:	54442d18 	.word	0x54442d18
 8007e8c:	400921fb 	.word	0x400921fb
 8007e90:	54442d18 	.word	0x54442d18
 8007e94:	3ff921fb 	.word	0x3ff921fb
 8007e98:	54442d18 	.word	0x54442d18
 8007e9c:	3fe921fb 	.word	0x3fe921fb
 8007ea0:	080084b8 	.word	0x080084b8
 8007ea4:	080084d0 	.word	0x080084d0
 8007ea8:	54442d18 	.word	0x54442d18
 8007eac:	c00921fb 	.word	0xc00921fb
 8007eb0:	54442d18 	.word	0x54442d18
 8007eb4:	bff921fb 	.word	0xbff921fb
 8007eb8:	7ff00000 	.word	0x7ff00000

08007ebc <__ieee754_sqrt>:
 8007ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec0:	ec55 4b10 	vmov	r4, r5, d0
 8007ec4:	4e56      	ldr	r6, [pc, #344]	; (8008020 <__ieee754_sqrt+0x164>)
 8007ec6:	43ae      	bics	r6, r5
 8007ec8:	ee10 0a10 	vmov	r0, s0
 8007ecc:	ee10 3a10 	vmov	r3, s0
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	462a      	mov	r2, r5
 8007ed4:	d110      	bne.n	8007ef8 <__ieee754_sqrt+0x3c>
 8007ed6:	ee10 2a10 	vmov	r2, s0
 8007eda:	462b      	mov	r3, r5
 8007edc:	f7f8 fb94 	bl	8000608 <__aeabi_dmul>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	f7f8 f9d8 	bl	800029c <__adddf3>
 8007eec:	4604      	mov	r4, r0
 8007eee:	460d      	mov	r5, r1
 8007ef0:	ec45 4b10 	vmov	d0, r4, r5
 8007ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef8:	2d00      	cmp	r5, #0
 8007efa:	dc10      	bgt.n	8007f1e <__ieee754_sqrt+0x62>
 8007efc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007f00:	4330      	orrs	r0, r6
 8007f02:	d0f5      	beq.n	8007ef0 <__ieee754_sqrt+0x34>
 8007f04:	b15d      	cbz	r5, 8007f1e <__ieee754_sqrt+0x62>
 8007f06:	ee10 2a10 	vmov	r2, s0
 8007f0a:	462b      	mov	r3, r5
 8007f0c:	ee10 0a10 	vmov	r0, s0
 8007f10:	f7f8 f9c2 	bl	8000298 <__aeabi_dsub>
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	f7f8 fca0 	bl	800085c <__aeabi_ddiv>
 8007f1c:	e7e6      	b.n	8007eec <__ieee754_sqrt+0x30>
 8007f1e:	1509      	asrs	r1, r1, #20
 8007f20:	d076      	beq.n	8008010 <__ieee754_sqrt+0x154>
 8007f22:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007f26:	07ce      	lsls	r6, r1, #31
 8007f28:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007f2c:	bf5e      	ittt	pl
 8007f2e:	0fda      	lsrpl	r2, r3, #31
 8007f30:	005b      	lslpl	r3, r3, #1
 8007f32:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007f36:	0fda      	lsrs	r2, r3, #31
 8007f38:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007f3c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007f40:	2000      	movs	r0, #0
 8007f42:	106d      	asrs	r5, r5, #1
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	f04f 0e16 	mov.w	lr, #22
 8007f4a:	4684      	mov	ip, r0
 8007f4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f50:	eb0c 0401 	add.w	r4, ip, r1
 8007f54:	4294      	cmp	r4, r2
 8007f56:	bfde      	ittt	le
 8007f58:	1b12      	suble	r2, r2, r4
 8007f5a:	eb04 0c01 	addle.w	ip, r4, r1
 8007f5e:	1840      	addle	r0, r0, r1
 8007f60:	0052      	lsls	r2, r2, #1
 8007f62:	f1be 0e01 	subs.w	lr, lr, #1
 8007f66:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007f6a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007f6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007f72:	d1ed      	bne.n	8007f50 <__ieee754_sqrt+0x94>
 8007f74:	4671      	mov	r1, lr
 8007f76:	2720      	movs	r7, #32
 8007f78:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007f7c:	4562      	cmp	r2, ip
 8007f7e:	eb04 060e 	add.w	r6, r4, lr
 8007f82:	dc02      	bgt.n	8007f8a <__ieee754_sqrt+0xce>
 8007f84:	d113      	bne.n	8007fae <__ieee754_sqrt+0xf2>
 8007f86:	429e      	cmp	r6, r3
 8007f88:	d811      	bhi.n	8007fae <__ieee754_sqrt+0xf2>
 8007f8a:	2e00      	cmp	r6, #0
 8007f8c:	eb06 0e04 	add.w	lr, r6, r4
 8007f90:	da43      	bge.n	800801a <__ieee754_sqrt+0x15e>
 8007f92:	f1be 0f00 	cmp.w	lr, #0
 8007f96:	db40      	blt.n	800801a <__ieee754_sqrt+0x15e>
 8007f98:	f10c 0801 	add.w	r8, ip, #1
 8007f9c:	eba2 020c 	sub.w	r2, r2, ip
 8007fa0:	429e      	cmp	r6, r3
 8007fa2:	bf88      	it	hi
 8007fa4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007fa8:	1b9b      	subs	r3, r3, r6
 8007faa:	4421      	add	r1, r4
 8007fac:	46c4      	mov	ip, r8
 8007fae:	0052      	lsls	r2, r2, #1
 8007fb0:	3f01      	subs	r7, #1
 8007fb2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007fb6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007fba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007fbe:	d1dd      	bne.n	8007f7c <__ieee754_sqrt+0xc0>
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	d006      	beq.n	8007fd2 <__ieee754_sqrt+0x116>
 8007fc4:	1c4c      	adds	r4, r1, #1
 8007fc6:	bf13      	iteet	ne
 8007fc8:	3101      	addne	r1, #1
 8007fca:	3001      	addeq	r0, #1
 8007fcc:	4639      	moveq	r1, r7
 8007fce:	f021 0101 	bicne.w	r1, r1, #1
 8007fd2:	1043      	asrs	r3, r0, #1
 8007fd4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007fd8:	0849      	lsrs	r1, r1, #1
 8007fda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007fde:	07c2      	lsls	r2, r0, #31
 8007fe0:	bf48      	it	mi
 8007fe2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007fe6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007fea:	460c      	mov	r4, r1
 8007fec:	463d      	mov	r5, r7
 8007fee:	e77f      	b.n	8007ef0 <__ieee754_sqrt+0x34>
 8007ff0:	0ada      	lsrs	r2, r3, #11
 8007ff2:	3815      	subs	r0, #21
 8007ff4:	055b      	lsls	r3, r3, #21
 8007ff6:	2a00      	cmp	r2, #0
 8007ff8:	d0fa      	beq.n	8007ff0 <__ieee754_sqrt+0x134>
 8007ffa:	02d7      	lsls	r7, r2, #11
 8007ffc:	d50a      	bpl.n	8008014 <__ieee754_sqrt+0x158>
 8007ffe:	f1c1 0420 	rsb	r4, r1, #32
 8008002:	fa23 f404 	lsr.w	r4, r3, r4
 8008006:	1e4d      	subs	r5, r1, #1
 8008008:	408b      	lsls	r3, r1
 800800a:	4322      	orrs	r2, r4
 800800c:	1b41      	subs	r1, r0, r5
 800800e:	e788      	b.n	8007f22 <__ieee754_sqrt+0x66>
 8008010:	4608      	mov	r0, r1
 8008012:	e7f0      	b.n	8007ff6 <__ieee754_sqrt+0x13a>
 8008014:	0052      	lsls	r2, r2, #1
 8008016:	3101      	adds	r1, #1
 8008018:	e7ef      	b.n	8007ffa <__ieee754_sqrt+0x13e>
 800801a:	46e0      	mov	r8, ip
 800801c:	e7be      	b.n	8007f9c <__ieee754_sqrt+0xe0>
 800801e:	bf00      	nop
 8008020:	7ff00000 	.word	0x7ff00000

08008024 <_init>:
 8008024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008026:	bf00      	nop
 8008028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800802a:	bc08      	pop	{r3}
 800802c:	469e      	mov	lr, r3
 800802e:	4770      	bx	lr

08008030 <_fini>:
 8008030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008032:	bf00      	nop
 8008034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008036:	bc08      	pop	{r3}
 8008038:	469e      	mov	lr, r3
 800803a:	4770      	bx	lr
